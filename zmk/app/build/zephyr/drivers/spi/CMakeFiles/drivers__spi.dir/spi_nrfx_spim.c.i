# 0 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/autoconf.h" 1
# 0 "<command-line>" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/zephyr_stdint.h" 1
# 0 "<command-line>" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 1
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 145 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4

# 145 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 214 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 329 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 1 3 4
# 12 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 1 3 4







# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 1 3 4
# 28 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/picolibc.h" 1 3 4





       
# 29 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 2 3 4
# 9 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 2 3 4
# 41 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       int 
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                      __int32_t;

typedef 
# 79 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned int 
# 79 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __uint32_t;
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long long int 
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                      __int64_t;

typedef 
# 105 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned long long int 
# 105 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __uint64_t;
# 134 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       int 
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                            __int_least32_t;

typedef 
# 184 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned int 
# 184 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                             __uint_least32_t;
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long long int 
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                            __int_least64_t;

typedef 
# 202 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned long long int 
# 202 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                             __uint_least64_t;
# 214 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef 
# 230 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long int 
# 230 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __intptr_t;

typedef 
# 232 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long unsigned int 
# 232 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                        __uintptr_t;
# 13 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 190 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 14 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_stdint.h" 1 3 4
# 20 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 15 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef 
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         int 
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                             int_fast32_t;
  typedef 
# 72 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         unsigned int 
# 72 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                              uint_fast32_t;
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef 
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         long long int 
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                             int_fast64_t;
  typedef 
# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         unsigned long long int 
# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                              uint_fast64_t;
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 2
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"

# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"
typedef union {
 long long thelonglong;
 long double thelongdouble;
 uintmax_t theuintmax_t;
 size_t thesize_t;
 uintptr_t theuintptr_t;
 void *thepvoid;
 void (*thepfunc)(void);
} z_max_align_t;
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/devicetree_generated.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2





# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h" 1
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h" 1
# 1083 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_listify.h" 1
# 1084 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h" 2
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_is_eq.h" 1
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 184 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_inc.h" 1
# 185 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_dec.h" 1
# 188 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_x2.h" 1
# 191 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h" 2
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h" 1
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h" 1
# 98 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/common.h" 1
# 99 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdbool.h" 1 3 4
# 100 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h" 2
# 51 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h" 2
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 3 4
             _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
                  is_power_of_two(unsigned int x)
{
 return (((x) != 0U) && (((x) & ((x) - 1U)) == 0U));
}
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline int64_t arithmetic_shift_right(int64_t value, uint8_t shift)
{
 int64_t sign_ext;

 if (shift == 0U) {
  return value;
 }


 sign_ext = (value >> 63) & 1;


 sign_ext = -sign_ext;


 return (value >> shift) | (sign_ext << (64 - shift));
}
# 418 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline void bytecpy(void *dst, const void *src, size_t size)
{
 size_t i;

 for (i = 0; i < size; ++i) {
  ((volatile uint8_t *)dst)[i] = ((volatile const uint8_t *)src)[i];
 }
}
# 437 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline void byteswp(void *a, void *b, size_t size)
{
 uint8_t t;
 uint8_t *aa = (uint8_t *)a;
 uint8_t *bb = (uint8_t *)b;

 for (; size > 0; --size) {
  t = *aa;
  *aa++ = *bb;
  *bb++ = t;
 }
}
# 458 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
int char2hex(char c, uint8_t *x);
# 468 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
int hex2char(uint8_t x, char *c);
# 480 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen);
# 492 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen);
# 501 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline uint8_t bcd2bin(uint8_t bcd)
{
 return ((10 * (bcd >> 4)) + (bcd & 0x0F));
}
# 513 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline uint8_t bin2bcd(uint8_t bin)
{
 return (((bin / 10) << 4) | (bin % 10));
}
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value);
# 557 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
char *utf8_trunc(char *utf8_str);
# 573 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
char *utf8_lcpy(char *dst, const char *src, size_t n);
# 640 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h" 1
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h" 2
# 641 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 4306 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/io-channels.h" 1
# 4307 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/clocks.h" 1
# 4308 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/gpio.h" 1
# 4309 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/spi.h" 1
# 4310 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/dma.h" 1
# 4311 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/pwms.h" 1
# 4312 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/fixed-partitions.h" 1
# 4313 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/ordinals.h" 1
# 4314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/pinctrl.h" 1
# 4315 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/can.h" 1
# 4316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/reset.h" 1
# 4317 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/mbox.h" 1
# 4318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h" 1
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h" 2
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
struct device;
# 59 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
union init_function {






 int (*sys)(void);
# 75 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
 int (*dev)(const struct device *dev);
};
# 92 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
struct init_entry {

 union init_function init_fn;




 const struct device *dev;
};
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h" 1
# 137 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/section_tags.h" 1
# 138 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h" 2
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 1
# 46 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 1
# 102 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 103 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 1 3 4
# 16 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 17 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 1 3 4
# 32 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/ieeefp.h" 1 3 4
# 33 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/float.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 36 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4
# 18 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 44 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 2 3 4
# 20 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 23 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4
# 312 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4

# 312 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;





extern intmax_t imaxabs(intmax_t);
extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denomer);
extern intmax_t strtoimax(const char *__restrict, char **__restrict, int);
extern uintmax_t strtoumax(const char *__restrict, char **__restrict, int);
extern intmax_t wcstoimax(const wchar_t *__restrict, wchar_t **__restrict, int);
extern uintmax_t wcstoumax(const wchar_t *__restrict, wchar_t **__restrict, int);
# 104 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h" 1
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h"

# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h"
void __attribute__((format (printf, 1, 2))) assert_print(const char *fmt, ...);
# 105 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2

struct k_mem_paging_stats_t {
# 132 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
};

struct k_mem_paging_histogram_t {
# 144 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
};


static inline uintptr_t z_mem_phys_addr(void *virt)
{
 uintptr_t addr = (uintptr_t)virt;
# 161 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
 { }






                       ;






 return ((addr) - 0);
}


static inline void *z_mem_virt_addr(uintptr_t phys)
{
 { }





                                                            ;





 return (void *)((phys) + 0);
}
# 241 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void z_phys_map(uint8_t **virt_ptr, uintptr_t phys, size_t size,
  uint32_t flags);
# 271 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void z_phys_unmap(uint8_t *virt, size_t size);
# 308 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
size_t k_mem_free_get(void);
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void *k_mem_map(size_t size, uint32_t flags);
# 364 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_unmap(void *addr, size_t size);
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
size_t k_mem_region_align(uintptr_t *aligned_addr, size_t *aligned_size,
     uintptr_t addr, size_t size, size_t align);
# 415 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
int k_mem_page_out(void *addr, size_t size);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_page_in(void *addr, size_t size);
# 445 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_pin(void *addr, size_t size);
# 457 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_unpin(void *addr, size_t size);
# 467 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t *stats);

struct k_thread;
# 479 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline
void k_mem_paging_thread_stats_get(struct k_thread *thread,
       struct k_mem_paging_stats_t *stats);
# 491 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_eviction_get(
 struct k_mem_paging_histogram_t *hist);
# 502 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_in_get(
 struct k_mem_paging_histogram_t *hist);
# 513 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_out_get(
 struct k_mem_paging_histogram_t *hist);

# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 1






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing_syscall.h" 1
# 8 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 2



# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 1 3 4
# 40 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4

# 40 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 12 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscall_list.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/syscall.h" 1
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/syscall.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/syscall.h" 1
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/syscall.h" 2
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 2
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"

# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
typedef uintptr_t (*_k_syscall_handler_t)(uintptr_t arg1, uintptr_t arg2,
       uintptr_t arg3, uintptr_t arg4,
       uintptr_t arg5, uintptr_t arg6,
       void *ssf);




static inline __attribute__((always_inline)) 
# 94 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
                    _Bool 
# 94 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                         z_syscall_trap(void)
{
 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
_Bool 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
     ret = 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
           0
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                ;
# 106 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
 return ret;
}







static inline 
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
             _Bool 
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                  k_is_user_context(void)
{



 return 
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
       0
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
            ;

}
# 15 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 2
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_stats_get(stats);
}
# 47 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats)
{
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_thread_stats_get(thread, stats);
}
# 72 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_eviction_get(hist);
}
# 96 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 108 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 108 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_in_get(hist);
}
# 120 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 132 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 132 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_out_get(hist);
}
# 517 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
struct z_page_frame *k_mem_paging_eviction_select(
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 3 4
                                                 _Bool 
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
                                                      *dirty);
# 551 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_eviction_init(void);
# 598 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
int k_mem_paging_backing_store_location_get(struct z_page_frame *pf,
         uintptr_t *location,
         
# 600 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 3 4
        _Bool 
# 600 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
             page_fault);
# 612 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_location_free(uintptr_t location);
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_out(uintptr_t location);
# 638 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_in(uintptr_t location);
# 660 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_finalize(struct z_page_frame *pf,
           uintptr_t location);
# 676 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_init(void);
# 48 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h" 2





typedef uint32_t io_port_t;
typedef uintptr_t mm_reg_t;
typedef uintptr_t mem_addr_t;
# 49 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 2
# 119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h"
struct z_device_mmio_rom {

 mm_reg_t addr;
};
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/iterable_sections.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 61 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
typedef int16_t device_handle_t;
# 354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
struct device_state {







 uint8_t init_res;




 
# 367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
_Bool 
# 367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
     initialized : 1;
};

struct pm_device;
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
struct device {

 const char *name;

 const void *config;

 const void *api;

 struct device_state *state;

 void *data;
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
 struct pm_device *pm;

};
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline device_handle_t device_handle_get(const struct device *dev)
{
 device_handle_t ret = 0;
 extern struct device _device_list_start[];




 if (dev != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
           ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
               ) {
  ret = 1 + (device_handle_t)(dev - _device_list_start);
 }

 return ret;
}
# 443 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline const struct device *
device_from_handle(device_handle_t dev_handle)
{
 extern struct device _device_list_start[];
 const struct device *dev = 
# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
                           ((void *)0)
# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
                               ;
 size_t numdev;

 do { extern struct device _device_list_start[]; extern struct device _device_list_end[]; *(&numdev) = ((uintptr_t)_device_list_end - (uintptr_t)_device_list_start) / sizeof(struct device); } while (0);;

 if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
  dev = &_device_list_start[dev_handle - 1];
 }

 return dev;
}
# 698 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline const struct device *device_get_binding(const char *name);
# 708 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
size_t z_device_get_all_static(const struct device **devices);
# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"

# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
_Bool 
# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
    z_device_is_ready(const struct device *dev);
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline 
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
         _Bool 
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
              device_is_ready(const struct device *dev);

static inline 
# 744 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
             _Bool 
# 744 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
                  z_impl_device_is_ready(const struct device *dev)
{
 return z_device_is_ready(dev);
}
# 1022 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
extern const struct device __device_dts_ord_0; extern const struct device __device_dts_ord_2; extern const struct device __device_dts_ord_1; extern const struct device __device_dts_ord_14; extern const struct device __device_dts_ord_20; extern const struct device __device_dts_ord_96; extern const struct device __device_dts_ord_125; extern const struct device __device_dts_ord_101; extern const struct device __device_dts_ord_86; extern const struct device __device_dts_ord_134; extern const struct device __device_dts_ord_135; extern const struct device __device_dts_ord_136; extern const struct device __device_dts_ord_140; extern const struct device __device_dts_ord_21; extern const struct device __device_dts_ord_22; extern const struct device __device_dts_ord_27; extern const struct device __device_dts_ord_103; extern const struct device __device_dts_ord_97; extern const struct device __device_dts_ord_29; extern const struct device __device_dts_ord_117; extern const struct device __device_dts_ord_111; extern const struct device __device_dts_ord_89; extern const struct device __device_dts_ord_85; extern const struct device __device_dts_ord_126; extern const struct device __device_dts_ord_90; extern const struct device __device_dts_ord_91; extern const struct device __device_dts_ord_92; extern const struct device __device_dts_ord_93; extern const struct device __device_dts_ord_94; extern const struct device __device_dts_ord_95; extern const struct device __device_dts_ord_84; extern const struct device __device_dts_ord_127; extern const struct device __device_dts_ord_128; extern const struct device __device_dts_ord_129; extern const struct device __device_dts_ord_130; extern const struct device __device_dts_ord_131; extern const struct device __device_dts_ord_132; extern const struct device __device_dts_ord_133; extern const struct device __device_dts_ord_105; extern const struct device __device_dts_ord_102; extern const struct device __device_dts_ord_36; extern const struct device __device_dts_ord_37; extern const struct device __device_dts_ord_142; extern const struct device __device_dts_ord_143; extern const struct device __device_dts_ord_137; extern const struct device __device_dts_ord_138; extern const struct device __device_dts_ord_139; extern const struct device __device_dts_ord_15; extern const struct device __device_dts_ord_19; extern const struct device __device_dts_ord_16; extern const struct device __device_dts_ord_79; extern const struct device __device_dts_ord_80; extern const struct device __device_dts_ord_81; extern const struct device __device_dts_ord_82; extern const struct device __device_dts_ord_83; extern const struct device __device_dts_ord_66; extern const struct device __device_dts_ord_67; extern const struct device __device_dts_ord_68; extern const struct device __device_dts_ord_69; extern const struct device __device_dts_ord_34; extern const struct device __device_dts_ord_77; extern const struct device __device_dts_ord_35; extern const struct device __device_dts_ord_78; extern const struct device __device_dts_ord_70; extern const struct device __device_dts_ord_71; extern const struct device __device_dts_ord_72; extern const struct device __device_dts_ord_73; extern const struct device __device_dts_ord_74; extern const struct device __device_dts_ord_17; extern const struct device __device_dts_ord_75; extern const struct device __device_dts_ord_18; extern const struct device __device_dts_ord_76; extern const struct device __device_dts_ord_4; extern const struct device __device_dts_ord_56; extern const struct device __device_dts_ord_57; extern const struct device __device_dts_ord_58; extern const struct device __device_dts_ord_3; extern const struct device __device_dts_ord_62; extern const struct device __device_dts_ord_63; extern const struct device __device_dts_ord_64; extern const struct device __device_dts_ord_65; extern const struct device __device_dts_ord_30; extern const struct device __device_dts_ord_32; extern const struct device __device_dts_ord_12; extern const struct device __device_dts_ord_24; extern const struct device __device_dts_ord_13; extern const struct device __device_dts_ord_23; extern const struct device __device_dts_ord_28; extern const struct device __device_dts_ord_33; extern const struct device __device_dts_ord_38; extern const struct device __device_dts_ord_39; extern const struct device __device_dts_ord_5; extern const struct device __device_dts_ord_60; extern const struct device __device_dts_ord_31; extern const struct device __device_dts_ord_52; extern const struct device __device_dts_ord_55; extern const struct device __device_dts_ord_40; extern const struct device __device_dts_ord_53; extern const struct device __device_dts_ord_41; extern const struct device __device_dts_ord_49; extern const struct device __device_dts_ord_47; extern const struct device __device_dts_ord_48; extern const struct device __device_dts_ord_50; extern const struct device __device_dts_ord_51; extern const struct device __device_dts_ord_46; extern const struct device __device_dts_ord_42; extern const struct device __device_dts_ord_43; extern const struct device __device_dts_ord_44; extern const struct device __device_dts_ord_45; extern const struct device __device_dts_ord_54; extern const struct device __device_dts_ord_6; extern const struct device __device_dts_ord_8; extern const struct device __device_dts_ord_10; extern const struct device __device_dts_ord_7; extern const struct device __device_dts_ord_9; extern const struct device __device_dts_ord_11; extern const struct device __device_dts_ord_59; extern const struct device __device_dts_ord_61;
# 1031 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
extern const struct device * z_impl_device_get_binding(const char * name);


static inline const struct device * device_get_binding(const char * name)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 34 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 34 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_get_binding(name);
}
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
extern 
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
           z_impl_device_is_ready(const struct device * dev);


static inline 
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
             _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
                  device_is_ready(const struct device * dev)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 57 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 57 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_is_ready(dev);
}
# 1032 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/dt-bindings/spi/spi.h" 1
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 1 3 4
# 38 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 3 4

# 38 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 3 4
typedef int error_t;



# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 3 4
extern const char * const _sys_errlist[];
extern int _sys_nerr;
# 62 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 3 4
extern __thread int errno;
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 2 3 4
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h" 2
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 2








# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
struct _snode {
 struct _snode *next;
};



typedef struct _snode sys_snode_t;


struct _slist {
 sys_snode_t *head;
 sys_snode_t *tail;
};



typedef struct _slist sys_slist_t;
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_init(sys_slist_t *list)
{
 list->head = 
# 201 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             ((void *)0)
# 201 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                 ;
 list->tail = 
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             ((void *)0)
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                 ;
}







static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
 return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
 parent->next = child;
}

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
 list->head = node;
}

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
 list->tail = node;
}
# 238 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
 return list->head;
}
# 250 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
 return list->tail;
}
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline 
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             _Bool 
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                  sys_slist_is_empty(sys_slist_t *list);

static inline 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
_Bool 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
sys_slist_is_empty(sys_slist_t *list) { return (sys_slist_peek_head(list) == 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); }
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next_no_check(sys_snode_t *node) { return z_snode_next_peek(node); }
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next(sys_snode_t *node) { return node != 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
? sys_slist_peek_next_no_check(node) : 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; }
# 302 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_prepend(sys_slist_t *list,
         sys_snode_t *node);

static inline void sys_slist_prepend(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, sys_slist_peek_head(list)); z_slist_head_set(list, node); if (sys_slist_peek_tail(list) == 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_tail_set(list, sys_slist_peek_head(list)); } }
# 315 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_append(sys_slist_t *list,
        sys_snode_t *node);

static inline void sys_slist_append(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, 
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); if (sys_slist_peek_tail(list) == 
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_tail_set(list, node); z_slist_head_set(list, node); } else { z_snode_next_set( sys_slist_peek_tail(list), node); z_slist_tail_set(list, node); } }
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_append_list(sys_slist_t *list,
      void *head, void *tail);

static inline void sys_slist_append_list(sys_slist_t *list, void *head, void *tail) { if (head != 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
&& tail != 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { if (sys_slist_peek_tail(list) == 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_head_set(list, (sys_snode_t *)head); } else { z_snode_next_set( sys_slist_peek_tail(list), (sys_snode_t *)head); } z_slist_tail_set(list, (sys_snode_t *)tail); } }
# 347 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_merge_slist(sys_slist_t *list,
      sys_slist_t *list_to_append);

static inline void sys_slist_merge_slist ( sys_slist_t *list, sys_slist_t *list_to_append) { sys_snode_t *head, *tail; head = sys_slist_peek_head(list_to_append); tail = sys_slist_peek_tail(list_to_append); sys_slist_append_list(list, head, tail); sys_slist_init(list_to_append); }
# 361 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_insert(sys_slist_t *list,
        sys_snode_t *prev,
        sys_snode_t *node);

static inline void sys_slist_insert(sys_slist_t *list, sys_snode_t *prev, sys_snode_t *node) { if (prev == 
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { sys_slist_prepend(list, node); } else if (z_snode_next_peek(prev) == 
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { sys_slist_append(list, node); } else { z_snode_next_set(node, z_snode_next_peek(prev)); z_snode_next_set(prev, node); } }
# 377 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get_not_empty(sys_slist_t *list) { sys_snode_t *node = sys_slist_peek_head(list); z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } return node; }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get(sys_slist_t *list) { return sys_slist_is_empty(list) ? 
# 392 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 392 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
: sys_slist_get_not_empty(list); }
# 404 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_remove(sys_slist_t *list,
        sys_snode_t *prev_node,
        sys_snode_t *node);

static inline void sys_slist_remove(sys_slist_t *list, sys_snode_t *prev_node, sys_snode_t *node) { if (prev_node == 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } } else { z_snode_next_set(prev_node, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, prev_node); } } z_snode_next_set(node, 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); }
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline 
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             _Bool 
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                  sys_slist_find_and_remove(sys_slist_t *list,
          sys_snode_t *node);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline size_t sys_slist_len(sys_slist_t *list);

static inline size_t sys_slist_len(sys_slist_t * list) { size_t len = 0; static sys_snode_t * node; for (node = sys_slist_peek_head(list); node != 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; node = sys_slist_peek_next(node)) { len++; } return len; }


static inline 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
_Bool 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
sys_slist_find_and_remove(sys_slist_t *list, sys_snode_t *node) { sys_snode_t *prev = 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; sys_snode_t *test; for (test = sys_slist_peek_head(list); test != 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; test = sys_slist_peek_next(test)) { if (test == node) { sys_slist_remove(list, prev, node); return 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
1
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; } prev = test; } return 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
0
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; }
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 2


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/dt-bindings/gpio/gpio.h" 1
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 2
# 231 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
typedef uint32_t gpio_port_pins_t;
# 244 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
typedef uint32_t gpio_port_value_t;







typedef uint8_t gpio_pin_t;
# 264 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
typedef uint16_t gpio_dt_flags_t;







typedef uint32_t gpio_flags_t;
# 286 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
struct gpio_dt_spec {

 const struct device *port;

 gpio_pin_t pin;

 gpio_dt_flags_t dt_flags;
};
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
struct gpio_driver_config {





 gpio_port_pins_t port_pin_mask;
};





struct gpio_driver_data {





 gpio_port_pins_t invert;
};

struct gpio_callback;
# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
typedef void (*gpio_callback_handler_t)(const struct device *port,
     struct gpio_callback *cb,
     gpio_port_pins_t pins);
# 738 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
struct gpio_callback {



 sys_snode_t node;


 gpio_callback_handler_t handler;







 gpio_port_pins_t pin_mask;
};
# 766 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
enum gpio_int_mode {
 GPIO_INT_MODE_DISABLED = (1U << 21),
 GPIO_INT_MODE_LEVEL = (1U << 22),
 GPIO_INT_MODE_EDGE = (1U << 22) | (1U << 24),




};

enum gpio_int_trig {



 GPIO_INT_TRIG_LOW = (1U << 25),


 GPIO_INT_TRIG_HIGH = (1U << 26),

 GPIO_INT_TRIG_BOTH = (1U << 25) | (1U << 26),
};

 struct gpio_driver_api {
 int (*pin_configure)(const struct device *port, gpio_pin_t pin,
        gpio_flags_t flags);




 int (*port_get_raw)(const struct device *port,
       gpio_port_value_t *value);
 int (*port_set_masked_raw)(const struct device *port,
       gpio_port_pins_t mask,
       gpio_port_value_t value);
 int (*port_set_bits_raw)(const struct device *port,
     gpio_port_pins_t pins);
 int (*port_clear_bits_raw)(const struct device *port,
       gpio_port_pins_t pins);
 int (*port_toggle_bits)(const struct device *port,
    gpio_port_pins_t pins);
 int (*pin_interrupt_configure)(const struct device *port,
           gpio_pin_t pin,
           enum gpio_int_mode, enum gpio_int_trig);
 int (*manage_callback)(const struct device *port,
          struct gpio_callback *cb,
          
# 811 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
         _Bool 
# 811 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
              set);
 uint32_t (*get_pending_int)(const struct device *dev);




};
# 831 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline 
# 831 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
             _Bool 
# 831 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                  gpio_is_ready_dt(const struct gpio_dt_spec *spec)
{

 return device_is_ready(spec->port);
}
# 858 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_interrupt_configure(const struct device *port,
        gpio_pin_t pin,
        gpio_flags_t flags);

static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
            gpio_pin_t pin,
            gpio_flags_t flags)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 const struct gpio_driver_data *const data =
  (const struct gpio_driver_data *)port->data;
 enum gpio_int_trig trig;
 enum gpio_int_mode mode;

 if (api->pin_interrupt_configure == 
# 875 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                                    ((void *)0)
# 875 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                        ) {
  return -
# 876 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
         88
# 876 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
               ;
 }

 { }

                                               ;

 { }
                                              ;

 { }




                                    ;

 { }







              ;

 { }
                     ;

 if (((flags & (1U << 23)) != 0) &&
     ((data->invert & (gpio_port_pins_t)(1UL << (pin))) != 0)) {

  flags ^= ((1U << 25) | (1U << 26));
 }

 trig = (enum gpio_int_trig)(flags & ((1U << 25) | (1U << 26)));




 mode = (enum gpio_int_mode)(flags & ((1U << 24) | (1U << 21) | (1U << 22)));


 return api->pin_interrupt_configure(port, pin, mode, trig);
}
# 936 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
        gpio_flags_t flags)
{
 return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
}
# 957 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_configure(const struct device *port,
     gpio_pin_t pin,
     gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
         gpio_pin_t pin,
         gpio_flags_t flags)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 struct gpio_driver_data *data =
  (struct gpio_driver_data *)port->data;

 { }
                                       ;

 { }

                                                                ;

 { }
                                                                                  ;

 { }
                                       ;

 { }

                                                              ;

 { }

                                               ;

 if (((flags & (1U << 20)) != 0)
     && ((flags & ((1U << 18) | (1U << 19))) != 0)
     && ((flags & (1 << 0)) != 0)) {
  flags ^= (1U << 18) | (1U << 19);
 }

 flags &= ~(1U << 20);

 { }
                     ;

 if ((flags & (1 << 0)) != 0) {
  data->invert |= (gpio_port_pins_t)(1UL << (pin));
 } else {
  data->invert &= ~(gpio_port_pins_t)(1UL << (pin));
 }

 return api->pin_configure(port, pin, flags);
}
# 1024 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
     gpio_flags_t extra_flags)
{
 return gpio_pin_configure(spec->port,
      spec->pin,
      spec->dt_flags | extra_flags);
}
# 1050 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_get_direction(const struct device *port, gpio_port_pins_t map,
          gpio_port_pins_t *inputs, gpio_port_pins_t *outputs);
# 1080 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_is_input(const struct device *port, gpio_pin_t pin)
{
 int rv;
 gpio_port_pins_t pins;
 __attribute__((__unused__)) const struct gpio_driver_config *cfg =
  (const struct gpio_driver_config *)port->config;

 { };

 rv = gpio_port_get_direction(port, (1UL << (pin)), &pins, 
# 1089 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                                                    ((void *)0)
# 1089 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                                        );
 if (rv < 0) {
  return rv;
 }

 return (int)!!((gpio_port_pins_t)(1UL << (pin)) & pins);
}
# 1108 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_is_input_dt(const struct gpio_dt_spec *spec)
{
 return gpio_pin_is_input(spec->port, spec->pin);
}
# 1125 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_is_output(const struct device *port, gpio_pin_t pin)
{
 int rv;
 gpio_port_pins_t pins;
 __attribute__((__unused__)) const struct gpio_driver_config *cfg =
  (const struct gpio_driver_config *)port->config;

 { };

 rv = gpio_port_get_direction(port, (1UL << (pin)), 
# 1134 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                                             ((void *)0)
# 1134 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                                 , &pins);
 if (rv < 0) {
  return rv;
 }

 return (int)!!((gpio_port_pins_t)(1UL << (pin)) & pins);
}
# 1153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_is_output_dt(const struct gpio_dt_spec *spec)
{
 return gpio_pin_is_output(spec->port, spec->pin);
}
# 1173 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_get_config(const struct device *port, gpio_pin_t pin,
      gpio_flags_t *flags);
# 1203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_get_config_dt(const struct gpio_dt_spec *spec,
     gpio_flags_t *flags)
{
 return gpio_pin_get_config(spec->port, spec->pin, flags);
}
# 1226 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_get_raw(const struct device *port,
    gpio_port_value_t *value);

static inline int z_impl_gpio_port_get_raw(const struct device *port,
        gpio_port_value_t *value)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 return api->port_get_raw(port, value);
}
# 1256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_get(const struct device *port,
    gpio_port_value_t *value)
{
 const struct gpio_driver_data *const data =
   (const struct gpio_driver_data *)port->data;
 int ret;

 ret = gpio_port_get_raw(port, value);
 if (ret == 0) {
  *value ^= data->invert;
 }

 return ret;
}
# 1288 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_masked_raw(const struct device *port,
           gpio_port_pins_t mask,
           gpio_port_value_t value);

static inline int z_impl_gpio_port_set_masked_raw(const struct device *port,
        gpio_port_pins_t mask,
        gpio_port_value_t value)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 return api->port_set_masked_raw(port, mask, value);
}
# 1322 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_masked(const struct device *port,
           gpio_port_pins_t mask,
           gpio_port_value_t value)
{
 const struct gpio_driver_data *const data =
   (const struct gpio_driver_data *)port->data;

 value ^= data->invert;

 return gpio_port_set_masked_raw(port, mask, value);
}
# 1344 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_bits_raw(const struct device *port,
         gpio_port_pins_t pins);

static inline int z_impl_gpio_port_set_bits_raw(const struct device *port,
      gpio_port_pins_t pins)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 return api->port_set_bits_raw(port, pins);
}
# 1366 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_bits(const struct device *port,
         gpio_port_pins_t pins)
{
 return gpio_port_set_masked(port, pins, pins);
}
# 1382 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_clear_bits_raw(const struct device *port,
           gpio_port_pins_t pins);

static inline int z_impl_gpio_port_clear_bits_raw(const struct device *port,
        gpio_port_pins_t pins)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 return api->port_clear_bits_raw(port, pins);
}
# 1404 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_clear_bits(const struct device *port,
           gpio_port_pins_t pins)
{
 return gpio_port_set_masked(port, pins, 0);
}
# 1420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_toggle_bits(const struct device *port,
        gpio_port_pins_t pins);

static inline int z_impl_gpio_port_toggle_bits(const struct device *port,
            gpio_port_pins_t pins)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 return api->port_toggle_bits(port, pins);
}
# 1443 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_clr_bits_raw(const struct device *port,
          gpio_port_pins_t set_pins,
          gpio_port_pins_t clear_pins)
{
 { };

 return gpio_port_set_masked_raw(port, set_pins | clear_pins, set_pins);
}
# 1463 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_port_set_clr_bits(const struct device *port,
      gpio_port_pins_t set_pins,
      gpio_port_pins_t clear_pins)
{
 { };

 return gpio_port_set_masked(port, set_pins | clear_pins, set_pins);
}
# 1487 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_get_raw(const struct device *port, gpio_pin_t pin)
{
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 gpio_port_value_t value;
 int ret;

 { }
                     ;

 ret = gpio_port_get_raw(port, &value);
 if (ret == 0) {
  ret = (value & (gpio_port_pins_t)(1UL << (pin))) != 0 ? 1 : 0;
 }

 return ret;
}
# 1524 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
{
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 gpio_port_value_t value;
 int ret;

 { }
                     ;

 ret = gpio_port_get(port, &value);
 if (ret == 0) {
  ret = (value & (gpio_port_pins_t)(1UL << (pin))) != 0 ? 1 : 0;
 }

 return ret;
}
# 1552 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
 return gpio_pin_get(spec->port, spec->pin);
}
# 1572 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
       int value)
{
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 int ret;

 { }
                     ;

 if (value != 0) {
  ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)(1UL << (pin)));
 } else {
  ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)(1UL << (pin)));
 }

 return ret;
}
# 1612 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
          int value)
{
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;
 const struct gpio_driver_data *const data =
   (const struct gpio_driver_data *)port->data;

 { }
                     ;

 if (data->invert & (gpio_port_pins_t)(1UL << (pin))) {
  value = (value != 0) ? 0 : 1;
 }

 return gpio_pin_set_raw(port, pin, value);
}
# 1641 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
 return gpio_pin_set(spec->port, spec->pin, value);
}
# 1656 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_toggle(const struct device *port, gpio_pin_t pin)
{
 __attribute__((__unused__)) const struct gpio_driver_config *const cfg =
  (const struct gpio_driver_config *)port->config;

 { }
                     ;

 return gpio_port_toggle_bits(port, (gpio_port_pins_t)(1UL << (pin)));
}
# 1677 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
 return gpio_pin_toggle(spec->port, spec->pin);
}







static inline void gpio_init_callback(struct gpio_callback *callback,
          gpio_callback_handler_t handler,
          gpio_port_pins_t pin_mask)
{
 { };
 { };

 callback->handler = handler;
 callback->pin_mask = pin_mask;
}
# 1713 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_add_callback(const struct device *port,
        struct gpio_callback *callback)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 if (api->manage_callback == 
# 1719 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                            ((void *)0)
# 1719 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                ) {
  return -
# 1720 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
         88
# 1720 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
               ;
 }

 return api->manage_callback(port, callback, 
# 1723 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                                            1
# 1723 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                                );
}
# 1737 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_add_callback_dt(const struct gpio_dt_spec *spec,
           struct gpio_callback *callback)
{
 return gpio_add_callback(spec->port, callback);
}
# 1761 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_remove_callback(const struct device *port,
           struct gpio_callback *callback)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)port->api;

 if (api->manage_callback == 
# 1767 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                            ((void *)0)
# 1767 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                ) {
  return -
# 1768 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
         88
# 1768 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
               ;
 }

 return api->manage_callback(port, callback, 
# 1771 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                                            0
# 1771 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                                 );
}
# 1785 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_remove_callback_dt(const struct gpio_dt_spec *spec,
       struct gpio_callback *callback)
{
 return gpio_remove_callback(spec->port, callback);
}
# 1805 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
static inline int gpio_get_pending_int(const struct device *dev);

static inline int z_impl_gpio_get_pending_int(const struct device *dev)
{
 const struct gpio_driver_api *api =
  (const struct gpio_driver_api *)dev->api;

 if (api->get_pending_int == 
# 1812 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
                            ((void *)0)
# 1812 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
                                ) {
  return -
# 1813 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 3 4
         88
# 1813 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
               ;
 }

 return api->get_pending_int(dev);
}
# 1827 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);


static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
# 48 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);


static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
# 61 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 61 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 61 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_pin_configure(port, pin, flags);
}
# 73 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_get_direction(const struct device * port, gpio_port_pins_t map, gpio_port_pins_t * inputs, gpio_port_pins_t * outputs);


static inline int gpio_port_get_direction(const struct device * port, gpio_port_pins_t map, gpio_port_pins_t * inputs, gpio_port_pins_t * outputs)
{
# 87 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 87 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 87 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_get_direction(port, map, inputs, outputs);
}
# 99 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_pin_get_config(const struct device * port, gpio_pin_t pin, gpio_flags_t * flags);


static inline int gpio_pin_get_config(const struct device * port, gpio_pin_t pin, gpio_flags_t * flags)
{
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_pin_get_config(port, pin, flags);
}
# 124 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_get_raw(const struct device * port, gpio_port_value_t * value);


static inline int gpio_port_get_raw(const struct device * port, gpio_port_value_t * value)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 136 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_get_raw(port, value);
}
# 148 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_set_masked_raw(const struct device * port, gpio_port_pins_t mask, gpio_port_value_t value);


static inline int gpio_port_set_masked_raw(const struct device * port, gpio_port_pins_t mask, gpio_port_value_t value)
{
# 161 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 161 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 161 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_set_masked_raw(port, mask, value);
}
# 173 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_set_bits_raw(const struct device * port, gpio_port_pins_t pins);


static inline int gpio_port_set_bits_raw(const struct device * port, gpio_port_pins_t pins)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 185 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 185 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_set_bits_raw(port, pins);
}
# 197 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_clear_bits_raw(const struct device * port, gpio_port_pins_t pins);


static inline int gpio_port_clear_bits_raw(const struct device * port, gpio_port_pins_t pins)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 209 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 209 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_clear_bits_raw(port, pins);
}
# 221 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_port_toggle_bits(const struct device * port, gpio_port_pins_t pins);


static inline int gpio_port_toggle_bits(const struct device * port, gpio_port_pins_t pins)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 233 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 233 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_port_toggle_bits(port, pins);
}
# 245 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
extern int z_impl_gpio_get_pending_int(const struct device * dev);


static inline int gpio_get_pending_int(const struct device * dev)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/gpio.h"
);
 return z_impl_gpio_get_pending_int(dev);
}
# 1828 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/gpio.h" 2
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 1 3 4




# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 6 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 1 3 4
# 47 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 48 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 2 3 4
# 7 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/syslimits.h" 1 3 4
# 8 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 138 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include-fixed/limits.h" 1 3 4
# 139 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 2
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
typedef long atomic_t;
typedef atomic_t atomic_val_t;
typedef void *atomic_ptr_t;
typedef atomic_ptr_t atomic_ptr_val_t;
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 1
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline 
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
             _Bool 
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                  atomic_cas(atomic_t *target, atomic_val_t old_value,
     atomic_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline 
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
             _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                  atomic_ptr_cas(atomic_ptr_t *target, atomic_ptr_val_t old_value,
      atomic_ptr_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_add(target, value, 5);
}
# 105 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_sub(target, value, 5);
}
# 123 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_inc(atomic_t *target)
{
 return atomic_add(target, 1);
}
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_dec(atomic_t *target)
{
 return atomic_sub(target, 1);
}
# 159 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_get(const atomic_t *target)
{
 return __atomic_load_n(target, 5);
}
# 177 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_get(const atomic_ptr_t *target)
{
 return __atomic_load_n(target, 5);
}
# 197 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{




 return __atomic_exchange_n(target, value, 5);
}
# 221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
 return __atomic_exchange_n(target, value, 5);
}
# 240 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_clear(atomic_t *target)
{
 return atomic_set(target, 0);
}
# 259 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_clear(atomic_ptr_t *target)
{
 return atomic_ptr_set(target, 
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
                              ((void *)0)
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                                  );
}
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_or(target, value, 5);
}
# 299 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_xor(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_xor(target, value, 5);
}
# 319 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_and(target, value, 5);
}
# 339 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_nand(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_nand(target, value, 5);
}
# 44 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 2
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_bit(const atomic_t *target, int bit)
{
 atomic_val_t val = atomic_get(((target) + ((bit) / (sizeof(atomic_val_t) * 8))));

 return (1 & (val >> (bit & ((sizeof(atomic_val_t) * 8) - 1)))) != 0;
}
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_and_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);

 return (old & mask) != 0;
}
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_and_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);

 return (old & mask) != 0;
}
# 198 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
}
# 217 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
}
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_set_bit_to(atomic_t *target, int bit, 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
                                                               _Bool 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                                                                    val)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 if (val) {
  (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
 } else {
  (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
 }
}
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 1
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 2
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
struct _dnode {
 union {
  struct _dnode *head;
  struct _dnode *next;
 };
 union {
  struct _dnode *tail;
  struct _dnode *prev;
 };
};




typedef struct _dnode sys_dlist_t;



typedef struct _dnode sys_dnode_t;
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_init(sys_dlist_t *list)
{
 list->head = (sys_dnode_t *)list;
 list->tail = (sys_dnode_t *)list;
}
# 220 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dnode_init(sys_dnode_t *node)
{
 node->next = 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                 ;
 node->prev = 
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             ((void *)0)
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                 ;
}
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dnode_is_linked(const sys_dnode_t *node)
{
 return node->next != 
# 236 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                     ((void *)0)
# 236 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                         ;
}
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_head(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->head == node;
}
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->tail == node;
}
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_empty(sys_dlist_t *list)
{
 return list->head == list;
}
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
 return list->head != list->tail;
}
# 303 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                  ((void *)0) 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                       : list->head;
}
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
 return list->head;
}
# 334 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->tail) ? 
# 337 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                              ((void *)0) 
# 337 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                   : node->next;
}
# 350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) ? sys_dlist_peek_next_no_check(list, node) : 
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                                                       ;
}
# 368 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->head) ? 
# 371 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                              ((void *)0) 
# 371 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                   : node->prev;
}
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) ? sys_dlist_peek_prev_no_check(list, node) : 
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                                                       ;
}
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_tail(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 401 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                  ((void *)0) 
# 401 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                       : list->tail;
}
# 413 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const tail = list->tail;

 node->next = list;
 node->prev = tail;

 tail->next = node;
 list->tail = node;
}
# 433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const head = list->head;

 node->next = head;
 node->prev = list;

 head->prev = node;
 list->head = node;
}
# 452 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
 sys_dnode_t *const prev = successor->prev;

 node->prev = prev;
 node->next = successor;
 prev->next = node;
 successor->prev = node;
}
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
 int (*cond)(sys_dnode_t *node, void *data), void *data)
{
 if (sys_dlist_is_empty(list)) {
  sys_dlist_append(list, node);
 } else {
  sys_dnode_t *pos = sys_dlist_peek_head(list);

  while ((pos != 
# 485 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 485 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) && (cond(pos, data) == 0)) {
   pos = sys_dlist_peek_next(list, pos);
  }
  if (pos != 
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
            ((void *)0)
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                ) {
   sys_dlist_insert(pos, node);
  } else {
   sys_dlist_append(list, node);
  }
 }
}
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_remove(sys_dnode_t *node)
{
 sys_dnode_t *const prev = node->prev;
 sys_dnode_t *const next = node->next;

 prev->next = next;
 next->prev = prev;
 sys_dnode_init(node);
}
# 525 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
 sys_dnode_t *node = 
# 527 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                    ((void *)0)
# 527 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                        ;

 if (!sys_dlist_is_empty(list)) {
  node = list->head;
  sys_dlist_remove(node);
 }

 return node;
}
# 544 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline size_t sys_dlist_len(sys_dlist_t *list)
{
 size_t len = 0;
 sys_dnode_t *node = 
# 547 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                    ((void *)0)
# 547 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                        ;

 for (node = sys_dlist_peek_head(list); node != 
# 549 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
((void *)0)
# 549 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
; node = sys_dlist_peek_next(list, node)) {
  len++;
 }
 return len;
}
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 1
# 58 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
struct rbnode {

 struct rbnode *children[2];

};
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
typedef 
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 3 4
       _Bool 
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
            (*rb_lessthan_t)(struct rbnode *a, struct rbnode *b);




struct rbtree {

 struct rbnode *root;

 rb_lessthan_t lessthan_fn;

 int max_depth;





};






typedef void (*rb_visit_t)(struct rbnode *node, void *cookie);

struct rbnode *z_rb_child(struct rbnode *node, uint8_t side);
int z_rb_is_black(struct rbnode *node);

void z_rb_walk(struct rbnode *node, rb_visit_t visit_fn, void *cookie);

struct rbnode *z_rb_get_minmax(struct rbtree *tree, uint8_t side);




void rb_insert(struct rbtree *tree, struct rbnode *node);




void rb_remove(struct rbtree *tree, struct rbnode *node);




static inline struct rbnode *rb_get_min(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 0U);
}




static inline struct rbnode *rb_get_max(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 1U);
}
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"

# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 3 4
_Bool 
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
    rb_contains(struct rbtree *tree, struct rbnode *node);
# 165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
static inline void rb_walk(struct rbtree *tree, rb_visit_t visit_fn,
      void *cookie)
{
 z_rb_walk(tree->root, visit_fn, cookie);
}


struct _rb_foreach {
 struct rbnode **stack;
 uint8_t *is_left;
 int32_t top;
};
# 193 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
struct rbnode *z_rb_foreach_next(struct rbtree *tree, struct _rb_foreach *f);
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 2
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
struct k_thread;

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq);
void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread);

struct _priq_rb {
 struct rbtree tree;
 int next_order_key;
};

void z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread);
void z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread);
struct k_thread *z_priq_rb_best(struct _priq_rb *pq);
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
struct _priq_mq {
 sys_dlist_t queues[32];
 unsigned int bitmask;
};

struct k_thread *z_priq_mq_best(struct _priq_mq *pq);
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 1
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 2
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
typedef uint32_t unative_t;



struct _sfnode {
 unative_t next_and_flags;
};



typedef struct _sfnode sys_sfnode_t;


struct _sflist {
 sys_sfnode_t *head;
 sys_sfnode_t *tail;
};



typedef struct _sflist sys_sflist_t;
# 210 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_init(sys_sflist_t *list)
{
 list->head = 
# 212 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
             ((void *)0)
# 212 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
                 ;
 list->tail = 
# 213 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
             ((void *)0)
# 213 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
                 ;
}
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *z_sfnode_next_peek(sys_sfnode_t *node)
{
 return (sys_sfnode_t *)(node->next_and_flags & ~0x3UL);
}

static inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node);

static inline void z_sfnode_next_set(sys_sfnode_t *parent,
           sys_sfnode_t *child)
{
 uint8_t cur_flags = sys_sfnode_flags_get(parent);

 parent->next_and_flags = cur_flags | (unative_t)child;
}

static inline void z_sflist_head_set(sys_sflist_t *list, sys_sfnode_t *node)
{
 list->head = node;
}

static inline void z_sflist_tail_set(sys_sflist_t *list, sys_sfnode_t *node)
{
 list->tail = node;
}
# 255 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
 return list->head;
}
# 267 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
 return list->tail;
}
# 282 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node)
{
 return node->next_and_flags & 0x3UL;
}
# 300 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
 { };
 node->next_and_flags = flags;
}
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sfnode_flags_set(sys_sfnode_t *node, uint8_t flags)
{
 { };
 node->next_and_flags = (unative_t)(z_sfnode_next_peek(node)) | flags;
}
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline 
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
             _Bool 
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
                  sys_sflist_is_empty(sys_sflist_t *list);

static inline 
# 335 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
_Bool 
# 335 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
sys_sflist_is_empty(sys_sflist_t *list) { return (sys_sflist_peek_head(list) == 
# 335 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 335 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
); }
# 346 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_next_no_check(sys_sfnode_t *node);

static inline sys_sfnode_t * sys_sflist_peek_next_no_check(sys_sfnode_t *node) { return z_sfnode_next_peek(node); }
# 357 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_next(sys_sfnode_t *node);

static inline sys_sfnode_t * sys_sflist_peek_next(sys_sfnode_t *node) { return node != 
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0) 
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
? sys_sflist_peek_next_no_check(node) : 
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; }
# 369 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_prepend(sys_sflist_t *list,
          sys_sfnode_t *node);

static inline void sys_sflist_prepend(sys_sflist_t *list, sys_sfnode_t *node) { z_sfnode_next_set(node, sys_sflist_peek_head(list)); z_sflist_head_set(list, node); if (sys_sflist_peek_tail(list) == 
# 372 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 372 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } }
# 382 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_append(sys_sflist_t *list,
         sys_sfnode_t *node);

static inline void sys_sflist_append(sys_sflist_t *list, sys_sfnode_t *node) { z_sfnode_next_set(node, 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
); if (sys_sflist_peek_tail(list) == 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { z_sflist_tail_set(list, node); z_sflist_head_set(list, node); } else { z_sfnode_next_set( sys_sflist_peek_tail(list), node); z_sflist_tail_set(list, node); } }
# 400 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_append_list(sys_sflist_t *list,
       void *head, void *tail);

static inline void sys_sflist_append_list(sys_sflist_t *list, void *head, void *tail) { if (head != 
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0) 
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
&& tail != 
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { if (sys_sflist_peek_tail(list) == 
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { z_sflist_head_set(list, (sys_sfnode_t *)head); } else { z_sfnode_next_set( sys_sflist_peek_tail(list), (sys_sfnode_t *)head); } z_sflist_tail_set(list, (sys_sfnode_t *)tail); } }
# 414 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_merge_sflist(sys_sflist_t *list,
        sys_sflist_t *list_to_append);

static inline void sys_sflist_merge_sflist ( sys_sflist_t *list, sys_sflist_t *list_to_append) { sys_sfnode_t *head, *tail; head = sys_sflist_peek_head(list_to_append); tail = sys_sflist_peek_tail(list_to_append); sys_sflist_append_list(list, head, tail); sys_sflist_init(list_to_append); }
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_insert(sys_sflist_t *list,
         sys_sfnode_t *prev,
         sys_sfnode_t *node);

static inline void sys_sflist_insert(sys_sflist_t *list, sys_sfnode_t *prev, sys_sfnode_t *node) { if (prev == 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { sys_sflist_prepend(list, node); } else if (z_sfnode_next_peek(prev) == 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { sys_sflist_append(list, node); } else { z_sfnode_next_set(node, z_sfnode_next_peek(prev)); z_sfnode_next_set(prev, node); } }
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

static inline sys_sfnode_t * sys_sflist_get_not_empty(sys_sflist_t *list) { sys_sfnode_t *node = sys_sflist_peek_head(list); z_sflist_head_set(list, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } return node; }
# 457 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

static inline sys_sfnode_t * sys_sflist_get(sys_sflist_t *list) { return sys_sflist_is_empty(list) ? 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0) 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
: sys_sflist_get_not_empty(list); }
# 471 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline void sys_sflist_remove(sys_sflist_t *list,
         sys_sfnode_t *prev_node,
         sys_sfnode_t *node);

static inline void sys_sflist_remove(sys_sflist_t *list, sys_sfnode_t *prev_node, sys_sfnode_t *node) { if (prev_node == 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
) { z_sflist_head_set(list, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } } else { z_sfnode_next_set(prev_node, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, prev_node); } } z_sfnode_next_set(node, 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
); }
# 487 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline 
# 487 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
             _Bool 
# 487 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
                  sys_sflist_find_and_remove(sys_sflist_t *list,
           sys_sfnode_t *node);

static inline 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
_Bool 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
sys_sflist_find_and_remove(sys_sflist_t *list, sys_sfnode_t *node) { sys_sfnode_t *prev = 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; sys_sfnode_t *test; for (test = sys_sflist_peek_head(list); test != 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; test = sys_sflist_peek_next(test)) { if (test == node) { sys_sflist_remove(list, prev, node); return 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
1
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; } prev = test; } return 
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
0
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; }
# 499 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
static inline size_t sys_sflist_len(sys_sflist_t *list);

static inline size_t sys_sflist_len(sys_sflist_t * list) { size_t len = 0; static sys_sfnode_t * node; for (node = sys_sflist_peek_head(list); node != 
# 501 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h" 3 4
((void *)0)
# 501 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sflist.h"
; node = sys_sflist_peek_next(node)) { len++; } return len; }
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h" 1
# 63 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type;
struct k_obj_core;
# 89 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
extern sys_slist_t z_obj_type_list;


struct k_obj_core_stats_desc {
 size_t raw_size;
 size_t query_size;


 int (*raw)(struct k_obj_core *obj_core, void *stats);

 int (*query)(struct k_obj_core *obj_core, void *stats);

 int (*reset)(struct k_obj_core *obj_core);

 int (*disable)(struct k_obj_core *obj_core);

 int (*enable)(struct k_obj_core *obj_core);
};


struct k_obj_type {
 sys_snode_t node;
 sys_slist_t list;
 uint32_t id;
 size_t obj_core_offset;




};


struct k_obj_core {
 sys_snode_t node;
 struct k_obj_type *type;



};
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type *z_obj_type_init(struct k_obj_type *type,
       uint32_t id, size_t off);
# 155 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type *k_obj_type_find(uint32_t type_id);
# 174 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_type_walk_locked(struct k_obj_type *type,
      int (*func)(struct k_obj_core *, void *),
      void *data);
# 196 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_type_walk_unlocked(struct k_obj_type *type,
        int (*func)(struct k_obj_core *, void *),
        void *data);
# 209 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_init(struct k_obj_core *obj_core, struct k_obj_type *type);
# 221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_link(struct k_obj_core *obj_core);
# 232 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_init_and_link(struct k_obj_core *obj_core,
         struct k_obj_type *type);
# 244 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_unlink(struct k_obj_core *obj_core);
# 299 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_register(struct k_obj_core *obj_core, void *stats,
         size_t stats_len);
# 314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_deregister(struct k_obj_core *obj_core);
# 331 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_raw(struct k_obj_core *obj_core, void *stats,
    size_t stats_len);
# 350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_query(struct k_obj_core *obj_core, void *stats,
      size_t stats_len);
# 364 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_reset(struct k_obj_core *obj_core);
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_disable(struct k_obj_core *obj_core);
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_enable(struct k_obj_core *obj_core);
# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 1
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h" 2



struct sys_memory_stats {
 size_t free_bytes;
 size_t allocated_bytes;
 size_t max_allocated_bytes;
};
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 2
# 56 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
struct sys_heap {
 struct z_heap *heap;
 void *init_mem;
 size_t init_bytes;
};

struct z_heap_stress_result {
 uint32_t total_allocs;
 uint32_t successful_allocs;
 uint32_t total_frees;
 uint64_t accumulated_in_use_bytes;
};
# 102 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes);
# 121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_alloc(struct sys_heap *heap, size_t bytes);
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes);
# 151 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_free(struct sys_heap *heap, void *mem);
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_aligned_realloc(struct sys_heap *heap, void *ptr,
          size_t align, size_t bytes);
# 196 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
size_t sys_heap_usable_size(struct sys_heap *heap, void *mem);
# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"

# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 3 4
_Bool 
# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
    sys_heap_validate(struct sys_heap *heap);
# 242 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_stress(void *(*alloc_fn)(void *arg, size_t bytes),
       void (*free_fn)(void *arg, void *p),
       void *arg, size_t total_bytes,
       uint32_t op_count,
       void *scratch_mem, size_t scratch_bytes,
       int target_percent,
       struct z_heap_stress_result *result);
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_print_info(struct sys_heap *heap, 
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 3 4
                                               _Bool 
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
                                                    dump_chunks);
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/structs.h" 1
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/structs.h"
struct _cpu_arch {






};




typedef struct _cpu_arch _cpu_arch_t;
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
struct k_cycle_stats {
 uint64_t total;
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
 
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h" 3 4
_Bool 
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
          track_usage;
};
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 84 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
struct _ready_q {


 struct k_thread *cache;



 sys_dlist_t runq;





};

typedef struct _ready_q _ready_q_t;

struct _cpu {

 uint32_t nested;


 char *irq_stack;


 struct k_thread *current;


 struct k_thread *idle_thread;
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 uint8_t id;


 void *fp_ctx;
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct _cpu_arch arch;
};

typedef struct _cpu _cpu_t;

struct z_kernel {
 struct _cpu cpus[1];
# 171 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct _ready_q ready_q;
# 185 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct k_thread *current_fp;
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
};

typedef struct z_kernel _kernel_t;

extern struct z_kernel _kernel;

extern atomic_t _cpus_active;
# 241 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
typedef struct {
 sys_dlist_t waitq;
} _wait_q_t;







struct _timeout;
typedef void (*_timeout_func_t)(struct _timeout *t);

struct _timeout {
 sys_dnode_t node;
 _timeout_func_t fn;


 int64_t dticks;



};

typedef void (*k_thread_timeslice_fn_t)(struct k_thread *thread, void *data);
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_version.h" 1
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_version.h"
extern uint32_t sys_kernel_version_get(void);
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h" 2
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h"
extern __attribute__((format (printf, 1, 2))) void printk(const char *fmt, ...);
extern __attribute__((format (printf, 1, 0))) void vprintk(const char *fmt, va_list ap);
# 65 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 1 3 4
# 48 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 49 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 2 3 4



# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 1 3 4
# 48 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 1 3 4
# 49 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 2 3 4

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_types.h" 1 3 4
# 51 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 2 3 4






# 56 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 3 4
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef __intptr_t register_t;





# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 1 3 4
# 52 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 359 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 2 3 4
# 61 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 62 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 2 3 4




typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;






typedef short __dev_t;







typedef unsigned short __uid_t;






typedef unsigned short __gid_t;




typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 138 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 179 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
typedef unsigned int __size_t;
# 195 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
typedef signed int _ssize_t;
# 206 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_types.h" 3 4
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef long __daddr_t;



typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef __int32_t __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;
# 74 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 2 3 4
# 124 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 3 4
typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;





typedef __int_least64_t time_t;




typedef __daddr_t daddr_t;


typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 3 4
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;




typedef __suseconds_t suseconds_t;



typedef __int64_t sbintime_t;


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/types.h" 1 3 4
# 249 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/types.h" 2 3 4
# 53 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 2 3 4
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
typedef uint16_t __ungetc_t;


struct __file {
 __ungetc_t unget;
 uint8_t flags;
# 95 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
 int (*put)(char, struct __file *);
 int (*get)(struct __file *);
 int (*flush)(struct __file *);
};





struct __file_close {
 struct __file file;
 int (*close)(struct __file *);
};







struct __file_ext {
        struct __file_close cfile;
        __off_t (*seek)(struct __file *, __off_t offset, int whence);
        int (*setvbuf)(struct __file *, char *buf, int mode, size_t size);
};
# 133 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
typedef struct __file __FILE;

typedef __FILE FILE;
# 146 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
extern FILE *const stdin;
extern FILE *const stdout;
extern FILE *const stderr;
# 194 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
FILE *fdevopen(int (*__put)(char, FILE*), int (*__get)(FILE*), int(*__flush)(FILE *));
int fclose(FILE *__stream);
int fflush(FILE *stream);
# 214 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
int fputc(int __c, FILE *__stream);
int putc(int __c, FILE *__stream);
int putchar(int __c);



int printf(const char *__fmt, ...) __attribute__((__format__ (printf, 1, 2)));
int fprintf(FILE *__stream, const char *__fmt, ...) __attribute__((__format__ (printf, 2, 3)));
int vprintf(const char *__fmt, va_list __ap) __attribute__((__format__ (printf, 1, 0)));
int vfprintf(FILE *__stream, const char *__fmt, va_list __ap) __attribute__((__format__ (printf, 2, 0)));
int sprintf(char *__s, const char *__fmt, ...) __attribute__((__format__ (printf, 2, 3)));
int snprintf(char *__s, size_t __n, const char *__fmt, ...) __attribute__((__format__ (printf, 3, 4)));
int vsprintf(char *__s, const char *__fmt, va_list ap) __attribute__((__format__ (printf, 2, 0)));
int vsnprintf(char *__s, size_t __n, const char *__fmt, va_list ap) __attribute__((__format__ (printf, 3, 0)));
int asprintf(char **strp, const char *fmt, ...) __attribute__((__format__ (printf, 2, 3)));
int vasprintf(char **strp, const char *fmt, va_list ap) __attribute__((__format__ (printf, 2, 0)));

int fputs(const char *__str, FILE *__stream);
int puts(const char *__str);
size_t fwrite(const void *__ptr, size_t __size, size_t __nmemb,
         FILE *__stream);

int fgetc(FILE *__stream);
int getc(FILE *__stream);
int getchar(void);


int ungetc(int __c, FILE *__stream);

int scanf(const char *__fmt, ...) __attribute__((__format__ (scanf, 1, 2)));
int fscanf(FILE *__stream, const char *__fmt, ...) __attribute__((__format__ (scanf, 2, 3)));
int vscanf(const char *__fmt, va_list __ap) __attribute__((__format__ (scanf, 1, 0)));
int vfscanf(FILE *__stream, const char *__fmt, va_list __ap) __attribute__((__format__ (scanf, 2, 0)));
int sscanf(const char *__buf, const char *__fmt, ...) __attribute__((__format__ (scanf, 2, 3)));
int vsscanf(const char *__buf, const char *__fmt, va_list ap) __attribute__((__format__ (scanf, 2, 0)));

char *fgets(char *__str, int __size, FILE *__stream);
char *gets(char *__str);
size_t fread(void *__ptr, size_t __size, size_t __nmemb,
        FILE *__stream);

void clearerr(FILE *__stream);




int feof(FILE *__stream);




int ferror(FILE *__stream);
# 285 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
__extension__ typedef _fpos_t fpos_t;
int fgetpos(FILE *stream, fpos_t *pos);
FILE *fopen(const char *path, const char *mode) __attribute__((__malloc__, __malloc__(fclose,1)));
FILE *freopen(const char *path, const char *mode, FILE *stream);
FILE *fdopen(int, const char *) __attribute__((__malloc__, __malloc__(fclose,1)));
FILE *fmemopen(void *buf, size_t size, const char *mode) __attribute__((__malloc__, __malloc__(fclose,1)));
int fseek(FILE *stream, long offset, int whence);
int fseeko(FILE *stream, __off_t offset, int whence);
int fsetpos(FILE *stream, fpos_t *pos);
long ftell(FILE *stream);
__off_t ftello(FILE *stream);
int fileno(FILE *);
void perror(const char *s);
int remove(const char *pathname);
int rename(const char *oldpath, const char *newpath);
void rewind(FILE *stream);
void setbuf(FILE *stream, char *buf);
void setbuffer(FILE *stream, char *buf, size_t size);
void setlinebuf(FILE *stream);
int setvbuf(FILE *stream, char *buf, int mode, size_t size);
FILE *tmpfile(void);
char *tmpnam (char *s);
ssize_t getline(char **restrict lineptr, size_t *restrict n, FILE *restrict stream);
ssize_t getdelim(char **restrict lineptr, size_t *restrict n, int delim, FILE *restrict stream);
# 332 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdio.h" 3 4
static __inline uint32_t
__printf_float(float f)
{
 union {
  float f;
  uint32_t u;
 } u = { .f = f };
 return u.u;
}
# 66 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/printk.h" 2
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 1
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 1
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h"

# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h"
typedef void (*irq_offload_routine_t)(const void *parameter);
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h"
void irq_offload(irq_offload_routine_t routine, const void *parameter);
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2






struct k_thread;
struct k_mem_domain;

typedef struct z_thread_stack_element k_thread_stack_t;

typedef void (*k_thread_entry_t)(void *p1, void *p2, void *p3);
# 68 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline uint32_t arch_k_cycle_get_32(void);
# 82 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline uint64_t arch_k_cycle_get_64(void);
# 183 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_cpu_idle(void);
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_cpu_atomic_idle(unsigned int key);
# 218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
typedef __attribute__((__noreturn__)) void (*arch_cpustart_t)(void *data);
# 240 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_start_cpu(int cpu_num, k_thread_stack_t *stack, int sz,
      arch_cpustart_t fn, void *arg);







# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
_Bool 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
    arch_cpu_active(int cpu_num);
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline unsigned int arch_irq_lock(void);






static inline void arch_irq_unlock(unsigned int key);
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline 
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
             _Bool 
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
                  arch_irq_unlocked(unsigned int key);
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_irq_disable(unsigned int irq);






void arch_irq_enable(unsigned int irq);






int arch_irq_is_enabled(unsigned int irq);
# 322 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
        void (*routine)(const void *parameter),
        const void *parameter, uint32_t flags);
# 340 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
int arch_irq_disconnect_dynamic(unsigned int irq, unsigned int priority,
    void (*routine)(const void *parameter),
    const void *parameter, uint32_t flags);
# 398 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
unsigned int arch_irq_allocate(void);
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_irq_set_used(unsigned int irq);
# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"

# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
_Bool 
# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
    arch_irq_is_used(unsigned int irq);
# 507 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline unsigned int arch_num_cpus(void);
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline 
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
             _Bool 
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
                  arch_mem_coherent(void *ptr)
{
 (void)(ptr);
 return 
# 869 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
       1
# 869 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
           ;
}
# 914 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline void arch_cohere_stacks(struct k_thread *old_thread,
          void *old_switch_handle,
          struct k_thread *new_thread)
{
 (void)(old_thread);
 (void)(old_switch_handle);
 (void)(new_thread);
}
# 1221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_spin_relax(void);





# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch_inlines.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch_inlines.h"
static inline __attribute__((always_inline)) _cpu_t *arch_curr_cpu(void)
{

 return &_kernel.cpus[0];
}


static inline __attribute__((always_inline)) uint32_t arch_proc_id(void)
{




 return arch_curr_cpu()->id;
}

static inline __attribute__((always_inline)) unsigned int arch_num_cpus(void)
{
 return 1;
}
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h" 2
# 1228 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 2






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 1
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h" 1
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
struct _callee_saved {
 uint32_t v1;
 uint32_t v2;
 uint32_t v3;
 uint32_t v4;
 uint32_t v5;
 uint32_t v6;
 uint32_t v7;
 uint32_t v8;
 uint32_t psp;
};

typedef struct _callee_saved _callee_saved_t;


struct _preempt_float {
 float s16;
 float s17;
 float s18;
 float s19;
 float s20;
 float s21;
 float s22;
 float s23;
 float s24;
 float s25;
 float s26;
 float s27;
 float s28;
 float s29;
 float s30;
 float s31;
};


struct _thread_arch {


 uint32_t basepri;


 uint32_t swap_return_value;







 struct _preempt_float preempt_float;
# 110 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
 union {
  uint32_t mode;


  struct {
   uint8_t mode_bits;
   uint8_t mode_exc_return;
   uint16_t mode_reserved2;
  };

 };
# 130 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
};




typedef struct _thread_arch _thread_arch_t;
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/nvic.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h" 2
# 77 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
struct __fpu_sf {
 uint32_t s[16];



 uint32_t fpscr;
 uint32_t undefined;
};
# 101 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
struct __esf {
 struct __basic_sf {
  union { uint32_t a1, r0; };
  union { uint32_t a2, r1; };
  union { uint32_t a3, r2; };
  union { uint32_t a4, r3; };
  union { uint32_t ip, r12; };
  union { uint32_t lr, r14; };
  union { uint32_t pc, r15; };
  uint32_t xpsr;
 } basic;

 struct __fpu_sf fpu;




};

extern uint32_t z_arm_coredump_fault_sp;

typedef struct __esf z_arch_esf_t;

extern void z_arm_exc_exit(void);
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h" 2
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h" 1
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
extern void _isr_wrapper(void);


extern void z_irq_spurious(const void *unused);






struct _isr_table_entry {
 const void *arg;
 void (*isr)(const void *);
};




extern struct _isr_table_entry _sw_isr_table[];
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
struct _isr_list {

 int32_t irq;

 int32_t flags;

 void *func;

 const void *param;
};
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
unsigned int z_get_sw_isr_table_idx(unsigned int irq);
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h" 2
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void arch_irq_enable(unsigned int irq);
extern void arch_irq_disable(unsigned int irq);
extern int arch_irq_is_enabled(unsigned int irq);


extern void z_arm_irq_priority_set(unsigned int irq, unsigned int prio,
       uint32_t flags);
# 74 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void z_arm_int_exit(void);

extern void z_arm_interrupt_init(void);
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void z_arm_int_exit(void);






static inline void arch_isr_direct_header(void)
{



}

static inline void arch_isr_direct_footer(int maybe_swap)
{



 if (maybe_swap != 0) {
  z_arm_int_exit();
 }
}
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/error.h" 1
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/misc.h" 1
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/misc.h"
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
 return sys_clock_cycle_get_32();
}

extern uint64_t sys_clock_cycle_get_64(void);

static inline uint64_t arch_k_cycle_get_64(void)
{
 return sys_clock_cycle_get_64();
}

static inline __attribute__((always_inline)) void arch_nop(void)
{
 __asm__ volatile("nop");
}
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/addr_types.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/addr_types.h"
typedef uintptr_t paddr_t;
typedef void *vaddr_t;
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h" 1
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_msb_set(uint32_t op)
{
 if (op == 0) {
  return 0;
 }

 return 32 - __builtin_clz(op);
}
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_lsb_set(uint32_t op)
{

 return __builtin_ffs(op);
# 81 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
}
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/nmi.h" 1
# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
static inline __attribute__((always_inline)) unsigned int arch_irq_lock(void)
{
 unsigned int key;
# 57 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 unsigned int tmp;

 __asm__ volatile(
  "mov %1, %2;"
  "mrs %0, BASEPRI;"
  "msr BASEPRI_MAX, %1;"
  "isb;"
  : "=r"(key),






  "=r"(tmp)

  : "i"(((((1 + 0)) << (8 - 3)) & 0xff))
  : "memory");
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 return key;
}






static inline __attribute__((always_inline)) void arch_irq_unlock(unsigned int key)
{
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 __asm__ volatile(
  "msr BASEPRI, %0;"
  "isb;"
  : : "r"(key) : "memory");
# 122 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
}

static inline __attribute__((always_inline)) 
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h" 3 4
                    _Bool 
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
                         arch_irq_unlocked(unsigned int key)
{

 return key == 0U;
}
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h" 2
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_bitops.h" 1
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_bitops.h"
static inline __attribute__((always_inline)) void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | (1 << bit);
}

static inline __attribute__((always_inline)) void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~(1 << bit);
}

static inline __attribute__((always_inline)) int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 return temp & (1 << bit);
}

static inline __attribute__((always_inline)) void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | mask;
}

static inline __attribute__((always_inline)) void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~mask;
}

static inline __attribute__((always_inline))
 void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{



 sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 void sys_bitfield_clear_bit(mem_addr_t addr, unsigned int bit)
{
 sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
 return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_clear_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_clear_bit(addr, bit);

 return ret;
}
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/cpu.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/memory_map.h" 1
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_io.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_io.h"
static inline __attribute__((always_inline)) uint8_t sys_read8(mem_addr_t addr)
{
 return *(volatile uint8_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write8(uint8_t data, mem_addr_t addr)
{
 *(volatile uint8_t *)addr = data;
}

static inline __attribute__((always_inline)) uint16_t sys_read16(mem_addr_t addr)
{
 return *(volatile uint16_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write16(uint16_t data, mem_addr_t addr)
{
 *(volatile uint16_t *)addr = data;
}

static inline __attribute__((always_inline)) uint32_t sys_read32(mem_addr_t addr)
{
 return *(volatile uint32_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write32(uint32_t data, mem_addr_t addr)
{
 *(volatile uint32_t *)addr = data;
}

static inline __attribute__((always_inline)) uint64_t sys_read64(mem_addr_t addr)
{
 return *(volatile uint64_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write64(uint64_t data, mem_addr_t addr)
{
 *(volatile uint64_t *)addr = data;
}
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 57 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal_types.h" 1
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal_types.h"
enum k_fatal_error_reason {

 K_ERR_CPU_EXCEPTION,


 K_ERR_SPURIOUS_IRQ,


 K_ERR_STACK_CHK_FAIL,


 K_ERR_KERNEL_OOPS,


 K_ERR_KERNEL_PANIC,


 K_ERR_ARCH_START = 16
};
# 58 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2

enum k_fatal_error_reason_arch {

 K_ERR_ARM_MEM_GENERIC = K_ERR_ARCH_START,
 K_ERR_ARM_MEM_STACKING,
 K_ERR_ARM_MEM_UNSTACKING,
 K_ERR_ARM_MEM_DATA_ACCESS,
 K_ERR_ARM_MEM_INSTRUCTION_ACCESS,
 K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION,


 K_ERR_ARM_BUS_GENERIC,
 K_ERR_ARM_BUS_STACKING,
 K_ERR_ARM_BUS_UNSTACKING,
 K_ERR_ARM_BUS_PRECISE_DATA_BUS,
 K_ERR_ARM_BUS_IMPRECISE_DATA_BUS,
 K_ERR_ARM_BUS_INSTRUCTION_BUS,
 K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION,


 K_ERR_ARM_USAGE_GENERIC,
 K_ERR_ARM_USAGE_DIV_0,
 K_ERR_ARM_USAGE_UNALIGNED_ACCESS,
 K_ERR_ARM_USAGE_STACK_OVERFLOW,
 K_ERR_ARM_USAGE_NO_COPROCESSOR,
 K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN,
 K_ERR_ARM_USAGE_ILLEGAL_EPSR,
 K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION,


 K_ERR_ARM_SECURE_GENERIC,
 K_ERR_ARM_SECURE_ENTRY_POINT,
 K_ERR_ARM_SECURE_INTEGRITY_SIGNATURE,
 K_ERR_ARM_SECURE_EXCEPTION_RETURN,
 K_ERR_ARM_SECURE_ATTRIBUTION_UNIT,
 K_ERR_ARM_SECURE_TRANSITION,
 K_ERR_ARM_SECURE_LAZY_STATE_PRESERVATION,
 K_ERR_ARM_SECURE_LAZY_STATE_ERROR,


 K_ERR_ARM_UNDEFINED_INSTRUCTION,
 K_ERR_ARM_ALIGNMENT_FAULT,
 K_ERR_ARM_BACKGROUND_FAULT,
 K_ERR_ARM_PERMISSION_FAULT,
 K_ERR_ARM_SYNC_EXTERNAL_ABORT,
 K_ERR_ARM_ASYNC_EXTERNAL_ABORT,
 K_ERR_ARM_SYNC_PARITY_ERROR,
 K_ERR_ARM_ASYNC_PARITY_ERROR,
 K_ERR_ARM_DEBUG_EVENT,
 K_ERR_ARM_TRANSLATION_FAULT,
 K_ERR_ARM_UNSUPPORTED_EXCLUSIVE_ACCESS_FAULT
};
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 1
# 37 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 1
# 515 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config_common.h" 1
# 516 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 2
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config_nrf52840.h" 1
# 532 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 2
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 1 3 4
# 49 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 50 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 1 3 4






# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 8 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 2 3 4



# 10 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 3 4
struct __locale_t;
typedef struct __locale_t *locale_t;
# 53 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4








void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *restrict, const void *restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);






void * memccpy (void *restrict, const void *restrict, int, size_t);
# 108 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);






void free (void *) __attribute__ ((__nothrow__));
char *strdup (const char *) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__));


char *strndup (const char *, size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__));
# 131 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (int, int, int *);






size_t strnlen (const char *, size_t);
# 165 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
char *strsignal (int __signo);
# 210 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/string.h" 1 3 4
# 211 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4




# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/ssp.h" 1 3 4
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/ssp.h" 3 4

void __stack_chk_fail(void) __attribute__((__noreturn__));
void __chk_fail(void) __attribute__((__noreturn__));
void set_fortify_handler (void (*handler) (int sig));

# 36 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 2 3 4


void *__memcpy_chk(void *, const void *, size_t, size_t);
void *__memmove_chk(void *, const void *, size_t, size_t);
void *__mempcpy_chk(void *, const void *, size_t, size_t);
void *__memset_chk(void *, int, size_t, size_t);
char *__stpcpy_chk(char *, const char *, size_t);
char *__strcat_chk(char *, const char *, size_t);
char *__strcpy_chk(char *, const char *, size_t);
char *__strncat_chk(char *, const char *, size_t, size_t);
char *__strncpy_chk(char *, const char *, size_t, size_t);

# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 3 4

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___memcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void *, const void *, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void * dst, const void * src, size_t len) { return __builtin___memmove_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___mempcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void *, int, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void * dst, int src, size_t len) { return __builtin___memset_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___stpcpy_chk(dst, src, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___stpncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcpy_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcat_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncat_chk(dst, src, len, __builtin_object_size(dst, 0)); }

# 216 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4
# 41 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 1 3 4
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 1
# 193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 1
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"

# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef enum {

  Reset_IRQn = -15,
  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,

  BusFault_IRQn = -11,

  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  POWER_CLOCK_IRQn = 0,
  RADIO_IRQn = 1,
  UARTE0_UART0_IRQn = 2,
  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn= 3,
  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn= 4,
  NFCT_IRQn = 5,
  GPIOTE_IRQn = 6,
  SAADC_IRQn = 7,
  TIMER0_IRQn = 8,
  TIMER1_IRQn = 9,
  TIMER2_IRQn = 10,
  RTC0_IRQn = 11,
  TEMP_IRQn = 12,
  RNG_IRQn = 13,
  ECB_IRQn = 14,
  CCM_AAR_IRQn = 15,
  WDT_IRQn = 16,
  RTC1_IRQn = 17,
  QDEC_IRQn = 18,
  COMP_LPCOMP_IRQn = 19,
  SWI0_EGU0_IRQn = 20,
  SWI1_EGU1_IRQn = 21,
  SWI2_EGU2_IRQn = 22,
  SWI3_EGU3_IRQn = 23,
  SWI4_EGU4_IRQn = 24,
  SWI5_EGU5_IRQn = 25,
  TIMER3_IRQn = 26,
  TIMER4_IRQn = 27,
  PWM0_IRQn = 28,
  PDM_IRQn = 29,
  MWU_IRQn = 32,
  PWM1_IRQn = 33,
  PWM2_IRQn = 34,
  SPIM2_SPIS2_SPI2_IRQn = 35,
  RTC2_IRQn = 36,
  I2S_IRQn = 37,
  FPU_IRQn = 38,
  USBD_IRQn = 39,
  UARTE1_IRQn = 40,
  QSPI_IRQn = 41,
  CRYPTOCELL_IRQn = 42,
  PWM3_IRQn = 45,
  SPIM3_IRQn = 47
} IRQn_Type;
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_version.h" 1
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 1
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h" 1
# 29 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 326 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 346 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  return result;
}
# 403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __CLZ(uint32_t value)
{
# 414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
# 432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 454 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 476 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 493 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 630 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 652 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 679 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 1001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
  __ISB();
}
# 1027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 1099 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 1123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 1153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 1204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 1234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 1261 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 1313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 1338 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 1379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 1588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{






  return __builtin_arm_get_fpscr();
# 1606 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{






  __builtin_arm_set_fpscr(fpscr);






}
# 1643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
  }
  return result;
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
  } else {
    result = __SXTAB16(op1, __ROR(op2, rotate));
  }
  return result;
}


__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 2
# 163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 303 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 321 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
# 724 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 816 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
# 1051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1421 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1684 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __asm volatile("":::"memory");
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __asm volatile("":::"memory");
  }
}
# 1703 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1722 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1760 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1775 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1792 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
}
# 1836 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 3)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
  }
}
# 1861 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;

}
# 1927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 1
# 183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DMB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

  __DSB();
  __ISB();
}



static inline void ARM_MPU_Disable(void)
{
  __DMB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
  __DSB();
  __ISB();
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* 
# 251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 3 4
                                                                                  restrict 
# 251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
                                                                                             src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 1981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2052 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
# 2064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/system_nrf52840.h" 1
# 35 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/system_nrf52840.h"
typedef void(*VECTOR_TABLE_Type)(void);




extern uint32_t SystemCoreClock;





extern void SystemInit (void);






extern void SystemCoreClockUpdate (void);
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 2
# 202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t PART;
  volatile const uint32_t VARIANT;
  volatile const uint32_t PACKAGE;
  volatile const uint32_t RAM;
  volatile const uint32_t FLASH;
} FICR_INFO_Type;





typedef struct {
  volatile const uint32_t A0;
  volatile const uint32_t A1;
  volatile const uint32_t A2;
  volatile const uint32_t A3;
  volatile const uint32_t A4;
  volatile const uint32_t A5;
  volatile const uint32_t B0;
  volatile const uint32_t B1;
  volatile const uint32_t B2;
  volatile const uint32_t B3;
  volatile const uint32_t B4;
  volatile const uint32_t B5;
  volatile const uint32_t T0;
  volatile const uint32_t T1;
  volatile const uint32_t T2;
  volatile const uint32_t T3;
  volatile const uint32_t T4;
} FICR_TEMP_Type;





typedef struct {
  volatile const uint32_t TAGHEADER0;


  volatile const uint32_t TAGHEADER1;


  volatile const uint32_t TAGHEADER2;


  volatile const uint32_t TAGHEADER3;


} FICR_NFC_Type;





typedef struct {
  volatile const uint32_t BYTES;
  volatile const uint32_t RCCUTOFF;
  volatile const uint32_t APCUTOFF;
  volatile const uint32_t STARTUP;
  volatile const uint32_t ROSC1;
  volatile const uint32_t ROSC2;
  volatile const uint32_t ROSC3;
  volatile const uint32_t ROSC4;
} FICR_TRNG90B_Type;





typedef struct {
  volatile uint32_t POWER;
  volatile uint32_t POWERSET;
  volatile uint32_t POWERCLR;

  volatile const uint32_t RESERVED;
} POWER_RAM_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UART_PSEL_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UARTE_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_TXD_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
} SPI_PSEL_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
  volatile uint32_t CSN;
} SPIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_TXD_Type;





typedef struct {
  volatile uint32_t RXDELAY;
  volatile uint32_t CSNDUR;


} SPIM_IFTIMING_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MISO;
  volatile uint32_t MOSI;
  volatile uint32_t CSN;
} SPIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWI_PSEL_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_TXD_Type;





typedef struct {
  volatile uint32_t RX;
} NFCT_FRAMESTATUS_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile uint32_t AMOUNT;
} NFCT_TXD_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile const uint32_t AMOUNT;
} NFCT_RXD_Type;





typedef struct {
  volatile uint32_t LIMITH;

  volatile uint32_t LIMITL;

} SAADC_EVENTS_CH_Type;





typedef struct {
  volatile uint32_t PSELP;

  volatile uint32_t PSELN;

  volatile uint32_t CONFIG;

  volatile uint32_t LIMIT;

} SAADC_CH_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

} SAADC_RESULT_Type;





typedef struct {
  volatile uint32_t LED;
  volatile uint32_t A;
  volatile uint32_t B;
} QDEC_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t CNT;

  volatile uint32_t REFRESH;


  volatile uint32_t ENDDELAY;
  volatile const uint32_t RESERVED[4];
} PWM_SEQ_Type;





typedef struct {
  volatile uint32_t OUT[4];

} PWM_PSEL_Type;





typedef struct {
  volatile uint32_t CLK;
  volatile uint32_t DIN;
} PDM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t MAXCNT;

} PDM_SAMPLE_Type;





typedef struct {
  volatile uint32_t ADDR;

  volatile uint32_t SIZE;


  volatile uint32_t PERM;


  volatile const uint32_t RESERVED;
} ACL_ACL_Type;





typedef struct {
  volatile uint32_t EN;
  volatile uint32_t DIS;
} PPI_TASKS_CHG_Type;





typedef struct {
  volatile uint32_t EEP;
  volatile uint32_t TEP;
} PPI_CH_Type;





typedef struct {
  volatile uint32_t TEP;
} PPI_FORK_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_REGION_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_PREGION_Type;





typedef struct {
  volatile uint32_t SUBSTATWA;



  volatile uint32_t SUBSTATRA;



} MWU_PERREGION_Type;





typedef struct {
  volatile uint32_t START;

  volatile uint32_t END;
  volatile const uint32_t RESERVED[2];
} MWU_REGION_Type;





typedef struct {
  volatile const uint32_t START;
  volatile const uint32_t END;
  volatile uint32_t SUBS;
  volatile const uint32_t RESERVED;
} MWU_PREGION_Type;





typedef struct {
  volatile uint32_t MODE;
  volatile uint32_t RXEN;
  volatile uint32_t TXEN;
  volatile uint32_t MCKEN;
  volatile uint32_t MCKFREQ;
  volatile uint32_t RATIO;
  volatile uint32_t SWIDTH;
  volatile uint32_t ALIGN;
  volatile uint32_t FORMAT;
  volatile uint32_t CHANNELS;
} I2S_CONFIG_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_TXD_Type;





typedef struct {
  volatile uint32_t MAXCNT;
} I2S_RXTXD_Type;





typedef struct {
  volatile uint32_t MCK;
  volatile uint32_t SCK;
  volatile uint32_t LRCK;
  volatile uint32_t SDIN;
  volatile uint32_t SDOUT;
} I2S_PSEL_Type;





typedef struct {
  volatile const uint32_t EPIN[8];


  volatile const uint32_t RESERVED;
  volatile const uint32_t EPOUT[8];


} USBD_HALTED_Type;





typedef struct {
  volatile uint32_t EPOUT[8];

  volatile const uint32_t ISOOUT;

} USBD_SIZE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPOUT_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOOUT_Type;





typedef struct {
  volatile uint32_t SRC;
  volatile uint32_t DST;
  volatile uint32_t CNT;
} QSPI_READ_Type;





typedef struct {
  volatile uint32_t DST;
  volatile uint32_t SRC;
  volatile uint32_t CNT;
} QSPI_WRITE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t LEN;
} QSPI_ERASE_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t CSN;
  volatile const uint32_t RESERVED;
  volatile uint32_t IO0;
  volatile uint32_t IO1;
  volatile uint32_t IO2;
  volatile uint32_t IO3;
} QSPI_PSEL_Type;
# 891 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile const uint32_t CODEPAGESIZE;
  volatile const uint32_t CODESIZE;
  volatile const uint32_t RESERVED1[18];
  volatile const uint32_t DEVICEID[2];
  volatile const uint32_t RESERVED2[6];
  volatile const uint32_t ER[4];

  volatile const uint32_t IR[4];
  volatile const uint32_t DEVICEADDRTYPE;
  volatile const uint32_t DEVICEADDR[2];
  volatile const uint32_t RESERVED3[21];
  volatile const FICR_INFO_Type INFO;
  volatile const uint32_t RESERVED4[143];
  volatile const uint32_t PRODTEST[3];

  volatile const uint32_t RESERVED5[42];
  volatile const FICR_TEMP_Type TEMP;

  volatile const uint32_t RESERVED6[2];
  volatile FICR_NFC_Type NFC;
  volatile const uint32_t RESERVED7[488];
  volatile FICR_TRNG90B_Type TRNG90B;
} NRF_FICR_Type;
# 928 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t NRFFW[13];

  volatile const uint32_t RESERVED1[2];
  volatile uint32_t NRFHW[12];

  volatile uint32_t CUSTOMER[32];
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t PSELRESET[2];

  volatile uint32_t APPROTECT;
  volatile uint32_t NFCPINS;

  volatile uint32_t DEBUGCTRL;
  volatile const uint32_t RESERVED3[60];
  volatile uint32_t REGOUT0;


} NRF_UICR_Type;
# 960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[340];
  volatile uint32_t FORCEPROTECT;

  volatile const uint32_t RESERVED1;
  volatile uint32_t DISABLE;
} NRF_APPROTECT_Type;
# 979 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_HFCLKSTART;
  volatile uint32_t TASKS_HFCLKSTOP;
  volatile uint32_t TASKS_LFCLKSTART;
  volatile uint32_t TASKS_LFCLKSTOP;
  volatile uint32_t TASKS_CAL;
  volatile uint32_t TASKS_CTSTART;
  volatile uint32_t TASKS_CTSTOP;
  volatile const uint32_t RESERVED[57];
  volatile uint32_t EVENTS_HFCLKSTARTED;
  volatile uint32_t EVENTS_LFCLKSTARTED;
  volatile const uint32_t RESERVED1;
  volatile uint32_t EVENTS_DONE;
  volatile uint32_t EVENTS_CTTO;
  volatile const uint32_t RESERVED2[5];
  volatile uint32_t EVENTS_CTSTARTED;

  volatile uint32_t EVENTS_CTSTOPPED;

  volatile const uint32_t RESERVED3[117];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[63];
  volatile const uint32_t HFCLKRUN;

  volatile const uint32_t HFCLKSTAT;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t LFCLKRUN;

  volatile const uint32_t LFCLKSTAT;
  volatile const uint32_t LFCLKSRCCOPY;

  volatile const uint32_t RESERVED6[62];
  volatile uint32_t LFCLKSRC;
  volatile const uint32_t RESERVED7[3];
  volatile uint32_t HFXODEBOUNCE;

  volatile const uint32_t RESERVED8[3];
  volatile uint32_t CTIV;
  volatile const uint32_t RESERVED9[8];
  volatile uint32_t TRACECONFIG;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t LFRCMODE;
} NRF_CLOCK_Type;
# 1035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[30];
  volatile uint32_t TASKS_CONSTLAT;
  volatile uint32_t TASKS_LOWPWR;
  volatile const uint32_t RESERVED1[34];
  volatile uint32_t EVENTS_POFWARN;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_SLEEPENTER;
  volatile uint32_t EVENTS_SLEEPEXIT;
  volatile uint32_t EVENTS_USBDETECTED;
  volatile uint32_t EVENTS_USBREMOVED;
  volatile uint32_t EVENTS_USBPWRRDY;
  volatile const uint32_t RESERVED3[119];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t RESETREAS;
  volatile const uint32_t RESERVED5[9];
  volatile const uint32_t RAMSTATUS;
  volatile const uint32_t RESERVED6[3];
  volatile const uint32_t USBREGSTATUS;
  volatile const uint32_t RESERVED7[49];
  volatile uint32_t SYSTEMOFF;
  volatile const uint32_t RESERVED8[3];
  volatile uint32_t POFCON;
  volatile const uint32_t RESERVED9[2];
  volatile uint32_t GPREGRET;
  volatile uint32_t GPREGRET2;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t DCDCEN;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DCDCEN0;
  volatile const uint32_t RESERVED12[47];
  volatile const uint32_t MAINREGSTATUS;
  volatile const uint32_t RESERVED13[175];
  volatile POWER_RAM_Type RAM[9];
} NRF_POWER_Type;
# 1084 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[321];
  volatile uint32_t OUT;
  volatile uint32_t OUTSET;
  volatile uint32_t OUTCLR;
  volatile const uint32_t IN;
  volatile uint32_t DIR;
  volatile uint32_t DIRSET;
  volatile uint32_t DIRCLR;
  volatile uint32_t LATCH;


  volatile uint32_t DETECTMODE;

  volatile const uint32_t RESERVED1[118];
  volatile uint32_t PIN_CNF[32];

} NRF_GPIO_Type;
# 1114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TXEN;
  volatile uint32_t TASKS_RXEN;
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_RSSISTART;

  volatile uint32_t TASKS_RSSISTOP;
  volatile uint32_t TASKS_BCSTART;
  volatile uint32_t TASKS_BCSTOP;
  volatile uint32_t TASKS_EDSTART;

  volatile uint32_t TASKS_EDSTOP;
  volatile uint32_t TASKS_CCASTART;

  volatile uint32_t TASKS_CCASTOP;
  volatile const uint32_t RESERVED[51];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_ADDRESS;
  volatile uint32_t EVENTS_PAYLOAD;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DISABLED;
  volatile uint32_t EVENTS_DEVMATCH;

  volatile uint32_t EVENTS_DEVMISS;

  volatile uint32_t EVENTS_RSSIEND;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_BCMATCH;
  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_CRCOK;
  volatile uint32_t EVENTS_CRCERROR;
  volatile uint32_t EVENTS_FRAMESTART;
  volatile uint32_t EVENTS_EDEND;


  volatile uint32_t EVENTS_EDSTOPPED;
  volatile uint32_t EVENTS_CCAIDLE;
  volatile uint32_t EVENTS_CCABUSY;
  volatile uint32_t EVENTS_CCASTOPPED;
  volatile uint32_t EVENTS_RATEBOOST;

  volatile uint32_t EVENTS_TXREADY;

  volatile uint32_t EVENTS_RXREADY;

  volatile uint32_t EVENTS_MHRMATCH;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_SYNC;
  volatile uint32_t EVENTS_PHYEND;


  volatile const uint32_t RESERVED4[36];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t CRCSTATUS;
  volatile const uint32_t RESERVED7;
  volatile const uint32_t RXMATCH;
  volatile const uint32_t RXCRC;
  volatile const uint32_t DAI;
  volatile const uint32_t PDUSTAT;
  volatile const uint32_t RESERVED8[59];
  volatile uint32_t PACKETPTR;
  volatile uint32_t FREQUENCY;
  volatile uint32_t TXPOWER;
  volatile uint32_t MODE;
  volatile uint32_t PCNF0;
  volatile uint32_t PCNF1;
  volatile uint32_t BASE0;
  volatile uint32_t BASE1;
  volatile uint32_t PREFIX0;
  volatile uint32_t PREFIX1;
  volatile uint32_t TXADDRESS;
  volatile uint32_t RXADDRESSES;
  volatile uint32_t CRCCNF;
  volatile uint32_t CRCPOLY;
  volatile uint32_t CRCINIT;
  volatile const uint32_t RESERVED9;
  volatile uint32_t TIFS;
  volatile const uint32_t RSSISAMPLE;
  volatile const uint32_t RESERVED10;
  volatile const uint32_t STATE;
  volatile uint32_t DATAWHITEIV;
  volatile const uint32_t RESERVED11[2];
  volatile uint32_t BCC;
  volatile const uint32_t RESERVED12[39];
  volatile uint32_t DAB[8];

  volatile uint32_t DAP[8];

  volatile uint32_t DACNF;
  volatile uint32_t MHRMATCHCONF;
  volatile uint32_t MHRMATCHMAS;
  volatile const uint32_t RESERVED13;
  volatile uint32_t MODECNF0;
  volatile const uint32_t RESERVED14[3];
  volatile uint32_t SFD;
  volatile uint32_t EDCNT;
  volatile uint32_t EDSAMPLE;
  volatile uint32_t CCACTRL;
  volatile const uint32_t RESERVED15[611];
  volatile uint32_t POWER;
} NRF_RADIO_Type;
# 1233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_SUSPEND;
  volatile const uint32_t RESERVED1[56];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;
  volatile const uint32_t RESERVED2[4];
  volatile uint32_t EVENTS_TXDRDY;
  volatile const uint32_t RESERVED3;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5[46];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED6[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED7[93];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED8[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile UART_PSEL_Type PSEL;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED10;
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED11[17];
  volatile uint32_t CONFIG;
} NRF_UART_Type;
# 1281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[7];
  volatile uint32_t TASKS_FLUSHRX;
  volatile const uint32_t RESERVED1[52];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;

  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_TXDRDY;
  volatile uint32_t EVENTS_ENDTX;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EVENTS_TXSTOPPED;
  volatile const uint32_t RESERVED7[41];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[93];
  volatile uint32_t ERRORSRC;

  volatile const uint32_t RESERVED10[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile UARTE_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED13[3];
  volatile UARTE_RXD_Type RXD;
  volatile const uint32_t RESERVED14;
  volatile UARTE_TXD_Type TXD;
  volatile const uint32_t RESERVED15[7];
  volatile uint32_t CONFIG;
} NRF_UARTE_Type;
# 1341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[66];
  volatile uint32_t EVENTS_READY;
  volatile const uint32_t RESERVED1[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED3;
  volatile SPI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED5;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CONFIG;
} NRF_SPI_Type;
# 1372 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ENDTX;
  volatile const uint32_t RESERVED6[10];
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED7[44];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[61];
  volatile uint32_t STALLSTAT;



  volatile const uint32_t RESERVED10[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile SPIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile SPIM_RXD_Type RXD;
  volatile SPIM_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED14[2];
  volatile SPIM_IFTIMING_Type IFTIMING;
  volatile uint32_t CSNPOL;
  volatile uint32_t PSELDCX;
  volatile uint32_t DCXCNT;
  volatile const uint32_t RESERVED15[19];
  volatile uint32_t ORC;


} NRF_SPIM_Type;
# 1432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[9];
  volatile uint32_t TASKS_ACQUIRE;
  volatile uint32_t TASKS_RELEASE;

  volatile const uint32_t RESERVED1[54];
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t EVENTS_ACQUIRED;
  volatile const uint32_t RESERVED4[53];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t SEMSTAT;
  volatile const uint32_t RESERVED7[15];
  volatile uint32_t STATUS;
  volatile const uint32_t RESERVED8[47];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile SPIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED10[7];
  volatile SPIS_RXD_Type RXD;
  volatile SPIS_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DEF;

  volatile const uint32_t RESERVED12[24];
  volatile uint32_t ORC;
} NRF_SPIS_Type;
# 1478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_RXDREADY;
  volatile const uint32_t RESERVED4[4];
  volatile uint32_t EVENTS_TXDSENT;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_BB;

  volatile const uint32_t RESERVED7[3];
  volatile uint32_t EVENTS_SUSPENDED;
  volatile const uint32_t RESERVED8[45];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED9[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED10[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED11[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED12;
  volatile TWI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED13[2];
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED14;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED15[24];
  volatile uint32_t ADDRESS;
} NRF_TWI_Type;
# 1531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;

  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t EVENTS_SUSPENDED;

  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[2];
  volatile uint32_t EVENTS_LASTRX;
  volatile uint32_t EVENTS_LASTTX;

  volatile const uint32_t RESERVED7[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED10[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[5];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile TWIM_RXD_Type RXD;
  volatile TWIM_TXD_Type TXD;
  volatile const uint32_t RESERVED14[13];
  volatile uint32_t ADDRESS;
} NRF_TWIM_Type;
# 1587 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[3];
  volatile uint32_t TASKS_PREPARERX;
  volatile uint32_t TASKS_PREPARETX;
  volatile const uint32_t RESERVED3[51];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[9];
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_WRITE;
  volatile uint32_t EVENTS_READ;
  volatile const uint32_t RESERVED7[37];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[113];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t MATCH;

  volatile const uint32_t RESERVED10[10];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[9];
  volatile TWIS_RXD_Type RXD;
  volatile TWIS_TXD_Type TXD;
  volatile const uint32_t RESERVED13[13];
  volatile uint32_t ADDRESS[2];
  volatile const uint32_t RESERVED14;
  volatile uint32_t CONFIG;

  volatile const uint32_t RESERVED15[10];
  volatile uint32_t ORC;

} NRF_TWIS_Type;
# 1644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;

  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_SENSE;

  volatile uint32_t TASKS_STARTTX;

  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_ENABLERXDATA;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_GOIDLE;
  volatile uint32_t TASKS_GOSLEEP;
  volatile const uint32_t RESERVED2[53];
  volatile uint32_t EVENTS_READY;

  volatile uint32_t EVENTS_FIELDDETECTED;
  volatile uint32_t EVENTS_FIELDLOST;
  volatile uint32_t EVENTS_TXFRAMESTART;

  volatile uint32_t EVENTS_TXFRAMEEND;

  volatile uint32_t EVENTS_RXFRAMESTART;

  volatile uint32_t EVENTS_RXFRAMEEND;


  volatile uint32_t EVENTS_ERROR;

  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_RXERROR;


  volatile uint32_t EVENTS_ENDRX;

  volatile uint32_t EVENTS_ENDTX;

  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_AUTOCOLRESSTARTED;
  volatile const uint32_t RESERVED5[3];
  volatile uint32_t EVENTS_COLLISION;
  volatile uint32_t EVENTS_SELECTED;
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED6[43];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED7[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED8[62];
  volatile uint32_t ERRORSTATUS;
  volatile const uint32_t RESERVED9;
  volatile NFCT_FRAMESTATUS_Type FRAMESTATUS;
  volatile const uint32_t NFCTAGSTATE;
  volatile const uint32_t RESERVED10[3];
  volatile const uint32_t SLEEPSTATE;
  volatile const uint32_t RESERVED11[6];
  volatile const uint32_t FIELDPRESENT;
  volatile const uint32_t RESERVED12[49];
  volatile uint32_t FRAMEDELAYMIN;
  volatile uint32_t FRAMEDELAYMAX;
  volatile uint32_t FRAMEDELAYMODE;
  volatile uint32_t PACKETPTR;

  volatile uint32_t MAXLEN;

  volatile NFCT_TXD_Type TXD;
  volatile NFCT_RXD_Type RXD;
  volatile const uint32_t RESERVED13[26];
  volatile uint32_t NFCID1_LAST;
  volatile uint32_t NFCID1_2ND_LAST;
  volatile uint32_t NFCID1_3RD_LAST;
  volatile uint32_t AUTOCOLRESCONFIG;


  volatile uint32_t SENSRES;
  volatile uint32_t SELRES;
} NRF_NFCT_Type;
# 1734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_OUT[8];


  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_SET[8];


  volatile const uint32_t RESERVED1[4];
  volatile uint32_t TASKS_CLR[8];


  volatile const uint32_t RESERVED2[32];
  volatile uint32_t EVENTS_IN[8];

  volatile const uint32_t RESERVED3[23];
  volatile uint32_t EVENTS_PORT;

  volatile const uint32_t RESERVED4[97];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED5[129];
  volatile uint32_t CONFIG[8];

} NRF_GPIOTE_Type;
# 1771 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_SAMPLE;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CALIBRATEOFFSET;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DONE;



  volatile uint32_t EVENTS_RESULTDONE;
  volatile uint32_t EVENTS_CALIBRATEDONE;
  volatile uint32_t EVENTS_STOPPED;
  volatile SAADC_EVENTS_CH_Type EVENTS_CH[8];
  volatile const uint32_t RESERVED1[106];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED4[3];
  volatile SAADC_CH_Type CH[8];
  volatile const uint32_t RESERVED5[24];
  volatile uint32_t RESOLUTION;
  volatile uint32_t OVERSAMPLE;



  volatile uint32_t SAMPLERATE;
  volatile const uint32_t RESERVED6[12];
  volatile SAADC_RESULT_Type RESULT;
} NRF_SAADC_Type;
# 1820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_COUNT;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_SHUTDOWN;
  volatile const uint32_t RESERVED[11];
  volatile uint32_t TASKS_CAPTURE[6];

  volatile const uint32_t RESERVED1[58];
  volatile uint32_t EVENTS_COMPARE[6];

  volatile const uint32_t RESERVED2[42];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[126];
  volatile uint32_t MODE;
  volatile uint32_t BITMODE;
  volatile const uint32_t RESERVED5;
  volatile uint32_t PRESCALER;
  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CC[6];

} NRF_TIMER_Type;
# 1858 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_TRIGOVRFLW;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_TICK;
  volatile uint32_t EVENTS_OVRFLW;
  volatile const uint32_t RESERVED1[14];
  volatile uint32_t EVENTS_COMPARE[4];

  volatile const uint32_t RESERVED2[109];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[13];
  volatile uint32_t EVTEN;
  volatile uint32_t EVTENSET;
  volatile uint32_t EVTENCLR;
  volatile const uint32_t RESERVED4[110];
  volatile const uint32_t COUNTER;
  volatile uint32_t PRESCALER;

  volatile const uint32_t RESERVED5[13];
  volatile uint32_t CC[4];
} NRF_RTC_Type;
# 1895 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_DATARDY;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[127];
  volatile const int32_t TEMP;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t A0;
  volatile uint32_t A1;
  volatile uint32_t A2;
  volatile uint32_t A3;
  volatile uint32_t A4;
  volatile uint32_t A5;
  volatile const uint32_t RESERVED4[2];
  volatile uint32_t B0;
  volatile uint32_t B1;
  volatile uint32_t B2;
  volatile uint32_t B3;
  volatile uint32_t B4;
  volatile uint32_t B5;
  volatile const uint32_t RESERVED5[2];
  volatile uint32_t T0;
  volatile uint32_t T1;
  volatile uint32_t T2;
  volatile uint32_t T3;
  volatile uint32_t T4;
} NRF_TEMP_Type;
# 1938 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_VALRDY;

  volatile const uint32_t RESERVED1[63];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[126];
  volatile uint32_t CONFIG;
  volatile const uint32_t VALUE;
} NRF_RNG_Type;
# 1965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTECB;
  volatile uint32_t TASKS_STOPECB;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_ENDECB;
  volatile uint32_t EVENTS_ERRORECB;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t ECBDATAPTR;
} NRF_ECB_Type;
# 1990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_RESOLVED;
  volatile uint32_t EVENTS_NOTRESOLVED;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t NIRK;
  volatile uint32_t IRKPTR;
  volatile const uint32_t RESERVED5;
  volatile uint32_t ADDRPTR;
  volatile uint32_t SCRATCHPTR;
} NRF_AAR_Type;
# 2024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_KSGEN;

  volatile uint32_t TASKS_CRYPT;

  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_RATEOVERRIDE;


  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_ENDKSGEN;
  volatile uint32_t EVENTS_ENDCRYPT;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t MICSTATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t CNFPTR;

  volatile uint32_t INPTR;
  volatile uint32_t OUTPTR;
  volatile uint32_t SCRATCHPTR;
  volatile uint32_t MAXPACKETSIZE;

  volatile uint32_t RATEOVERRIDE;
} NRF_CCM_Type;
# 2068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_TIMEOUT;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t RUNSTATUS;
  volatile const uint32_t REQSTATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t CRV;
  volatile uint32_t RREN;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED4[60];
  volatile uint32_t RR[8];
} NRF_WDT_Type;
# 2097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_READCLRACC;
  volatile uint32_t TASKS_RDCLRACC;
  volatile uint32_t TASKS_RDCLRDBL;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_SAMPLERDY;

  volatile uint32_t EVENTS_REPORTRDY;
  volatile uint32_t EVENTS_ACCOF;
  volatile uint32_t EVENTS_DBLRDY;
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[59];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile uint32_t LEDPOL;
  volatile uint32_t SAMPLEPER;
  volatile const int32_t SAMPLE;
  volatile uint32_t REPORTPER;

  volatile const int32_t ACC;
  volatile const int32_t ACCREAD;

  volatile QDEC_PSEL_Type PSEL;
  volatile uint32_t DBFEN;
  volatile const uint32_t RESERVED4[5];
  volatile uint32_t LEDPRE;
  volatile const uint32_t ACCDBL;

  volatile const uint32_t ACCDBLREAD;

} NRF_QDEC_Type;
# 2146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t TH;
  volatile uint32_t MODE;
  volatile uint32_t HYST;
} NRF_COMP_Type;
# 2185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[4];
  volatile uint32_t ANADETECT;
  volatile const uint32_t RESERVED6[5];
  volatile uint32_t HYST;
} NRF_LPCOMP_Type;
# 2223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TRIGGER[16];

  volatile const uint32_t RESERVED[48];
  volatile uint32_t EVENTS_TRIGGERED[16];


  volatile const uint32_t RESERVED1[112];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
} NRF_EGU_Type;
# 2247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_SWI_Type;
# 2262 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;


  volatile uint32_t TASKS_SEQSTART[2];




  volatile uint32_t TASKS_NEXTSTEP;



  volatile const uint32_t RESERVED1[60];
  volatile uint32_t EVENTS_STOPPED;

  volatile uint32_t EVENTS_SEQSTARTED[2];

  volatile uint32_t EVENTS_SEQEND[2];


  volatile uint32_t EVENTS_PWMPERIODEND;
  volatile uint32_t EVENTS_LOOPSDONE;

  volatile const uint32_t RESERVED2[56];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[125];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t COUNTERTOP;

  volatile uint32_t PRESCALER;
  volatile uint32_t DECODER;
  volatile uint32_t LOOP;
  volatile const uint32_t RESERVED5[2];
  volatile PWM_SEQ_Type SEQ[2];
  volatile PWM_PSEL_Type PSEL;
} NRF_PWM_Type;
# 2317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_END;


  volatile const uint32_t RESERVED1[125];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile uint32_t PDMCLKCTRL;
  volatile uint32_t MODE;

  volatile const uint32_t RESERVED3[3];
  volatile uint32_t GAINL;
  volatile uint32_t GAINR;
  volatile uint32_t RATIO;

  volatile const uint32_t RESERVED4[7];
  volatile PDM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED5[6];
  volatile PDM_SAMPLE_Type SAMPLE;
} NRF_PDM_Type;
# 2357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[512];
  volatile ACL_ACL_Type ACL[8];
} NRF_ACL_Type;
# 2373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[256];
  volatile const uint32_t READY;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t READYNEXT;
  volatile const uint32_t RESERVED2[62];
  volatile uint32_t CONFIG;

  union {
    volatile uint32_t ERASEPAGE;
    volatile uint32_t ERASEPCR1;

  };
  volatile uint32_t ERASEALL;
  volatile uint32_t ERASEPCR0;

  volatile uint32_t ERASEUICR;

  volatile uint32_t ERASEPAGEPARTIAL;

  volatile uint32_t ERASEPAGEPARTIALCFG;
  volatile const uint32_t RESERVED3[8];
  volatile uint32_t ICACHECNF;
  volatile const uint32_t RESERVED4;
  volatile uint32_t IHIT;
  volatile uint32_t IMISS;
} NRF_NVMC_Type;
# 2412 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile PPI_TASKS_CHG_Type TASKS_CHG[6];
  volatile const uint32_t RESERVED[308];
  volatile uint32_t CHEN;
  volatile uint32_t CHENSET;
  volatile uint32_t CHENCLR;
  volatile const uint32_t RESERVED1;
  volatile PPI_CH_Type CH[20];
  volatile const uint32_t RESERVED2[148];
  volatile uint32_t CHG[6];
  volatile const uint32_t RESERVED3[62];
  volatile PPI_FORK_Type FORK[32];
} NRF_PPI_Type;
# 2437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[64];
  volatile MWU_EVENTS_REGION_Type EVENTS_REGION[4];
  volatile const uint32_t RESERVED1[16];
  volatile MWU_EVENTS_PREGION_Type EVENTS_PREGION[2];
  volatile const uint32_t RESERVED2[100];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t NMIEN;
  volatile uint32_t NMIENSET;
  volatile uint32_t NMIENCLR;
  volatile const uint32_t RESERVED4[53];
  volatile MWU_PERREGION_Type PERREGION[2];
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t REGIONEN;
  volatile uint32_t REGIONENSET;
  volatile uint32_t REGIONENCLR;
  volatile const uint32_t RESERVED6[57];
  volatile MWU_REGION_Type REGION[4];
  volatile const uint32_t RESERVED7[32];
  volatile MWU_PREGION_Type PREGION[2];
} NRF_MWU_Type;
# 2473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_STOP;


  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_RXPTRUPD;




  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_TXPTRUPD;




  volatile const uint32_t RESERVED2[122];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile I2S_CONFIG_Type CONFIG;
  volatile const uint32_t RESERVED4[3];
  volatile I2S_RXD_Type RXD;
  volatile const uint32_t RESERVED5;
  volatile I2S_TXD_Type TXD;
  volatile const uint32_t RESERVED6[3];
  volatile I2S_RXTXD_Type RXTXD;
  volatile const uint32_t RESERVED7[3];
  volatile I2S_PSEL_Type PSEL;
} NRF_I2S_Type;
# 2520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_FPU_Type;
# 2535 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTEPIN[8];



  volatile uint32_t TASKS_STARTISOIN;


  volatile uint32_t TASKS_STARTEPOUT[8];



  volatile uint32_t TASKS_STARTISOOUT;


  volatile uint32_t TASKS_EP0RCVOUT;
  volatile uint32_t TASKS_EP0STATUS;
  volatile uint32_t TASKS_EP0STALL;

  volatile uint32_t TASKS_DPDMDRIVE;

  volatile uint32_t TASKS_DPDMNODRIVE;

  volatile const uint32_t RESERVED1[40];
  volatile uint32_t EVENTS_USBRESET;

  volatile uint32_t EVENTS_STARTED;



  volatile uint32_t EVENTS_ENDEPIN[8];


  volatile uint32_t EVENTS_EP0DATADONE;

  volatile uint32_t EVENTS_ENDISOIN;

  volatile uint32_t EVENTS_ENDEPOUT[8];


  volatile uint32_t EVENTS_ENDISOOUT;

  volatile uint32_t EVENTS_SOF;

  volatile uint32_t EVENTS_USBEVENT;


  volatile uint32_t EVENTS_EP0SETUP;

  volatile uint32_t EVENTS_EPDATA;

  volatile const uint32_t RESERVED2[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t EVENTCAUSE;
  volatile const uint32_t RESERVED5[7];
  volatile USBD_HALTED_Type HALTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EPSTATUS;

  volatile uint32_t EPDATASTATUS;


  volatile const uint32_t USBADDR;
  volatile const uint32_t RESERVED7[3];
  volatile const uint32_t BMREQUESTTYPE;
  volatile const uint32_t BREQUEST;
  volatile const uint32_t WVALUEL;
  volatile const uint32_t WVALUEH;
  volatile const uint32_t WINDEXL;
  volatile const uint32_t WINDEXH;
  volatile const uint32_t WLENGTHL;
  volatile const uint32_t WLENGTHH;
  volatile USBD_SIZE_Type SIZE;
  volatile const uint32_t RESERVED8[15];
  volatile uint32_t ENABLE;
  volatile uint32_t USBPULLUP;
  volatile uint32_t DPDMVALUE;



  volatile uint32_t DTOGGLE;
  volatile uint32_t EPINEN;
  volatile uint32_t EPOUTEN;
  volatile uint32_t EPSTALL;
  volatile uint32_t ISOSPLIT;
  volatile const uint32_t FRAMECNTR;

  volatile const uint32_t RESERVED9[2];
  volatile uint32_t LOWPOWER;

  volatile uint32_t ISOINCONFIG;


  volatile const uint32_t RESERVED10[51];
  volatile USBD_EPIN_Type EPIN[8];
  volatile USBD_ISOIN_Type ISOIN;
  volatile const uint32_t RESERVED11[21];
  volatile USBD_EPOUT_Type EPOUT[8];
  volatile USBD_ISOOUT_Type ISOOUT;
} NRF_USBD_Type;
# 2653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;
  volatile uint32_t TASKS_READSTART;

  volatile uint32_t TASKS_WRITESTART;

  volatile uint32_t TASKS_ERASESTART;
  volatile uint32_t TASKS_DEACTIVATE;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_READY;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;

  volatile QSPI_READ_Type READ;
  volatile QSPI_WRITE_Type WRITE;
  volatile QSPI_ERASE_Type ERASE;
  volatile QSPI_PSEL_Type PSEL;
  volatile uint32_t XIPOFFSET;

  volatile uint32_t IFCONFIG0;
  volatile const uint32_t RESERVED3[46];
  volatile uint32_t IFCONFIG1;
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t DPMDUR;

  volatile const uint32_t RESERVED5[3];
  volatile uint32_t ADDRCONF;
  volatile const uint32_t RESERVED6[3];
  volatile uint32_t CINSTRCONF;
  volatile uint32_t CINSTRDAT0;
  volatile uint32_t CINSTRDAT1;
  volatile uint32_t IFTIMING;
} NRF_QSPI_Type;
# 2704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[1678];
  volatile uint32_t HOST_CRYPTOKEY_SEL;
  volatile const uint32_t RESERVED1[4];
  volatile uint32_t HOST_IOT_KPRTL_LOCK;




  volatile uint32_t HOST_IOT_KDR0;




  volatile uint32_t HOST_IOT_KDR1;


  volatile uint32_t HOST_IOT_KDR2;


  volatile uint32_t HOST_IOT_KDR3;


  volatile uint32_t HOST_IOT_LCS;

} NRF_CC_HOST_RGF_Type;
# 2742 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[320];
  volatile uint32_t ENABLE;
} NRF_CRYPTOCELL_Type;
# 194 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_bitfields.h" 1
# 195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_to_nrf52840.h" 1
# 196 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_to_nrf52840.h" 1
# 197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/compiler_abstraction.h" 1
# 352 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/compiler_abstraction.h"
    static inline unsigned int gcc_current_sp(void)
    {
        unsigned int stack_pointer = 0;
        __asm__ __volatile__ ("mov %0, sp" : "=r"(stack_pointer));
        return stack_pointer;
    }
# 272 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h" 1
# 37 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils_internal.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h" 2
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h" 1
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_peripherals.h" 1
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h" 2
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h" 1
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_xxaa_memory.h" 1
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h" 2
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_ext.h" 1
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 573 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
typedef void (* nrfx_irq_handler_t)(void);


typedef enum
{
    NRFX_DRV_STATE_UNINITIALIZED,
    NRFX_DRV_STATE_INITIALIZED,
    NRFX_DRV_STATE_POWERED_ON,
} nrfx_drv_state_t;
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline 
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_in_ram(void const * p_object);
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_word_aligned(void const * p_object);
# 618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline IRQn_Type nrfx_get_irq_number(void const * p_reg);
# 634 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_bitpos_to_event(uint32_t bit);
# 650 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_event_to_bitpos(uint32_t event);



static inline 
# 654 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 654 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
}

static inline 
# 659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_word_aligned(void const * p_object)
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

static inline IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)(uint16_t)(((uint32_t)(p_reg) >> 12) & 0x000001FF);
}

static inline uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
}

static inline uint32_t nrfx_event_to_bitpos(uint32_t event)
{
    static const uint32_t event_reg_offset = 0x100u;
    return (event - event_reg_offset) / sizeof(uint32_t);
}
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h" 1
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
      void (*routine)(const void *parameter),
      const void *parameter, uint32_t flags)
{
 return arch_irq_connect_dynamic(irq, priority, routine, parameter,
     flags);
}
# 89 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline int
irq_disconnect_dynamic(unsigned int irq, unsigned int priority,
         void (*routine)(const void *parameter),
         const void *parameter, uint32_t flags)
{
 return arch_irq_disconnect_dynamic(irq, priority, routine,
        parameter, flags);
}
# 291 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline unsigned int irq_get_level(unsigned int irq)
{
 const uint32_t mask2 = ((1UL << (8)) - 1UL) <<
  8;
 const uint32_t mask3 = ((1UL << (8)) - 1UL) <<
  (8 + 8);

 if (0 && (irq & mask3) != 0) {
  return 3;
 }

 if (0 && (irq & mask2) != 0) {
  return 2;
 }

 return 1;
}
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 2
# 127 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
void nrfx_busy_wait(uint32_t usec_to_wait);
# 324 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 1






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_resources.h" 1
# 8 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_fem.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2




# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_ppi_resources.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2
# 325 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 2
# 389 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
void nrfx_isr(const void *irq_handler);
# 40 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 1
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
static inline 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_dma_accessible_check(void const * p_reg, void const * p_object);

static inline void nrf_barrier_w(void);

static inline void nrf_barrier_r(void);

static inline void nrf_barrier_rw(void);

static inline 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_event_check(void const * p_reg, uint32_t event);

static inline uint32_t nrf_task_event_address_get(void const * p_reg, uint32_t task_event);



static inline void nrf_event_readback(void * p_event_reg)
{

    (void)*((volatile uint32_t *)(p_event_reg));



}

static inline void nrf_barrier_w(void)
{



}

static inline void nrf_barrier_r(void)
{



}

static inline void nrf_barrier_rw(void)
{



}
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
static inline 
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_dma_accessible_check(void const * p_reg, void const * p_object)
{
# 276 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
    (void)p_reg;
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);

}

static inline 
# 281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_event_check(void const * p_reg, uint32_t event)
{
    return (
# 283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
           _Bool
# 283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
               )*(volatile const uint32_t *)((const uint8_t *)p_reg + (uint32_t)event);
}

static inline uint32_t nrf_task_event_address_get(void const * p_reg, uint32_t task_event)
{
    return (uint32_t)((const uint8_t *)p_reg + task_event);
}
# 41 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_common.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_errors.h" 1
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_errors.h"
typedef enum {
    NRFX_SUCCESS = (0x0BAD0000 + 0),
    NRFX_ERROR_INTERNAL = (0x0BAD0000 + 1),
    NRFX_ERROR_NO_MEM = (0x0BAD0000 + 2),
    NRFX_ERROR_NOT_SUPPORTED = (0x0BAD0000 + 3),
    NRFX_ERROR_INVALID_PARAM = (0x0BAD0000 + 4),
    NRFX_ERROR_INVALID_STATE = (0x0BAD0000 + 5),
    NRFX_ERROR_INVALID_LENGTH = (0x0BAD0000 + 6),
    NRFX_ERROR_TIMEOUT = (0x0BAD0000 + 7),
    NRFX_ERROR_FORBIDDEN = (0x0BAD0000 + 8),
    NRFX_ERROR_NULL = (0x0BAD0000 + 9),
    NRFX_ERROR_INVALID_ADDR = (0x0BAD0000 + 10),
    NRFX_ERROR_BUSY = (0x0BAD0000 + 11),
    NRFX_ERROR_ALREADY = (0x0BAD0000 + 12),
    NRFX_ERROR_ALREADY_INITIALIZED = NRFX_ERROR_ALREADY,

    NRFX_ERROR_DRV_TWI_ERR_OVERRUN = ((0x0BAD0000 + 0x10000) + 0),
    NRFX_ERROR_DRV_TWI_ERR_ANACK = ((0x0BAD0000 + 0x10000) + 1),
    NRFX_ERROR_DRV_TWI_ERR_DNACK = ((0x0BAD0000 + 0x10000) + 2)
} nrfx_err_t;
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h" 2
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h" 2
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 2
# 95 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 2
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h" 2
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h" 2
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h"
struct arm_mpu_region_attr {

 uint32_t rasr;
};

typedef struct arm_mpu_region_attr arm_mpu_region_attr_t;


typedef struct {
 uint32_t rasr_attr;
} k_mem_partition_attr_t;
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h" 2
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
struct arm_mpu_region {

 uint32_t base;

 const char *name;





 arm_mpu_region_attr_t attr;
};


struct arm_mpu_config {

 uint32_t num_regions;

 const struct arm_mpu_region *mpu_regions;
};
# 73 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
extern const struct arm_mpu_config mpu_config;
# 269 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 2
# 38 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h" 1
# 46 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
typedef int64_t k_ticks_t;
# 65 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
typedef struct {
 k_ticks_t ticks;
} k_timeout_t;
# 191 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
uint32_t sys_clock_tick_get_32(void);
# 200 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
int64_t sys_clock_tick_get(void);
# 219 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
typedef struct { uint64_t tick; } k_timepoint_t;
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
k_timepoint_t sys_timepoint_calc(k_timeout_t timeout);
# 252 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
k_timeout_t sys_timepoint_timeout(k_timepoint_t timepoint);
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
__attribute__((deprecated))
static inline uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
 k_timepoint_t tp = sys_timepoint_calc(timeout);

 return tp.tick;
}
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
static inline int sys_timepoint_cmp(k_timepoint_t a, k_timepoint_t b)
{
 if (a.tick == b.tick) {
  return 0;
 }
 return a.tick < b.tick ? -1 : 1;
}
# 327 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
static inline 
# 327 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h" 3 4
             _Bool 
# 327 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys_clock.h"
                  sys_timepoint_expired(k_timepoint_t timepoint)
{
 return ((sys_timepoint_timeout(timepoint)).ticks == (((k_timeout_t) {0})).ticks);
}
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h" 1
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
struct z_spinlock_key {
 int key;
};
# 45 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
struct k_spinlock {
# 79 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
};
# 108 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
typedef struct z_spinlock_key k_spinlock_key_t;

static inline __attribute__((always_inline)) void z_spinlock_validate_pre(struct k_spinlock *l)
{
 (void)(l);






}

static inline __attribute__((always_inline)) void z_spinlock_validate_post(struct k_spinlock *l)
{
 (void)(l);






}
# 160 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
static inline __attribute__((always_inline)) k_spinlock_key_t k_spin_lock(struct k_spinlock *l)
{
 (void)(l);
 k_spinlock_key_t k;





 k.key = arch_irq_lock();

 z_spinlock_validate_pre(l);





 z_spinlock_validate_post(l);

 return k;
}
# 196 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
static inline __attribute__((always_inline)) int k_spin_trylock(struct k_spinlock *l, k_spinlock_key_t *k)
{
 int key = arch_irq_lock();

 z_spinlock_validate_pre(l);






 z_spinlock_validate_post(l);

 k->key = key;

 return 0;
}
# 235 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
static inline __attribute__((always_inline)) void k_spin_unlock(struct k_spinlock *l,
     k_spinlock_key_t key)
{
 (void)(l);
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
 arch_irq_unlock(key.key);
}
# 283 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/spinlock.h"
static inline __attribute__((always_inline)) void k_spin_release(struct k_spinlock *l)
{
 (void)(l);






}
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal.h" 1
# 36 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal.h"
__attribute__((__noreturn__)) void k_fatal_halt(unsigned int reason);
# 67 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal.h"
void k_sys_fatal_error_handler(unsigned int reason, const z_arch_esf_t *esf);
# 83 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal.h"
void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf);
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h" 1
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h"
struct 
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h" 3 4
      __attribute__((__packed__)) 
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h"
               z_thread_stack_element {
 char data;
};
# 69 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h"
static inline char *z_stack_ptr_align(char *ptr)
{
 return (char *)(((unsigned long)(ptr) / (unsigned long)(8)) * (unsigned long)(8));
}
# 286 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread_stack.h"
static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
 return (char *)sym + ((size_t)0);
}
# 44 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h" 1
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
struct k_thread;






struct _pipe_desc {
 sys_dnode_t node;
 unsigned char *buffer;
 size_t bytes_to_xfer;
 struct k_thread *thread;
};


struct _thread_base {


 union {
  sys_dnode_t qnode_dlist;
  struct rbnode qnode_rb;
 };




 _wait_q_t *pended_on;


 uint8_t user_options;


 uint8_t thread_state;
# 91 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 union {
  struct {




   int8_t prio;
   uint8_t sched_locked;

  };
  uint16_t preempt;
 };





 uint32_t order_key;
# 132 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 void *swap_data;



 struct _timeout timeout;
# 148 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
};

typedef struct _thread_base _thread_base_t;



struct _thread_stack_info {



 uintptr_t start;
# 167 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 size_t size;





 size_t delta;
};

typedef struct _thread_stack_info _thread_stack_info_t;
# 197 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
typedef struct k_thread_runtime_stats {
# 239 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
} k_thread_runtime_stats_t;

struct z_poller {
 
# 242 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h" 3 4
_Bool 
# 242 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
     is_polling;
 uint8_t mode;
};





struct k_thread {

 struct _thread_base base;


 struct _callee_saved callee_saved;


 void *init_data;


 _wait_q_t join_queue;


 struct z_poller poller;
# 308 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 struct _thread_stack_info stack_info;
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 struct k_heap *resource_pool;



 uintptr_t tls;
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/thread.h"
 struct _thread_arch arch;
};

typedef struct k_thread _thread_t;
typedef struct k_thread *k_tid_t;
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h" 2
# 105 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
struct k_mem_domain;
struct k_mem_partition;
# 129 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
extern int k_mem_domain_init(struct k_mem_domain *domain, uint8_t num_parts,
        struct k_mem_partition *parts[]);
# 159 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
extern int k_mem_domain_add_partition(struct k_mem_domain *domain,
          struct k_mem_partition *part);
# 174 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
extern int k_mem_domain_remove_partition(struct k_mem_domain *domain,
      struct k_mem_partition *part);
# 188 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/mem_domain.h"
extern int k_mem_domain_add_thread(struct k_mem_domain *domain,
       k_tid_t thread);
# 45 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 2







struct k_thread;
struct k_mutex;
struct z_futex_data;
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
enum k_objects {
 K_OBJ_ANY,







# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/kobj-types-enum.h" 1

K_OBJ_MEM_SLAB,
K_OBJ_MSGQ,
K_OBJ_MUTEX,
K_OBJ_PIPE,
K_OBJ_QUEUE,
K_OBJ_POLL_SIGNAL,
K_OBJ_SEM,
K_OBJ_STACK,
K_OBJ_THREAD,
K_OBJ_TIMER,
K_OBJ_THREAD_STACK_ELEMENT,
K_OBJ_NET_SOCKET,
K_OBJ_NET_IF,
K_OBJ_SYS_MUTEX,
K_OBJ_FUTEX,
K_OBJ_CONDVAR,
# 43 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/kobj-types-enum.h"
K_OBJ_DRIVER_ADC,
K_OBJ_DRIVER_ENTROPY,
K_OBJ_DRIVER_FLASH,
K_OBJ_DRIVER_GPIO,
K_OBJ_DRIVER_KSCAN,
K_OBJ_DRIVER_SENSOR,
K_OBJ_DRIVER_UART,
K_OBJ_DRIVER_SPI,
K_OBJ_DRIVER_BEHAVIOR,
K_OBJ_DRIVER_EXT_POWER_API,
K_OBJ_DRIVER_ZMK_INPUT_PROCESSOR,
K_OBJ_DRIVER_CRYPTO,
K_OBJ_DRIVER_AUXDISPLAY,
K_OBJ_DRIVER_BBRAM,
K_OBJ_DRIVER_CAN,
K_OBJ_DRIVER_CHARGER,
K_OBJ_DRIVER_COREDUMP,
K_OBJ_DRIVER_COUNTER,
K_OBJ_DRIVER_DAC,
K_OBJ_DRIVER_DAI,
K_OBJ_DRIVER_DMA,
K_OBJ_DRIVER_EDAC,
K_OBJ_DRIVER_EEPROM,
K_OBJ_DRIVER_FUEL_GAUGE_EMUL,
K_OBJ_DRIVER_EMUL_SENSOR_BACKEND_API,
K_OBJ_DRIVER_ESPI,
K_OBJ_DRIVER_ESPI_SAF,
K_OBJ_DRIVER_FPGA,
K_OBJ_DRIVER_FUEL_GAUGE,
K_OBJ_DRIVER_HWSPINLOCK,
K_OBJ_DRIVER_I2C,
K_OBJ_DRIVER_I2S,
K_OBJ_DRIVER_I3C,
K_OBJ_DRIVER_IPM,
K_OBJ_DRIVER_LED,
K_OBJ_DRIVER_MBOX,
K_OBJ_DRIVER_MDIO,
K_OBJ_DRIVER_MIPI_DSI,
K_OBJ_DRIVER_PECI,
K_OBJ_DRIVER_PS2,
K_OBJ_DRIVER_PTP_CLOCK,
K_OBJ_DRIVER_PWM,
K_OBJ_DRIVER_REGULATOR_PARENT,
K_OBJ_DRIVER_REGULATOR,
K_OBJ_DRIVER_RESET,
K_OBJ_DRIVER_RETAINED_MEM,
K_OBJ_DRIVER_RTC,
K_OBJ_DRIVER_SDHC,
K_OBJ_DRIVER_SMBUS,
K_OBJ_DRIVER_SYSCON,
K_OBJ_DRIVER_W1,
K_OBJ_DRIVER_WDT,
K_OBJ_DRIVER_CAN_TRANSCEIVER,
K_OBJ_DRIVER_UART_MUX,
K_OBJ_DRIVER_ITS,
K_OBJ_DRIVER_TGPIO,
K_OBJ_DRIVER_PCIE_CTRL,
K_OBJ_DRIVER_SVC,
K_OBJ_DRIVER_BC12_EMUL,
K_OBJ_DRIVER_BC12,
K_OBJ_DRIVER_TCPC,
K_OBJ_DRIVER_IVSHMEM,
K_OBJ_DRIVER_EC_HOST_CMD_BACKEND_API,
K_OBJ_DRIVER_ETHPHY,
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 2



 K_OBJ_LAST
};
# 215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
static inline void z_object_init(const void *obj)
{
 (void)(obj);
}




static inline void z_impl_k_object_access_grant(const void *object,
      struct k_thread *thread)
{
 (void)(object);
 (void)(thread);
}




static inline void k_object_access_revoke(const void *object,
       struct k_thread *thread)
{
 (void)(object);
 (void)(thread);
}




static inline void z_impl_k_object_release(const void *object)
{
 (void)(object);
}

static inline void k_object_access_all_grant(const void *object)
{
 (void)(object);
}

static inline 
# 253 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
             _Bool 
# 253 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
                  k_object_is_valid(const void *obj, enum k_objects otype)
{
 (void)(obj);
 (void)(otype);

 return 
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
       1
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
           ;
}
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
static inline void *z_impl_k_object_alloc(enum k_objects otype)
{
 (void)(otype);

 return 
# 363 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
       ((void *)0)
# 363 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
           ;
}

static inline void *z_impl_k_object_alloc_size(enum k_objects otype,
     size_t size)
{
 (void)(otype);
 (void)(size);

 return 
# 372 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
       ((void *)0)
# 372 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
           ;
}

static inline struct z_object *z_dynamic_object_aligned_create(size_t align,
              size_t size)
{
 (void)(align);
 (void)(size);

 return 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
       ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
           ;
}

static inline struct z_object *z_dynamic_object_create(size_t size)
{
 (void)(size);

 return 
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 3 4
       ((void *)0)
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h"
           ;
}






static inline void k_object_free(void *obj)
{
 (void)(obj);
}





# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
extern void z_impl_k_object_access_grant(const void * object, struct k_thread * thread);


static inline void k_object_access_grant(const void * object, struct k_thread * thread)
{
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 36 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
);
 z_impl_k_object_access_grant(object, thread);
}
# 48 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
extern void z_impl_k_object_release(const void * object);


static inline void k_object_release(const void * object)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
);
 z_impl_k_object_release(object);
}
# 72 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
extern void * z_impl_k_object_alloc(enum k_objects otype);


static inline void * k_object_alloc(enum k_objects otype)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 83 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 83 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
);
 return z_impl_k_object_alloc(otype);
}
# 95 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
extern void * z_impl_k_object_alloc_size(enum k_objects otype, size_t size);


static inline void * k_object_alloc_size(enum k_objects otype, size_t size)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 107 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 107 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kobject.h"
);
 return z_impl_k_object_alloc_size(otype, size);
}
# 406 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/kobject.h" 2
# 46 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/smp.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/smp.h"
struct k_thread;
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/smp.h"
void z_init_cpu(int id);
void z_sched_ipi(void);
void z_smp_start_cpu(int id);
# 49 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_includes.h" 2
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 2

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 1 3 4
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing_macros.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 2
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
_Static_assert(sizeof(int32_t) == sizeof(int), "" );
_Static_assert(sizeof(int64_t) == sizeof(long long), "" );
_Static_assert(sizeof(intptr_t) == sizeof(long), "" );
# 69 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_thread;
struct k_mutex;
struct k_sem;
struct k_msgq;
struct k_mbox;
struct k_pipe;
struct k_queue;
struct k_fifo;
struct k_lifo;
struct k_stack;
struct k_mem_slab;
struct k_timer;
struct k_poll_event;
struct k_poll_signal;
struct k_mem_domain;
struct k_mem_partition;
struct k_futex;
struct k_event;

enum execution_context_types {
 K_ISR = 0,
 K_COOP_THREAD,
 K_PREEMPT_THREAD,
};


struct k_work_poll;
typedef int (*_poller_cb_t)(struct k_poll_event *event, uint32_t state);






typedef void (*k_thread_user_cb_t)(const struct k_thread *thread,
       void *user_data);
# 121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data);
# 150 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_thread_foreach_unlocked(
 k_thread_user_cb_t user_cb, void *user_data);
# 282 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_thread_stack_t *k_thread_stack_alloc(size_t size, int flags);
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_thread_stack_free(k_thread_stack_t *stack);
# 346 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_tid_t k_thread_create(struct k_thread *new_thread,
      k_thread_stack_t *stack,
      size_t stack_size,
      k_thread_entry_t entry,
      void *p1, void *p2, void *p3,
      int prio, uint32_t options, k_timeout_t delay);
# 374 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern __attribute__((__noreturn__)) void k_thread_user_mode_enter(k_thread_entry_t entry,
         void *p1, void *p2,
         void *p3);
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_heap_assign(struct k_thread *thread,
     struct k_heap *heap)
{
 thread->resource_pool = heap;
}
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_thread_join(struct k_thread *thread, k_timeout_t timeout);
# 489 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_sleep(k_timeout_t timeout);
# 501 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_msleep(int32_t ms)
{
 return k_sleep(((k_timeout_t) { .ticks = ((k_ticks_t)((
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               1
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? ( ((32768) == (1000)) ? (uint64_t) ((((ms) > (0)) ? (ms) : (0))) : ((1000) > (32768) && (1000) % (32768) == 0U) ? (((uint64_t) ((((ms) > (0)) ? (ms) : (0))) + ((
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               0
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? ((1000) / (32768)) / 2 : (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               1
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? ((1000) / (32768)) - 1 : 0)) / ((1000) / (32768))) : ((32768) > (1000) && (32768) % (1000) == 0U) ? (uint64_t) ((((ms) > (0)) ? (ms) : (0)))*((32768) / (1000)) : ((((((365 * 24ULL * 3600ULL * 1000) + (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               (0xffffffffUL)
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) - 1) / (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               (0xffffffffUL)
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               )) * 32768) <= 
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               (0xffffffffUL)
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (((uint64_t) ((((ms) > (0)) ? (ms) : (0)))*(32768) + ((
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               0
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) / 2 : (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               1
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) - 1 : 0)) / (1000)) : (((uint64_t) ((((ms) > (0)) ? (ms) : (0))) / (1000))*(32768) + (((uint64_t) ((((ms) > (0)) ? (ms) : (0))) % (1000))*(32768) + ((
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               0
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) / 2 : (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               1
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) - 1 : 0)) / (1000))) ) : (((uint64_t) ((((ms) > (0)) ? (ms) : (0))) / (1000))*(32768) + (((uint64_t) ((((ms) > (0)) ? (ms) : (0))) % (1000))*(32768) + ((
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               0
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) / 2 : (
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
               1
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
               ) ? (1000) - 1 : 0)) / (1000)) )) }));
}
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_usleep(int32_t us);
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_busy_wait(uint32_t usec_to_wait);
# 552 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 552 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 552 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_can_yield(void);
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_yield(void);
# 572 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_wakeup(k_tid_t thread);
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
__attribute__((__const__))
static inline k_tid_t k_sched_current_thread_query(void);







__attribute__((__const__))
static inline k_tid_t k_current_get(void)
{


 extern __thread k_tid_t z_tls_current;

 return z_tls_current;



}
# 632 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_abort(k_tid_t thread);
# 644 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_start(k_tid_t thread);

extern k_ticks_t z_timeout_expires(const struct _timeout *timeout);
extern k_ticks_t z_timeout_remaining(const struct _timeout *timeout);
# 658 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_thread_timeout_expires_ticks(const struct k_thread *t);

static inline k_ticks_t z_impl_k_thread_timeout_expires_ticks(
      const struct k_thread *t)
{
 return z_timeout_expires(&t->base.timeout);
}
# 673 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_thread_timeout_remaining_ticks(const struct k_thread *t);

static inline k_ticks_t z_impl_k_thread_timeout_remaining_ticks(
      const struct k_thread *t)
{
 return z_timeout_remaining(&t->base.timeout);
}







struct _static_thread_data {
 struct k_thread *init_thread;
 k_thread_stack_t *init_stack;
 unsigned int init_stack_size;
 k_thread_entry_t init_entry;
 void *init_p1;
 void *init_p2;
 void *init_p3;
 int init_prio;
 uint32_t init_options;
 const char *init_name;



 k_timeout_t init_delay;

};
# 834 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_thread_priority_get(k_tid_t thread);
# 861 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_priority_set(k_tid_t thread, int prio);
# 985 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_suspend(k_tid_t thread);
# 997 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_resume(k_tid_t thread);
# 1025 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_sched_time_slice_set(int32_t slice, int prio);
# 1065 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_thread_time_slice_set(struct k_thread *th, int32_t slice_ticks,
        k_thread_timeslice_fn_t expired, void *data);
# 1086 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern 
# 1086 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
      _Bool 
# 1086 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
           k_is_in_isr(void);
# 1104 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_is_preempt_thread(void);
# 1117 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline 
# 1117 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 1117 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_is_pre_kernel(void)
{
 extern 
# 1119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       _Bool 
# 1119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
            z_sys_post_kernel;

 return !z_sys_post_kernel;
}
# 1158 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_sched_lock(void);
# 1167 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_sched_unlock(void);
# 1181 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_thread_custom_data_set(void *value);
# 1190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void *k_thread_custom_data_get(void);
# 1205 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_thread_name_set(k_tid_t thread, const char *str);
# 1215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
const char *k_thread_name_get(k_tid_t thread);
# 1228 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_thread_name_copy(k_tid_t thread, char *buf,
     size_t size);
# 1243 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size);
# 1455 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_timer {





 struct _timeout timeout;


 _wait_q_t wait_q;


 void (*expiry_fn)(struct k_timer *timer);


 void (*stop_fn)(struct k_timer *timer);


 k_timeout_t period;


 uint32_t status;


 void *user_data;






};
# 1522 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
typedef void (*k_timer_expiry_t)(struct k_timer *timer);
# 1538 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
typedef void (*k_timer_stop_t)(struct k_timer *timer);
# 1564 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_timer_init(struct k_timer *timer,
    k_timer_expiry_t expiry_fn,
    k_timer_stop_t stop_fn);
# 1582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_timer_start(struct k_timer *timer,
        k_timeout_t duration, k_timeout_t period);
# 1601 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_timer_stop(struct k_timer *timer);
# 1615 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_timer_status_get(struct k_timer *timer);
# 1634 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_timer_status_sync(struct k_timer *timer);
# 1648 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_timer_expires_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_expires_ticks(
           const struct k_timer *timer)
{
 return z_timeout_expires(&timer->timeout);
}
# 1663 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
           const struct k_timer *timer)
{
 return z_timeout_remaining(&timer->timeout);
}
# 1681 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
{
 return ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       1
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ( ((1000) == (32768)) ? (uint32_t) (k_timer_remaining_ticks(timer)) : ((32768) > (1000) && (32768) % (1000) == 0U) ? ((uint64_t) (k_timer_remaining_ticks(timer)) <= 0xffffffffU - ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) / 2 : (
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) - 1 : 0) ? ((uint32_t)((k_timer_remaining_ticks(timer)) + ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) / 2 : (
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) - 1 : 0)) / ((32768) / (1000))) : (uint32_t) (((uint64_t) (k_timer_remaining_ticks(timer)) + ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) / 2 : (
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) - 1 : 0)) / ((32768) / (1000))) ) : ((1000) > (32768) && (1000) % (32768) == 0U) ? (uint32_t) (k_timer_remaining_ticks(timer))*((1000) / (32768)) : ((uint32_t) (((uint64_t) (k_timer_remaining_ticks(timer))*(1000) + ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) / 2 : (
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) - 1 : 0)) / (32768))) ) : ((uint32_t) (((uint64_t) (k_timer_remaining_ticks(timer))*(1000) + ((
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) / 2 : (
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1683 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) - 1 : 0)) / (32768))) );
}
# 1700 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_timer_user_data_set(struct k_timer *timer, void *user_data);




static inline void z_impl_k_timer_user_data_set(struct k_timer *timer,
            void *user_data)
{
 timer->user_data = user_data;
}
# 1718 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void *k_timer_user_data_get(const struct k_timer *timer);

static inline void *z_impl_k_timer_user_data_get(const struct k_timer *timer)
{
 return timer->user_data;
}
# 1742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int64_t k_uptime_ticks(void);
# 1757 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int64_t k_uptime_get(void)
{
 return ((
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       1
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ( ((1000) == (32768)) ? (uint64_t) (k_uptime_ticks()) : ((32768) > (1000) && (32768) % (1000) == 0U) ? (((uint64_t) (k_uptime_ticks()) + ((
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) / 2 : (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? ((32768) / (1000)) - 1 : 0)) / ((32768) / (1000))) : ((1000) > (32768) && (1000) % (32768) == 0U) ? (uint64_t) (k_uptime_ticks())*((1000) / (32768)) : ((((((365 * 24ULL * 3600ULL * 32768) + (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       (0xffffffffUL)
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) - 1) / (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       (0xffffffffUL)
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       )) * 1000) <= 
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       (0xffffffffUL)
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (((uint64_t) (k_uptime_ticks())*(1000) + ((
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) / 2 : (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) - 1 : 0)) / (32768)) : (((uint64_t) (k_uptime_ticks()) / (32768))*(1000) + (((uint64_t) (k_uptime_ticks()) % (32768))*(1000) + ((
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) / 2 : (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) - 1 : 0)) / (32768))) ) : (((uint64_t) (k_uptime_ticks()) / (32768))*(1000) + (((uint64_t) (k_uptime_ticks()) % (32768))*(1000) + ((
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) / 2 : (
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       0
# 1759 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       ) ? (32768) - 1 : 0)) / (32768)) );
}
# 1781 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_uptime_get_32(void)
{
 return (uint32_t)k_uptime_get();
}
# 1797 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int64_t k_uptime_delta(int64_t *reftime)
{
 int64_t uptime, delta;

 uptime = k_uptime_get();
 delta = uptime - *reftime;
 *reftime = uptime;

 return delta;
}
# 1816 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_cycle_get_32(void)
{
 return arch_k_cycle_get_32();
}
# 1831 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint64_t k_cycle_get_64(void)
{
 if (!0) {
  { }
                                                  ;
  return 0;
 }

 return arch_k_cycle_get_64();
}





struct k_queue {
 sys_sflist_t data_q;
 struct k_spinlock lock;
 _wait_q_t wait_q;

 sys_dlist_t poll_events;


};
# 1885 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_queue_init(struct k_queue *queue);
# 1900 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_queue_cancel_wait(struct k_queue *queue);
# 1914 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_queue_append(struct k_queue *queue, void *data);
# 1932 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_queue_alloc_append(struct k_queue *queue, void *data);
# 1946 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_queue_prepend(struct k_queue *queue, void *data);
# 1964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_queue_alloc_prepend(struct k_queue *queue, void *data);
# 1979 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_queue_insert(struct k_queue *queue, void *prev, void *data);
# 1999 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_queue_append_list(struct k_queue *queue, void *head, void *tail);
# 2016 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_queue_merge_slist(struct k_queue *queue, sys_slist_t *list);
# 2036 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void *k_queue_get(struct k_queue *queue, k_timeout_t timeout);
# 2054 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 2054 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 2054 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_queue_remove(struct k_queue *queue, void *data);
# 2070 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 2070 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 2070 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_queue_unique_append(struct k_queue *queue, void *data);
# 2085 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_queue_is_empty(struct k_queue *queue);

static inline int z_impl_k_queue_is_empty(struct k_queue *queue)
{
 return (int)sys_sflist_is_empty(&queue->data_q);
}
# 2101 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void *k_queue_peek_head(struct k_queue *queue);
# 2112 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void *k_queue_peek_tail(struct k_queue *queue);
# 2218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_event {
 _wait_q_t wait_q;
 uint32_t events;
 struct k_spinlock lock;







};
# 2244 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_event_init(struct k_event *event);
# 2261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_post(struct k_event *event, uint32_t events);
# 2278 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_set(struct k_event *event, uint32_t events);
# 2294 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_set_masked(struct k_event *event, uint32_t events,
      uint32_t events_mask);
# 2307 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_clear(struct k_event *event, uint32_t events);
# 2330 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_wait(struct k_event *event, uint32_t events,
    
# 2331 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
   _Bool 
# 2331 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
        reset, k_timeout_t timeout);
# 2354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_wait_all(struct k_event *event, uint32_t events,
        
# 2355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       _Bool 
# 2355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
            reset, k_timeout_t timeout);
# 2365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_event_test(struct k_event *event, uint32_t events_mask)
{
 return k_event_wait(event, events_mask, 
# 2367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
                                        0
# 2367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                                             , ((k_timeout_t) {0}));
}
# 2385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_fifo {
 struct k_queue _queue;



};
# 2624 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_lifo {
 struct k_queue _queue;



};
# 2754 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
typedef uintptr_t stack_data_t;

struct k_stack {
 _wait_q_t wait_q;
 struct k_spinlock lock;
 stack_data_t *base, *next, *top;

 uint8_t flags;






};
# 2797 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_stack_init(struct k_stack *stack,
    stack_data_t *buffer, uint32_t num_entries);
# 2815 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int32_t k_stack_alloc_init(struct k_stack *stack,
       uint32_t num_entries);
# 2829 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_stack_cleanup(struct k_stack *stack);
# 2844 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_stack_push(struct k_stack *stack, stack_data_t data);
# 2866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_stack_pop(struct k_stack *stack, stack_data_t *data,
     k_timeout_t timeout);
# 2892 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_work;
struct k_work_q;
struct k_work_queue_config;
extern struct k_work_q k_sys_work_q;
# 2911 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_mutex {

 _wait_q_t wait_q;

 struct k_thread *owner;


 uint32_t lock_count;


 int owner_orig_prio;






};
# 2970 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_mutex_init(struct k_mutex *mutex);
# 2994 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout);
# 3016 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_mutex_unlock(struct k_mutex *mutex);






struct k_condvar {
 _wait_q_t wait_q;




};
# 3048 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_condvar_init(struct k_condvar *condvar);







static inline int k_condvar_signal(struct k_condvar *condvar);
# 3065 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_condvar_broadcast(struct k_condvar *condvar);
# 3084 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_condvar_wait(struct k_condvar *condvar, struct k_mutex *mutex,
        k_timeout_t timeout);
# 3108 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_sem {
 _wait_q_t wait_q;
 unsigned int count;
 unsigned int limit;

 sys_dlist_t poll_events;






};
# 3165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_sem_init(struct k_sem *sem, unsigned int initial_count,
     unsigned int limit);
# 3186 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_sem_take(struct k_sem *sem, k_timeout_t timeout);
# 3198 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_sem_give(struct k_sem *sem);
# 3209 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_sem_reset(struct k_sem *sem);
# 3220 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline unsigned int k_sem_count_get(struct k_sem *sem);




static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
 return sem->count;
}
# 3254 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_work_delayable;
struct k_work_sync;
# 3273 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
typedef void (*k_work_handler_t)(struct k_work *work);
# 3288 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_work_init(struct k_work *work,
    k_work_handler_t handler);
# 3305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_busy_get(const struct k_work *work);
# 3320 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline 
# 3320 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 3320 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_work_is_pending(const struct k_work *work);
# 3342 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_submit_to_queue(struct k_work_q *queue,
      struct k_work *work);
# 3353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_submit(struct k_work *work);
# 3379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 3379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 3379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_work_flush(struct k_work *work,
    struct k_work_sync *sync);
# 3401 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_cancel(struct k_work *work);
# 3433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 3433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 3433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_work_cancel_sync(struct k_work *work, struct k_work_sync *sync);
# 3444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_work_queue_init(struct k_work_q *queue);
# 3465 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_work_queue_start(struct k_work_q *queue,
   k_thread_stack_t *stack, size_t stack_size,
   int prio, const struct k_work_queue_config *cfg);
# 3478 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_tid_t k_work_queue_thread_get(struct k_work_q *queue);
# 3503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_queue_drain(struct k_work_q *queue, 
# 3503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
                                              _Bool 
# 3503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                                                   plug);
# 3518 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_queue_unplug(struct k_work_q *queue);
# 3533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_work_init_delayable(struct k_work_delayable *dwork,
      k_work_handler_t handler);
# 3547 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline struct k_work_delayable *
k_work_delayable_from_work(struct k_work *work);
# 3563 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_delayable_busy_get(const struct k_work_delayable *dwork);
# 3579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline 
# 3579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 3579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_work_delayable_is_pending(
 const struct k_work_delayable *dwork);
# 3595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_work_delayable_expires_get(
 const struct k_work_delayable *dwork);
# 3611 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_ticks_t k_work_delayable_remaining_get(
 const struct k_work_delayable *dwork);
# 3639 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_schedule_for_queue(struct k_work_q *queue,
          struct k_work_delayable *dwork,
          k_timeout_t delay);
# 3656 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_schedule(struct k_work_delayable *dwork,
       k_timeout_t delay);
# 3694 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_reschedule_for_queue(struct k_work_q *queue,
     struct k_work_delayable *dwork,
     k_timeout_t delay);
# 3710 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_reschedule(struct k_work_delayable *dwork,
         k_timeout_t delay);
# 3737 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 3737 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 3737 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_work_flush_delayable(struct k_work_delayable *dwork,
       struct k_work_sync *sync);
# 3760 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_work_cancel_delayable(struct k_work_delayable *dwork);
# 3790 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"

# 3790 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 3790 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
    k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
      struct k_work_sync *sync);

enum {
# 3805 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
 K_WORK_RUNNING_BIT = 0,
 K_WORK_CANCELING_BIT = 1,
 K_WORK_QUEUED_BIT = 2,
 K_WORK_DELAYED_BIT = 3,

 K_WORK_MASK = (1UL << (K_WORK_DELAYED_BIT)) | (1UL << (K_WORK_QUEUED_BIT))
  | (1UL << (K_WORK_RUNNING_BIT)) | (1UL << (K_WORK_CANCELING_BIT)),


 K_WORK_DELAYABLE_BIT = 8,
 K_WORK_DELAYABLE = (1UL << (K_WORK_DELAYABLE_BIT)),


 K_WORK_QUEUE_STARTED_BIT = 0,
 K_WORK_QUEUE_STARTED = (1UL << (K_WORK_QUEUE_STARTED_BIT)),
 K_WORK_QUEUE_BUSY_BIT = 1,
 K_WORK_QUEUE_BUSY = (1UL << (K_WORK_QUEUE_BUSY_BIT)),
 K_WORK_QUEUE_DRAIN_BIT = 2,
 K_WORK_QUEUE_DRAIN = (1UL << (K_WORK_QUEUE_DRAIN_BIT)),
 K_WORK_QUEUE_PLUGGED_BIT = 3,
 K_WORK_QUEUE_PLUGGED = (1UL << (K_WORK_QUEUE_PLUGGED_BIT)),


 K_WORK_QUEUE_NO_YIELD_BIT = 8,
 K_WORK_QUEUE_NO_YIELD = (1UL << (K_WORK_QUEUE_NO_YIELD_BIT)),
# 3841 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
 K_WORK_RUNNING = (1UL << (K_WORK_RUNNING_BIT)),





 K_WORK_CANCELING = (1UL << (K_WORK_CANCELING_BIT)),






 K_WORK_QUEUED = (1UL << (K_WORK_QUEUED_BIT)),






 K_WORK_DELAYED = (1UL << (K_WORK_DELAYED_BIT)),
};


struct k_work {





 sys_snode_t node;


 k_work_handler_t handler;


 struct k_work_q *queue;







 uint32_t flags;
};






struct k_work_delayable {

 struct k_work work;


 struct _timeout timeout;


 struct k_work_q *queue;
};
# 3942 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct z_work_flusher {
 struct k_work work;
 struct k_sem sem;
};







struct z_work_canceller {
 sys_snode_t node;
 struct k_work *work;
 struct k_sem sem;
};
# 3976 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_work_sync {
 union {
  struct z_work_flusher flusher;
  struct z_work_canceller canceller;
 };
};







struct k_work_queue_config {




 const char *name;
# 4008 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
 
# 4008 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
_Bool 
# 4008 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
     no_yield;
};


struct k_work_q {

 struct k_thread thread;






 sys_slist_t pending;


 _wait_q_t notifyq;


 _wait_q_t drainq;


 uint32_t flags;
};



static inline 
# 4035 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 4035 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_work_is_pending(const struct k_work *work)
{
 return k_work_busy_get(work) != 0;
}

static inline struct k_work_delayable *
k_work_delayable_from_work(struct k_work *work)
{
 return ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(work)), __typeof__(((struct k_work_delayable *)0)->work)) || __builtin_types_compatible_p(__typeof__(*(work)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct k_work_delayable *)(((char *)(work)) - 
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       __builtin_offsetof (
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       struct k_work_delayable
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       , 
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       work
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
       )
# 4043 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
       )); });
}

static inline 
# 4046 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 4046 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_work_delayable_is_pending(
 const struct k_work_delayable *dwork)
{
 return k_work_delayable_busy_get(dwork) != 0;
}

static inline k_ticks_t k_work_delayable_expires_get(
 const struct k_work_delayable *dwork)
{
 return z_timeout_expires(&dwork->timeout);
}

static inline k_ticks_t k_work_delayable_remaining_get(
 const struct k_work_delayable *dwork)
{
 return z_timeout_remaining(&dwork->timeout);
}

static inline k_tid_t k_work_queue_thread_get(struct k_work_q *queue)
{
 return &queue->thread;
}



struct k_work_user;
# 4087 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
typedef void (*k_work_user_handler_t)(struct k_work_user *work);





struct k_work_user_q {
 struct k_queue queue;
 struct k_thread thread;
};

enum {
 K_WORK_USER_STATE_PENDING,
};

struct k_work_user {
 void *_reserved;
 k_work_user_handler_t handler;
 atomic_t flags;
};
# 4146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_work_user_init(struct k_work_user *work,
        k_work_user_handler_t handler)
{
 *work = (struct k_work_user){ ._reserved = 
# 4149 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
                            ((void *)0)
# 4149 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                            , .handler = handler, .flags = 0 };
}
# 4168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline 
# 4168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
             _Bool 
# 4168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                  k_work_user_is_pending(struct k_work_user *work)
{
 return atomic_test_bit(&work->flags, K_WORK_USER_STATE_PENDING);
}
# 4191 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_work_user_submit_to_queue(struct k_work_user_q *work_q,
           struct k_work_user *work)
{
 int ret = -
# 4194 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 3 4
           16
# 4194 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
                ;

 if (!atomic_test_and_set_bit(&work->flags,
         K_WORK_USER_STATE_PENDING)) {
  ret = k_queue_alloc_append(&work_q->queue, work);




  if (ret != 0) {
   atomic_clear_bit(&work->flags,
      K_WORK_USER_STATE_PENDING);
  }
 }

 return ret;
}
# 4231 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_work_user_queue_start(struct k_work_user_q *work_q,
        k_thread_stack_t *stack,
        size_t stack_size, int prio,
        const char *name);
# 4246 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline k_tid_t k_work_user_queue_thread_get(struct k_work_user_q *work_q)
{
 return &work_q->thread;
}







struct k_work_poll {
 struct k_work work;
 struct k_work_q *workq;
 struct z_poller poller;
 struct k_poll_event *events;
 int num_events;
 k_work_handler_t real_handler;
 struct _timeout timeout;
 int poll_result;
};
# 4300 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_work_poll_init(struct k_work_poll *work,
        k_work_handler_t handler);
# 4337 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_poll_submit_to_queue(struct k_work_q *work_q,
           struct k_work_poll *work,
           struct k_poll_event *events,
           int num_events,
           k_timeout_t timeout);
# 4374 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_poll_submit(struct k_work_poll *work,
         struct k_poll_event *events,
         int num_events,
         k_timeout_t timeout);
# 4393 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_work_poll_cancel(struct k_work_poll *work);
# 4406 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_msgq {

 _wait_q_t wait_q;

 struct k_spinlock lock;

 size_t msg_size;

 uint32_t max_msgs;

 char *buffer_start;

 char *buffer_end;

 char *read_ptr;

 char *write_ptr;

 uint32_t used_msgs;

 sys_dlist_t poll_events;


 uint8_t flags;






};
# 4465 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_msgq_attrs {

 size_t msg_size;

 uint32_t max_msgs;

 uint32_t used_msgs;
};
# 4514 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_msgq_init(struct k_msgq *msgq, char *buffer, size_t msg_size,
   uint32_t max_msgs);
# 4536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_msgq_alloc_init(struct k_msgq *msgq, size_t msg_size,
    uint32_t max_msgs);
# 4549 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_msgq_cleanup(struct k_msgq *msgq);
# 4572 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout);
# 4594 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout);
# 4610 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_msgq_peek(struct k_msgq *msgq, void *data);
# 4628 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_msgq_peek_at(struct k_msgq *msgq, void *data, uint32_t idx);
# 4639 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_msgq_purge(struct k_msgq *msgq);
# 4651 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_msgq_num_free_get(struct k_msgq *msgq);
# 4661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_msgq_get_attrs(struct k_msgq *msgq,
     struct k_msgq_attrs *attrs);


static inline uint32_t z_impl_k_msgq_num_free_get(struct k_msgq *msgq)
{
 return msgq->max_msgs - msgq->used_msgs;
}
# 4679 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
 return msgq->used_msgs;
}
# 4698 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_mbox_msg {

 uint32_t _mailbox;

 size_t size;

 uint32_t info;

 void *tx_data;

 k_tid_t rx_source_thread;

 k_tid_t tx_target_thread;

 k_tid_t _syncing_thread;


 struct k_sem *_async_sem;

};




struct k_mbox {

 _wait_q_t tx_msg_queue;

 _wait_q_t rx_msg_queue;
 struct k_spinlock lock;






};
# 4769 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_mbox_init(struct k_mbox *mbox);
# 4790 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_mbox_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
        k_timeout_t timeout);
# 4806 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_mbox_async_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
        struct k_sem *sem);
# 4826 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_mbox_get(struct k_mbox *mbox, struct k_mbox_msg *rx_msg,
        void *buffer, k_timeout_t timeout);
# 4842 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_mbox_data_get(struct k_mbox_msg *rx_msg, void *buffer);
# 4853 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_pipe {
 unsigned char *buffer;
 size_t size;
 size_t bytes_used;
 size_t read_index;
 size_t write_index;
 struct k_spinlock lock;

 struct {
  _wait_q_t readers;
  _wait_q_t writers;
 } wait_q;

 sys_dlist_t poll_events;

 uint8_t flags;






};
# 4932 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_pipe_init(struct k_pipe *pipe, unsigned char *buffer, size_t size);
# 4945 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_pipe_cleanup(struct k_pipe *pipe);
# 4962 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_pipe_alloc_init(struct k_pipe *pipe, size_t size);
# 4982 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_pipe_put(struct k_pipe *pipe, void *data,
    size_t bytes_to_write, size_t *bytes_written,
    size_t min_xfer, k_timeout_t timeout);
# 5005 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_pipe_get(struct k_pipe *pipe, void *data,
    size_t bytes_to_read, size_t *bytes_read,
    size_t min_xfer, k_timeout_t timeout);
# 5017 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline size_t k_pipe_read_avail(struct k_pipe *pipe);
# 5027 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline size_t k_pipe_write_avail(struct k_pipe *pipe);
# 5039 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_pipe_flush(struct k_pipe *pipe);
# 5052 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_pipe_buffer_flush(struct k_pipe *pipe);







struct k_mem_slab_info {
 uint32_t num_blocks;
 size_t block_size;
 uint32_t num_used;



};

struct k_mem_slab {
 _wait_q_t wait_q;
 struct k_spinlock lock;
 char *buffer;
 char *free_list;
 struct k_mem_slab_info info;






};
# 5178 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
      size_t block_size, uint32_t num_blocks);
# 5203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem,
       k_timeout_t timeout);
# 5215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_mem_slab_free(struct k_mem_slab *slab, void *mem);
# 5227 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_mem_slab_num_used_get(struct k_mem_slab *slab)
{
 return slab->info.num_used;
}
# 5242 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_mem_slab_max_used_get(struct k_mem_slab *slab)
{



 (void)(slab);
 return 0;

}
# 5262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
 return slab->info.num_blocks - slab->info.num_used;
}
# 5279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_mem_slab_runtime_stats_get(struct k_mem_slab *slab, struct sys_memory_stats *stats);
# 5292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_mem_slab_runtime_stats_reset_max(struct k_mem_slab *slab);
# 5303 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_heap {
 struct sys_heap heap;
 _wait_q_t wait_q;
 struct k_spinlock lock;
};
# 5322 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_heap_init(struct k_heap *h, void *mem, size_t bytes);
# 5343 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
   k_timeout_t timeout);
# 5367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void *k_heap_alloc(struct k_heap *h, size_t bytes,
     k_timeout_t timeout);
# 5380 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
void k_heap_free(struct k_heap *h, void *mem);
# 5477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void *k_aligned_alloc(size_t align, size_t size);
# 5490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void *k_malloc(size_t size);
# 5502 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_free(void *ptr);
# 5515 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void *k_calloc(size_t nmemb, size_t size);
# 5528 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
enum _poll_types_bits {

 _POLL_TYPE_IGNORE,


 _POLL_TYPE_SIGNAL,


 _POLL_TYPE_SEM_AVAILABLE,


 _POLL_TYPE_DATA_AVAILABLE,


 _POLL_TYPE_MSGQ_DATA_AVAILABLE,


 _POLL_TYPE_PIPE_DATA_AVAILABLE,

 _POLL_NUM_TYPES
};




enum _poll_states_bits {

 _POLL_STATE_NOT_READY,


 _POLL_STATE_SIGNALED,


 _POLL_STATE_SEM_AVAILABLE,


 _POLL_STATE_DATA_AVAILABLE,


 _POLL_STATE_CANCELLED,


 _POLL_STATE_MSGQ_DATA_AVAILABLE,


 _POLL_STATE_PIPE_DATA_AVAILABLE,

 _POLL_NUM_STATES
};
# 5609 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
enum k_poll_modes {

 K_POLL_MODE_NOTIFY_ONLY = 0,

 K_POLL_NUM_MODES
};
# 5627 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_poll_signal {

 sys_dlist_t poll_events;





 unsigned int signaled;


 int result;
};
# 5651 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
struct k_poll_event {

 sys_dnode_t _node;


 struct z_poller *poller;


 uint32_t tag:8;


 uint32_t type:_POLL_NUM_TYPES;


 uint32_t state:_POLL_NUM_STATES;


 uint32_t mode:1;


 uint32_t unused:(32 - (0 + 8 + _POLL_NUM_TYPES + _POLL_NUM_STATES + 1 ));


 union {
  void *obj;
  struct k_poll_signal *signal;
  struct k_sem *sem;
  struct k_fifo *fifo;
  struct k_queue *queue;
  struct k_msgq *msgq;



 };
};
# 5727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_poll_event_init(struct k_poll_event *event, uint32_t type,
         int mode, void *obj);
# 5773 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_poll(struct k_poll_event *events, int num_events,
       k_timeout_t timeout);
# 5784 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_poll_signal_init(struct k_poll_signal *sig);






static inline void k_poll_signal_reset(struct k_poll_signal *sig);
# 5803 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_poll_signal_check(struct k_poll_signal *sig,
       unsigned int *signaled, int *result);
# 5830 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_poll_signal_raise(struct k_poll_signal *sig, int result);
# 5852 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_cpu_idle(void)
{
 arch_cpu_idle();
}
# 5871 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_cpu_atomic_idle(unsigned int key)
{
 arch_cpu_atomic_idle(key);
}
# 5950 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void z_init_static_threads(void);
# 5961 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void z_timer_expiration_handler(struct _timeout *t);
# 5974 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline void k_str_out(char *c, size_t n);
# 5997 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_float_disable(struct k_thread *thread);
# 6037 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
static inline int k_float_enable(struct k_thread *thread, unsigned int options);
# 6046 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
int k_thread_runtime_stats_get(k_tid_t thread,
          k_thread_runtime_stats_t *stats);







int k_thread_runtime_stats_all_get(k_thread_runtime_stats_t *stats);
# 6066 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_thread_runtime_stats_enable(k_tid_t thread);
# 6077 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern int k_thread_runtime_stats_disable(k_tid_t thread);
# 6086 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_sys_runtime_stats_enable(void);
# 6095 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h"
extern void k_sys_runtime_stats_disable(void);





# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracking.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing.h" 2
# 2001 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing.h"
void sys_trace_isr_enter(void);




void sys_trace_isr_exit(void);




void sys_trace_isr_exit_to_scheduler(void);




void sys_trace_idle(void);
# 6102 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
extern k_thread_stack_t * z_impl_k_thread_stack_alloc(size_t size, int flags);


static inline k_thread_stack_t * k_thread_stack_alloc(size_t size, int flags)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_stack_alloc(size, flags);
}


extern int z_impl_k_thread_stack_free(k_thread_stack_t * stack);


static inline int k_thread_stack_free(k_thread_stack_t * stack)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 51 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 51 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_stack_free(stack);
}


extern k_tid_t z_impl_k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay);


static inline k_tid_t k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay)
{
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
}


extern int z_impl_k_thread_stack_space_get(const struct k_thread * thread, size_t * unused_ptr);


static inline int k_thread_stack_space_get(const struct k_thread * thread, size_t * unused_ptr)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 101 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 101 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_stack_space_get(thread, unused_ptr);
}


extern int z_impl_k_thread_join(struct k_thread * thread, k_timeout_t timeout);


static inline int k_thread_join(struct k_thread * thread, k_timeout_t timeout)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 118 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 118 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_join(thread, timeout);
}


extern int32_t z_impl_k_sleep(k_timeout_t timeout);


static inline int32_t k_sleep(k_timeout_t timeout)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 134 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 134 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sleep(timeout);
}


extern int32_t z_impl_k_usleep(int32_t us);


static inline int32_t k_usleep(int32_t us)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 150 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 150 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_usleep(us);
}


extern void z_impl_k_busy_wait(uint32_t usec_to_wait);


static inline void k_busy_wait(uint32_t usec_to_wait)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 167 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 167 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_busy_wait(usec_to_wait);
}


extern void z_impl_k_yield(void);


static inline void k_yield(void)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 183 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 183 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_yield();
}


extern void z_impl_k_wakeup(k_tid_t thread);


static inline void k_wakeup(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 200 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 200 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_wakeup(thread);
}


extern k_tid_t z_impl_k_sched_current_thread_query(void);


static inline k_tid_t k_sched_current_thread_query(void)
{





 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 215 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 215 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sched_current_thread_query();
}


extern void z_impl_k_thread_abort(k_tid_t thread);


static inline void k_thread_abort(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 232 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 232 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_abort(thread);
}


extern void z_impl_k_thread_start(k_tid_t thread);


static inline void k_thread_start(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 249 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 249 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_start(thread);
}


extern k_ticks_t z_impl_k_thread_timeout_expires_ticks(const struct k_thread * t);


static inline k_ticks_t k_thread_timeout_expires_ticks(const struct k_thread * t)
{
# 267 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 267 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 267 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_timeout_expires_ticks(t);
}


extern k_ticks_t z_impl_k_thread_timeout_remaining_ticks(const struct k_thread * t);


static inline k_ticks_t k_thread_timeout_remaining_ticks(const struct k_thread * t)
{
# 285 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 285 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 285 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_timeout_remaining_ticks(t);
}


extern int z_impl_k_thread_priority_get(k_tid_t thread);


static inline int k_thread_priority_get(k_tid_t thread)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 301 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 301 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_priority_get(thread);
}


extern void z_impl_k_thread_priority_set(k_tid_t thread, int prio);


static inline void k_thread_priority_set(k_tid_t thread, int prio)
{
# 319 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 319 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 319 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_priority_set(thread, prio);
}


extern void z_impl_k_thread_deadline_set(k_tid_t thread, int deadline);


static inline void k_thread_deadline_set(k_tid_t thread, int deadline)
{
# 337 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 337 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 337 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_deadline_set(thread, deadline);
}


extern void z_impl_k_thread_suspend(k_tid_t thread);


static inline void k_thread_suspend(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 354 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 354 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_suspend(thread);
}


extern void z_impl_k_thread_resume(k_tid_t thread);


static inline void k_thread_resume(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 371 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 371 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_resume(thread);
}


extern int z_impl_k_is_preempt_thread(void);


static inline int k_is_preempt_thread(void)
{





 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 386 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 386 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_is_preempt_thread();
}


extern void z_impl_k_thread_custom_data_set(void * value);


static inline void k_thread_custom_data_set(void * value)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 403 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 403 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_custom_data_set(value);
}


extern void * z_impl_k_thread_custom_data_get(void);


static inline void * k_thread_custom_data_get(void)
{





 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 418 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 418 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_custom_data_get();
}


extern int z_impl_k_thread_name_set(k_tid_t thread, const char * str);


static inline int k_thread_name_set(k_tid_t thread, const char * str)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 435 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 435 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_name_set(thread, str);
}


extern int z_impl_k_thread_name_copy(k_tid_t thread, char * buf, size_t size);


static inline int k_thread_name_copy(k_tid_t thread, char * buf, size_t size)
{
# 453 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 453 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 453 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_name_copy(thread, buf, size);
}


extern void z_impl_k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period);


static inline void k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period)
{
# 472 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 472 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 472 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_start(timer, duration, period);
}


extern void z_impl_k_timer_stop(struct k_timer * timer);


static inline void k_timer_stop(struct k_timer * timer)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 489 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 489 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_stop(timer);
}


extern uint32_t z_impl_k_timer_status_get(struct k_timer * timer);


static inline uint32_t k_timer_status_get(struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_status_get(timer);
}


extern uint32_t z_impl_k_timer_status_sync(struct k_timer * timer);


static inline uint32_t k_timer_status_sync(struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 521 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_status_sync(timer);
}


extern k_ticks_t z_impl_k_timer_expires_ticks(const struct k_timer * timer);


static inline k_ticks_t k_timer_expires_ticks(const struct k_timer * timer)
{
# 539 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 539 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_expires_ticks(timer);
}


extern k_ticks_t z_impl_k_timer_remaining_ticks(const struct k_timer * timer);


static inline k_ticks_t k_timer_remaining_ticks(const struct k_timer * timer)
{
# 557 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 557 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 557 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_remaining_ticks(timer);
}


extern void z_impl_k_timer_user_data_set(struct k_timer * timer, void * user_data);


static inline void k_timer_user_data_set(struct k_timer * timer, void * user_data)
{
# 575 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 575 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 575 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_user_data_set(timer, user_data);
}


extern void * z_impl_k_timer_user_data_get(const struct k_timer * timer);


static inline void * k_timer_user_data_get(const struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 591 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 591 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_user_data_get(timer);
}


extern int64_t z_impl_k_uptime_ticks(void);


static inline int64_t k_uptime_ticks(void)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 608 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 608 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_uptime_ticks();
}


extern void z_impl_k_queue_init(struct k_queue * queue);


static inline void k_queue_init(struct k_queue * queue)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_queue_init(queue);
}


extern void z_impl_k_queue_cancel_wait(struct k_queue * queue);


static inline void k_queue_cancel_wait(struct k_queue * queue)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 642 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 642 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_queue_cancel_wait(queue);
}


extern int32_t z_impl_k_queue_alloc_append(struct k_queue * queue, void * data);


static inline int32_t k_queue_alloc_append(struct k_queue * queue, void * data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 659 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 659 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_alloc_append(queue, data);
}


extern int32_t z_impl_k_queue_alloc_prepend(struct k_queue * queue, void * data);


static inline int32_t k_queue_alloc_prepend(struct k_queue * queue, void * data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 676 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 676 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_alloc_prepend(queue, data);
}


extern void * z_impl_k_queue_get(struct k_queue * queue, k_timeout_t timeout);


static inline void * k_queue_get(struct k_queue * queue, k_timeout_t timeout)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 693 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 693 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_get(queue, timeout);
}


extern int z_impl_k_queue_is_empty(struct k_queue * queue);


static inline int k_queue_is_empty(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 709 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 709 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_is_empty(queue);
}


extern void * z_impl_k_queue_peek_head(struct k_queue * queue);


static inline void * k_queue_peek_head(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 725 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 725 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_peek_head(queue);
}


extern void * z_impl_k_queue_peek_tail(struct k_queue * queue);


static inline void * k_queue_peek_tail(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 741 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 741 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_peek_tail(queue);
}


extern int z_impl_k_futex_wait(struct k_futex * futex, int expected, k_timeout_t timeout);


static inline int k_futex_wait(struct k_futex * futex, int expected, k_timeout_t timeout)
{
# 759 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 759 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 759 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_futex_wait(futex, expected, timeout);
}


extern int z_impl_k_futex_wake(struct k_futex * futex, 
# 764 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                      _Bool 
# 764 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                           wake_all);


static inline int k_futex_wake(struct k_futex * futex, 
# 767 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                      _Bool 
# 767 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                           wake_all)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 776 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 776 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_futex_wake(futex, wake_all);
}


extern void z_impl_k_event_init(struct k_event * event);


static inline void k_event_init(struct k_event * event)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 793 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 793 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_event_init(event);
}


extern uint32_t z_impl_k_event_post(struct k_event * event, uint32_t events);


static inline uint32_t k_event_post(struct k_event * event, uint32_t events)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 810 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 810 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_post(event, events);
}


extern uint32_t z_impl_k_event_set(struct k_event * event, uint32_t events);


static inline uint32_t k_event_set(struct k_event * event, uint32_t events)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 827 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 827 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_set(event, events);
}


extern uint32_t z_impl_k_event_set_masked(struct k_event * event, uint32_t events, uint32_t events_mask);


static inline uint32_t k_event_set_masked(struct k_event * event, uint32_t events, uint32_t events_mask)
{
# 845 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 845 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 845 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_set_masked(event, events, events_mask);
}


extern uint32_t z_impl_k_event_clear(struct k_event * event, uint32_t events);


static inline uint32_t k_event_clear(struct k_event * event, uint32_t events)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 862 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 862 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_clear(event, events);
}


extern uint32_t z_impl_k_event_wait(struct k_event * event, uint32_t events, 
# 867 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                            _Bool 
# 867 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                 reset, k_timeout_t timeout);


static inline uint32_t k_event_wait(struct k_event * event, uint32_t events, 
# 870 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                            _Bool 
# 870 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                 reset, k_timeout_t timeout)
{
# 881 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 881 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 881 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_wait(event, events, reset, timeout);
}


extern uint32_t z_impl_k_event_wait_all(struct k_event * event, uint32_t events, 
# 886 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                                _Bool 
# 886 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                     reset, k_timeout_t timeout);


static inline uint32_t k_event_wait_all(struct k_event * event, uint32_t events, 
# 889 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                                _Bool 
# 889 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                     reset, k_timeout_t timeout)
{
# 900 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 900 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 900 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_wait_all(event, events, reset, timeout);
}


extern int32_t z_impl_k_stack_alloc_init(struct k_stack * stack, uint32_t num_entries);


static inline int32_t k_stack_alloc_init(struct k_stack * stack, uint32_t num_entries)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 917 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 917 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_alloc_init(stack, num_entries);
}


extern int z_impl_k_stack_push(struct k_stack * stack, stack_data_t data);


static inline int k_stack_push(struct k_stack * stack, stack_data_t data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 934 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 934 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_push(stack, data);
}


extern int z_impl_k_stack_pop(struct k_stack * stack, stack_data_t * data, k_timeout_t timeout);


static inline int k_stack_pop(struct k_stack * stack, stack_data_t * data, k_timeout_t timeout)
{
# 952 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 952 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 952 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_pop(stack, data, timeout);
}


extern int z_impl_k_mutex_init(struct k_mutex * mutex);


static inline int k_mutex_init(struct k_mutex * mutex)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 968 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 968 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_init(mutex);
}


extern int z_impl_k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout);


static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 985 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 985 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_lock(mutex, timeout);
}


extern int z_impl_k_mutex_unlock(struct k_mutex * mutex);


static inline int k_mutex_unlock(struct k_mutex * mutex)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1001 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1001 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_unlock(mutex);
}


extern int z_impl_k_condvar_init(struct k_condvar * condvar);


static inline int k_condvar_init(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1017 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1017 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_init(condvar);
}


extern int z_impl_k_condvar_signal(struct k_condvar * condvar);


static inline int k_condvar_signal(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1033 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1033 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_signal(condvar);
}


extern int z_impl_k_condvar_broadcast(struct k_condvar * condvar);


static inline int k_condvar_broadcast(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1049 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1049 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_broadcast(condvar);
}


extern int z_impl_k_condvar_wait(struct k_condvar * condvar, struct k_mutex * mutex, k_timeout_t timeout);


static inline int k_condvar_wait(struct k_condvar * condvar, struct k_mutex * mutex, k_timeout_t timeout)
{
# 1067 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1067 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1067 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_wait(condvar, mutex, timeout);
}


extern int z_impl_k_sem_init(struct k_sem * sem, unsigned int initial_count, unsigned int limit);


static inline int k_sem_init(struct k_sem * sem, unsigned int initial_count, unsigned int limit)
{
# 1085 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1085 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1085 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_init(sem, initial_count, limit);
}


extern int z_impl_k_sem_take(struct k_sem * sem, k_timeout_t timeout);


static inline int k_sem_take(struct k_sem * sem, k_timeout_t timeout)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1102 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1102 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_take(sem, timeout);
}


extern void z_impl_k_sem_give(struct k_sem * sem);


static inline void k_sem_give(struct k_sem * sem)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1119 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1119 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_sem_give(sem);
}


extern void z_impl_k_sem_reset(struct k_sem * sem);


static inline void k_sem_reset(struct k_sem * sem)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1136 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1136 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_sem_reset(sem);
}


extern unsigned int z_impl_k_sem_count_get(struct k_sem * sem);


static inline unsigned int k_sem_count_get(struct k_sem * sem)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1152 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1152 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_count_get(sem);
}


extern int z_impl_k_msgq_alloc_init(struct k_msgq * msgq, size_t msg_size, uint32_t max_msgs);


static inline int k_msgq_alloc_init(struct k_msgq * msgq, size_t msg_size, uint32_t max_msgs)
{
# 1170 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1170 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1170 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_alloc_init(msgq, msg_size, max_msgs);
}


extern int z_impl_k_msgq_put(struct k_msgq * msgq, const void * data, k_timeout_t timeout);


static inline int k_msgq_put(struct k_msgq * msgq, const void * data, k_timeout_t timeout)
{
# 1188 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1188 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1188 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_put(msgq, data, timeout);
}


extern int z_impl_k_msgq_get(struct k_msgq * msgq, void * data, k_timeout_t timeout);


static inline int k_msgq_get(struct k_msgq * msgq, void * data, k_timeout_t timeout)
{
# 1206 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1206 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1206 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_get(msgq, data, timeout);
}


extern int z_impl_k_msgq_peek(struct k_msgq * msgq, void * data);


static inline int k_msgq_peek(struct k_msgq * msgq, void * data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1223 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1223 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_peek(msgq, data);
}


extern int z_impl_k_msgq_peek_at(struct k_msgq * msgq, void * data, uint32_t idx);


static inline int k_msgq_peek_at(struct k_msgq * msgq, void * data, uint32_t idx)
{
# 1241 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1241 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1241 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_peek_at(msgq, data, idx);
}


extern void z_impl_k_msgq_purge(struct k_msgq * msgq);


static inline void k_msgq_purge(struct k_msgq * msgq)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1258 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1258 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_msgq_purge(msgq);
}


extern uint32_t z_impl_k_msgq_num_free_get(struct k_msgq * msgq);


static inline uint32_t k_msgq_num_free_get(struct k_msgq * msgq)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1274 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1274 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_num_free_get(msgq);
}


extern void z_impl_k_msgq_get_attrs(struct k_msgq * msgq, struct k_msgq_attrs * attrs);


static inline void k_msgq_get_attrs(struct k_msgq * msgq, struct k_msgq_attrs * attrs)
{
# 1292 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1292 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1292 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_msgq_get_attrs(msgq, attrs);
}


extern uint32_t z_impl_k_msgq_num_used_get(struct k_msgq * msgq);


static inline uint32_t k_msgq_num_used_get(struct k_msgq * msgq)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1308 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1308 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_num_used_get(msgq);
}


extern int z_impl_k_pipe_alloc_init(struct k_pipe * pipe, size_t size);


static inline int k_pipe_alloc_init(struct k_pipe * pipe, size_t size)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1325 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1325 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_alloc_init(pipe, size);
}


extern int z_impl_k_pipe_put(struct k_pipe * pipe, void * data, size_t bytes_to_write, size_t * bytes_written, size_t min_xfer, k_timeout_t timeout);


static inline int k_pipe_put(struct k_pipe * pipe, void * data, size_t bytes_to_write, size_t * bytes_written, size_t min_xfer, k_timeout_t timeout)
{
# 1350 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1350 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1350 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_put(pipe, data, bytes_to_write, bytes_written, min_xfer, timeout);
}


extern int z_impl_k_pipe_get(struct k_pipe * pipe, void * data, size_t bytes_to_read, size_t * bytes_read, size_t min_xfer, k_timeout_t timeout);


static inline int k_pipe_get(struct k_pipe * pipe, void * data, size_t bytes_to_read, size_t * bytes_read, size_t min_xfer, k_timeout_t timeout)
{
# 1375 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1375 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1375 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_get(pipe, data, bytes_to_read, bytes_read, min_xfer, timeout);
}


extern size_t z_impl_k_pipe_read_avail(struct k_pipe * pipe);


static inline size_t k_pipe_read_avail(struct k_pipe * pipe)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1391 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1391 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_read_avail(pipe);
}


extern size_t z_impl_k_pipe_write_avail(struct k_pipe * pipe);


static inline size_t k_pipe_write_avail(struct k_pipe * pipe)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1407 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1407 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_write_avail(pipe);
}


extern void z_impl_k_pipe_flush(struct k_pipe * pipe);


static inline void k_pipe_flush(struct k_pipe * pipe)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1424 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1424 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_pipe_flush(pipe);
}


extern void z_impl_k_pipe_buffer_flush(struct k_pipe * pipe);


static inline void k_pipe_buffer_flush(struct k_pipe * pipe)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1441 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1441 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_pipe_buffer_flush(pipe);
}


extern int z_impl_k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout);


static inline int k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout)
{
# 1459 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1459 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1459 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_poll(events, num_events, timeout);
}


extern void z_impl_k_poll_signal_init(struct k_poll_signal * sig);


static inline void k_poll_signal_init(struct k_poll_signal * sig)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1476 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1476 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_init(sig);
}


extern void z_impl_k_poll_signal_reset(struct k_poll_signal * sig);


static inline void k_poll_signal_reset(struct k_poll_signal * sig)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1493 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1493 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_reset(sig);
}


extern void z_impl_k_poll_signal_check(struct k_poll_signal * sig, unsigned int * signaled, int * result);


static inline void k_poll_signal_check(struct k_poll_signal * sig, unsigned int * signaled, int * result)
{
# 1512 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1512 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1512 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_check(sig, signaled, result);
}


extern int z_impl_k_poll_signal_raise(struct k_poll_signal * sig, int result);


static inline int k_poll_signal_raise(struct k_poll_signal * sig, int result)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1529 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1529 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_poll_signal_raise(sig, result);
}


extern void z_impl_k_str_out(char * c, size_t n);


static inline void k_str_out(char * c, size_t n)
{
# 1547 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1547 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1547 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_str_out(c, n);
}


extern int z_impl_k_float_disable(struct k_thread * thread);


static inline int k_float_disable(struct k_thread * thread)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1563 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1563 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_float_disable(thread);
}


extern int z_impl_k_float_enable(struct k_thread * thread, unsigned int options);


static inline int k_float_enable(struct k_thread * thread, unsigned int options)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1580 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1580 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_float_enable(thread, options);
}
# 6103 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel.h" 2
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 1
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/app_memdomain.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/app_memdomain.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h" 1
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/offsets.h" 1
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h" 2
# 81 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char _app_smem_start[];
extern char _app_smem_end[];
extern char _app_smem_size[];
extern char _app_smem_rom_start[];
extern char _app_smem_num_words[];
# 104 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char __kernel_ram_start[];
extern char __kernel_ram_end[];
extern char __kernel_ram_size[];


extern char __bss_start[];
extern char __bss_end[];



extern char __data_region_load_start[];
extern char __data_region_start[];
extern char __data_region_end[];
# 126 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char __rom_region_start[];
extern char __rom_region_end[];
extern char __rom_region_size[];


extern char _flash_used[];


extern char _image_ram_start[];
extern char _image_ram_end[];
extern char _image_ram_size[];

extern char __text_region_start[];
extern char __text_region_end[];
extern char __text_region_size[];

extern char __rodata_region_start[];
extern char __rodata_region_end[];
extern char __rodata_region_size[];

extern char _vector_start[];
extern char _vector_end[];
# 160 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char _end[];
# 233 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char __ramfunc_start[];
extern char __ramfunc_end[];
extern char __ramfunc_size[];
extern char __ramfunc_load_start[];
# 254 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/linker-defs.h"
extern char __tdata_start[];
extern char __tdata_end[];
extern char __tdata_size[];
extern char __tdata_align[];
extern char __tbss_start[];
extern char __tbss_end[];
extern char __tbss_size[];
extern char __tbss_align[];
extern char __tls_start[];
extern char __tls_end[];
extern char __tls_size[];
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/app_memory/app_memdomain.h" 2
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 1
# 49 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
typedef struct rtio_mpsc_node *mpsc_ptr_t;
# 81 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
struct rtio_mpsc_node {
 mpsc_ptr_t next;
};




struct rtio_mpsc {
 mpsc_ptr_t head;
 struct rtio_mpsc_node *tail;
 struct rtio_mpsc_node stub;
};
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
static inline void rtio_mpsc_init(struct rtio_mpsc *q)
{
 q->head = &q->stub;
 q->tail = &q->stub;
 q->stub.next = 
# 119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
((void *)0)
# 119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
                                ;
}







static inline __attribute__((always_inline)) void rtio_mpsc_push(struct rtio_mpsc *q, struct rtio_mpsc_node *n)
{
 struct rtio_mpsc_node *prev;
 int key;

 n->next = 
# 133 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
((void *)0)
# 133 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
                           ;

 key = arch_irq_lock();
 prev = (struct rtio_mpsc_node *)({ mpsc_ptr_t tmp = q->head; q->head = n; tmp; });
 prev->next = n;
 arch_irq_unlock(key);
}







static inline struct rtio_mpsc_node *rtio_mpsc_pop(struct rtio_mpsc *q)
{
 struct rtio_mpsc_node *head;
 struct rtio_mpsc_node *tail = q->tail;
 struct rtio_mpsc_node *next = (struct rtio_mpsc_node *)tail->next;


 if (tail == &q->stub) {
  if (next == 
# 155 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
             ((void *)0)
# 155 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
                 ) {
   return 
# 156 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
         ((void *)0)
# 156 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
             ;
  }

  q->tail = next;
  tail = next;
  next = (struct rtio_mpsc_node *)next->next;
 }


 if (next != 
# 165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
            ((void *)0)
# 165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
                ) {
  q->tail = next;
  return tail;
 }

 head = (struct rtio_mpsc_node *)q->head;




 if (tail != head) {
  return 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
        ((void *)0)
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
            ;
 }

 rtio_mpsc_push(q, &q->stub);

 next = (struct rtio_mpsc_node *)tail->next;

 if (next != 
# 183 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
            ((void *)0)
# 183 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
                ) {
  q->tail = next;
  return tail;
 }

 return 
# 188 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h" 3 4
       ((void *)0)
# 188 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio_mpsc.h"
           ;
}
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h" 2



# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/math/ilog2.h" 1
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h" 2
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
struct sys_bitarray {

 uint32_t num_bits;


 uint32_t num_bundles;


 uint32_t *bundles;


 struct k_spinlock lock;
};



typedef struct sys_bitarray sys_bitarray_t;
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_set_bit(sys_bitarray_t *bitarray, size_t bit);
# 108 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_clear_bit(sys_bitarray_t *bitarray, size_t bit);
# 121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_test_bit(sys_bitarray_t *bitarray, size_t bit, int *val);
# 134 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_test_and_set_bit(sys_bitarray_t *bitarray, size_t bit, int *prev_val);
# 147 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_test_and_clear_bit(sys_bitarray_t *bitarray, size_t bit, int *prev_val);
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_alloc(sys_bitarray_t *bitarray, size_t num_bits,
         size_t *offset);
# 186 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_free(sys_bitarray_t *bitarray, size_t num_bits,
        size_t offset);
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"

# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h" 3 4
_Bool 
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
    sys_bitarray_is_region_set(sys_bitarray_t *bitarray, size_t num_bits,
    size_t offset);
# 218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"

# 218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h" 3 4
_Bool 
# 218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
    sys_bitarray_is_region_cleared(sys_bitarray_t *bitarray, size_t num_bits,
        size_t offset);
# 235 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_set_region(sys_bitarray_t *bitarray, size_t num_bits,
       size_t offset);
# 260 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_test_and_set_region(sys_bitarray_t *bitarray, size_t num_bits,
         size_t offset, 
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h" 3 4
                       _Bool 
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
                            to_set);
# 277 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/bitarray.h"
int sys_bitarray_clear_region(sys_bitarray_t *bitarray, size_t num_bits,
         size_t offset);
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h" 2
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
struct sys_mem_blocks;




struct sys_multi_mem_blocks;






typedef struct sys_mem_blocks sys_mem_blocks_t;






typedef struct sys_multi_mem_blocks sys_multi_mem_blocks_t;
# 78 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
typedef sys_mem_blocks_t *(*sys_multi_mem_blocks_choice_fn_t)
 (struct sys_multi_mem_blocks *group, void *cfg);





struct sys_mem_blocks_info {
 uint32_t num_blocks;
 uint8_t blk_sz_shift;




};

struct sys_mem_blocks {
 struct sys_mem_blocks_info info;


 uint8_t *buffer;


 sys_bitarray_t *bitmap;
# 110 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
};

struct sys_multi_mem_blocks {

 int num_allocators;
 sys_multi_mem_blocks_choice_fn_t choice_fn;
 sys_mem_blocks_t *allocators[8];
};
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_alloc(sys_mem_blocks_t *mem_block, size_t count,
    void **out_blocks);
# 240 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_alloc_contiguous(sys_mem_blocks_t *mem_block, size_t count,
       void **out_block);
# 259 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_get(sys_mem_blocks_t *mem_block, void *in_block, size_t count);
# 271 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_is_region_free(sys_mem_blocks_t *mem_block, void *in_block, size_t count);
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_free(sys_mem_blocks_t *mem_block, size_t count,
   void **in_blocks);
# 303 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_mem_blocks_free_contiguous(sys_mem_blocks_t *mem_block, void *block, size_t count);
# 344 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
void sys_multi_mem_blocks_init(sys_multi_mem_blocks_t *group,
          sys_multi_mem_blocks_choice_fn_t choice_fn);
# 356 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
void sys_multi_mem_blocks_add_allocator(sys_multi_mem_blocks_t *group,
     sys_mem_blocks_t *alloc);
# 380 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_multi_mem_blocks_alloc(sys_multi_mem_blocks_t *group,
          void *cfg, size_t count,
          void **out_blocks,
          size_t *blk_size);
# 400 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_blocks.h"
int sys_multi_mem_blocks_free(sys_multi_mem_blocks_t *group,
         size_t count, void **in_blocks);
# 38 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 2
# 209 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
struct rtio;
struct rtio_cqe;
struct rtio_sqe;
struct rtio_sqe_pool;
struct rtio_cqe_pool;
struct rtio_iodev;
struct rtio_iodev_sqe;
# 225 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
typedef void (*rtio_callback_t)(struct rtio *r, const struct rtio_sqe *sqe, void *arg0);




struct rtio_sqe {
 uint8_t op;

 uint8_t prio;

 uint16_t flags;

 uint16_t iodev_flags;

 uint16_t _resv0;

 const struct rtio_iodev *iodev;
# 250 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 void *userdata;

 union {


  struct {
   uint32_t buf_len;
   uint8_t *buf;
  };


  struct {
   uint8_t tiny_buf_len;
   uint8_t tiny_buf[7];
  };


  struct {
   rtio_callback_t callback;
   void *arg0;
  };


  struct {
   uint32_t txrx_buf_len;
   uint8_t *tx_buf;
   uint8_t *rx_buf;
  };

 };
};



_Static_assert(sizeof(struct rtio_sqe) <= 64, "" );





struct rtio_cqe {
 struct rtio_mpsc_node q;

 int32_t result;
 void *userdata;
 uint32_t flags;
};

struct rtio_sqe_pool {
 struct rtio_mpsc free_q;
 const uint16_t pool_size;
 uint16_t pool_free;
 struct rtio_iodev_sqe *pool;
};

struct rtio_cqe_pool {
 struct rtio_mpsc free_q;
 const uint16_t pool_size;
 uint16_t pool_free;
 struct rtio_cqe *pool;
};
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
struct rtio {
# 342 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 atomic_t cq_count;




 atomic_t xcqcnt;


 struct rtio_sqe_pool *sqe_pool;


 struct rtio_cqe_pool *cqe_pool;







 struct rtio_mpsc sq;


 struct rtio_mpsc cq;
};


extern struct k_mem_partition rtio_partition;
# 377 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline size_t rtio_mempool_block_size(const struct rtio *r)
{

 (void)(r);
 return 0;






}
# 419 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
struct rtio_iodev_sqe {
 struct rtio_sqe sqe;
 struct rtio_mpsc_node q;
 struct rtio_iodev_sqe *next;
 struct rtio *r;
};




struct rtio_iodev_api {
# 438 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 void (*submit)(struct rtio_iodev_sqe *iodev_sqe);
};




struct rtio_iodev {

 const struct rtio_iodev_api *api;


 struct rtio_mpsc iodev_sq;


 void *data;
};
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_sqe_prep_nop(struct rtio_sqe *sqe,
    const struct rtio_iodev *iodev,
    void *userdata)
{
 
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 481 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = 0;
 sqe->iodev = iodev;
 sqe->userdata = userdata;
}




static inline void rtio_sqe_prep_read(struct rtio_sqe *sqe,
          const struct rtio_iodev *iodev,
          int8_t prio,
          uint8_t *buf,
          uint32_t len,
          void *userdata)
{
 
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 497 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = (0 +1);
 sqe->prio = prio;
 sqe->iodev = iodev;
 sqe->buf_len = len;
 sqe->buf = buf;
 sqe->userdata = userdata;
}






static inline void rtio_sqe_prep_read_with_pool(struct rtio_sqe *sqe,
      const struct rtio_iodev *iodev, int8_t prio,
      void *userdata)
{
 rtio_sqe_prep_read(sqe, iodev, prio, 
# 515 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                     ((void *)0)
# 515 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                         , 0, userdata);
 sqe->flags = (1UL << (2));
}

static inline void rtio_sqe_prep_read_multishot(struct rtio_sqe *sqe,
      const struct rtio_iodev *iodev, int8_t prio,
      void *userdata)
{
 rtio_sqe_prep_read_with_pool(sqe, iodev, prio, userdata);
 sqe->flags |= (1UL << (4));
}




static inline void rtio_sqe_prep_write(struct rtio_sqe *sqe,
           const struct rtio_iodev *iodev,
           int8_t prio,
           uint8_t *buf,
           uint32_t len,
           void *userdata)
{
 
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 537 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = ((0 +1)+1);
 sqe->prio = prio;
 sqe->iodev = iodev;
 sqe->buf_len = len;
 sqe->buf = buf;
 sqe->userdata = userdata;
}
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_sqe_prep_tiny_write(struct rtio_sqe *sqe,
         const struct rtio_iodev *iodev,
         int8_t prio,
         const uint8_t *tiny_write_data,
         uint8_t tiny_write_len,
         void *userdata)
{
 { };

 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = (((0 +1)+1)+1);
 sqe->prio = prio;
 sqe->iodev = iodev;
 sqe->tiny_buf_len = tiny_write_len;
 
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe->tiny_buf
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe->tiny_buf
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
tiny_write_data
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
tiny_write_len
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe->tiny_buf
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memcpy_ichk(
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe->tiny_buf
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
tiny_write_data
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
tiny_write_len
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 570 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                                      ;
 sqe->userdata = userdata;
}
# 582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_sqe_prep_callback(struct rtio_sqe *sqe,
       rtio_callback_t callback,
       void *arg0,
       void *userdata)
{
 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = ((((0 +1)+1)+1)+1);
 sqe->prio = 0;
 sqe->iodev = 
# 590 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
             ((void *)0)
# 590 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                 ;
 sqe->callback = callback;
 sqe->arg0 = arg0;
 sqe->userdata = userdata;
}




static inline void rtio_sqe_prep_transceive(struct rtio_sqe *sqe,
         const struct rtio_iodev *iodev,
         int8_t prio,
         uint8_t *tx_buf,
         uint8_t *rx_buf,
         uint32_t buf_len,
         void *userdata)
{
 
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sqe
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_sqe)
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 607 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;
 sqe->op = (((((0 +1)+1)+1)+1)+1);
 sqe->prio = prio;
 sqe->iodev = iodev;
 sqe->txrx_buf_len = buf_len;
 sqe->tx_buf = tx_buf;
 sqe->rx_buf = rx_buf;
 sqe->userdata = userdata;
}

static inline struct rtio_iodev_sqe *rtio_sqe_pool_alloc(struct rtio_sqe_pool *pool)
{
 struct rtio_mpsc_node *node = rtio_mpsc_pop(&pool->free_q);

 if (node == 
# 621 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
            ((void *)0)
# 621 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                ) {
  return 
# 622 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 622 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }

 struct rtio_iodev_sqe *iodev_sqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_iodev_sqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_iodev_sqe *)(((char *)(node)) - 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   __builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   struct rtio_iodev_sqe
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   , 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   q
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   )
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   )); });

 pool->pool_free--;

 return iodev_sqe;
}

static inline void rtio_sqe_pool_free(struct rtio_sqe_pool *pool, struct rtio_iodev_sqe *iodev_sqe)
{
 rtio_mpsc_push(&pool->free_q, &iodev_sqe->q);

 pool->pool_free++;
}

static inline struct rtio_cqe *rtio_cqe_pool_alloc(struct rtio_cqe_pool *pool)
{
 struct rtio_mpsc_node *node = rtio_mpsc_pop(&pool->free_q);

 if (node == 
# 643 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
            ((void *)0)
# 643 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                ) {
  return 
# 644 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 644 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }

 struct rtio_cqe *cqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_cqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_cqe *)(((char *)(node)) - 
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                       __builtin_offsetof (
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                       struct rtio_cqe
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                       , 
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                       q
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                       )
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                       )); });

 
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_cqe)
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_cqe)
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 649 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;

 pool->pool_free--;

 return cqe;
}

static inline void rtio_cqe_pool_free(struct rtio_cqe_pool *pool, struct rtio_cqe *cqe)
{
 rtio_mpsc_push(&pool->free_q, &cqe->q);

 pool->pool_free++;
}

static inline int rtio_block_pool_alloc(struct rtio *r, size_t min_sz,
       size_t max_sz, uint8_t **buf, uint32_t *buf_len)
{

 (void)(r);
 (void)(min_sz);
 (void)(max_sz);
 (void)(buf);
 (void)(buf_len);
 return -
# 672 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        134
# 672 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ;
# 691 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
}

static inline void rtio_block_pool_free(struct rtio *r, void *buf, uint32_t buf_len)
{





}
# 823 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline uint32_t rtio_sqe_acquirable(struct rtio *r)
{
 return r->sqe_pool->pool_free;
}
# 836 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_iodev_sqe *rtio_txn_next(const struct rtio_iodev_sqe *iodev_sqe)
{
 if (iodev_sqe->sqe.flags & (1UL << (1))) {
  return iodev_sqe->next;
 } else {
  return 
# 841 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 841 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }
}
# 854 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_iodev_sqe *rtio_chain_next(const struct rtio_iodev_sqe *iodev_sqe)
{
 if (iodev_sqe->sqe.flags & (1UL << (0))) {
  return iodev_sqe->next;
 } else {
  return 
# 859 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 859 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }
}
# 871 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_iodev_sqe *rtio_iodev_sqe_next(const struct rtio_iodev_sqe *iodev_sqe)
{
 return iodev_sqe->next;
}
# 884 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_sqe *rtio_sqe_acquire(struct rtio *r)
{
 struct rtio_iodev_sqe *iodev_sqe = rtio_sqe_pool_alloc(r->sqe_pool);

 if (iodev_sqe == 
# 888 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                 ((void *)0)
# 888 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                     ) {
  return 
# 889 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 889 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }

 rtio_mpsc_push(&r->sq, &iodev_sqe->q);

 return &iodev_sqe->sqe;
}






static inline void rtio_sqe_drop_all(struct rtio *r)
{
 struct rtio_iodev_sqe *iodev_sqe;
 struct rtio_mpsc_node *node = rtio_mpsc_pop(&r->sq);

 while (node != 
# 907 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
               ((void *)0)
# 907 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                   ) {
  iodev_sqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_iodev_sqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_iodev_sqe *)(((char *)(node)) - 
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
             __builtin_offsetof (
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
             struct rtio_iodev_sqe
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
             , 
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
             q
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
             )
# 908 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
             )); });
  rtio_sqe_pool_free(r->sqe_pool, iodev_sqe);
  node = rtio_mpsc_pop(&r->sq);
 }
}




static inline struct rtio_cqe *rtio_cqe_acquire(struct rtio *r)
{
 struct rtio_cqe *cqe = rtio_cqe_pool_alloc(r->cqe_pool);

 if (cqe == 
# 921 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
           ((void *)0)
# 921 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ) {
  return 
# 922 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 922 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }

 
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
((__builtin_object_size(
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_cqe)
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, __builtin_object_size(
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 0)) : __memset_ichk(
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
cqe
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
0
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
, 
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
sizeof(struct rtio_cqe)
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
))
# 925 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                       ;

 return cqe;
}




static inline void rtio_cqe_produce(struct rtio *r, struct rtio_cqe *cqe)
{
 rtio_mpsc_push(&r->cq, &cqe->q);
}
# 949 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_cqe *rtio_cqe_consume(struct rtio *r)
{
 struct rtio_mpsc_node *node;
 struct rtio_cqe *cqe = 
# 952 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                       ((void *)0)
# 952 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                           ;







 node = rtio_mpsc_pop(&r->cq);
 if (node == 
# 961 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
            ((void *)0)
# 961 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                ) {
  return 
# 962 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        ((void *)0)
# 962 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
            ;
 }
 cqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_cqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_cqe *)(((char *)(node)) - 
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      __builtin_offsetof (
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      struct rtio_cqe
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      , 
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      q
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      )
# 964 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      )); });

 return cqe;
}
# 979 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline struct rtio_cqe *rtio_cqe_consume_block(struct rtio *r)
{
 struct rtio_mpsc_node *node;
 struct rtio_cqe *cqe;




 node = rtio_mpsc_pop(&r->cq);
 while (node == 
# 988 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
               ((void *)0)
# 988 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                   ) {
  ;
  node = rtio_mpsc_pop(&r->cq);
 }
 cqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_cqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_cqe *)(((char *)(node)) - 
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      __builtin_offsetof (
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      struct rtio_cqe
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      , 
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      q
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
      )
# 992 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
      )); });

 return cqe;
}







static inline void rtio_cqe_release(struct rtio *r, struct rtio_cqe *cqe)
{
 rtio_cqe_pool_free(r->cqe_pool, cqe);
}







static inline uint32_t rtio_cqe_compute_flags(struct rtio_iodev_sqe *iodev_sqe)
{
 uint32_t flags = 0;
# 1029 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 (void)(iodev_sqe);


 return flags;
}
# 1050 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_cqe_get_mempool_buffer(const struct rtio *r, struct rtio_cqe *cqe,
       uint8_t **buff, uint32_t *buff_len);

static inline int z_impl_rtio_cqe_get_mempool_buffer(const struct rtio *r, struct rtio_cqe *cqe,
           uint8_t **buff, uint32_t *buff_len)
{
# 1071 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 (void)(r);
 (void)(cqe);
 (void)(buff);
 (void)(buff_len);

 return -
# 1076 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
        134
# 1076 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ;

}

void rtio_executor_submit(struct rtio *r);
void rtio_executor_ok(struct rtio_iodev_sqe *iodev_sqe, int result);
void rtio_executor_err(struct rtio_iodev_sqe *iodev_sqe, int result);
# 1092 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_iodev_sqe_ok(struct rtio_iodev_sqe *iodev_sqe, int result)
{
 rtio_executor_ok(iodev_sqe, result);
}
# 1105 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_iodev_sqe_err(struct rtio_iodev_sqe *iodev_sqe, int result)
{
 rtio_executor_err(iodev_sqe, result);
}






static inline void rtio_iodev_cancel_all(struct rtio_iodev *iodev)
{

 struct rtio_mpsc_node *node = rtio_mpsc_pop(&iodev->iodev_sq);

 while (node != 
# 1120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
               ((void *)0)
# 1120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                   ) {
  struct rtio_iodev_sqe *iodev_sqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(node)), __typeof__(((struct rtio_iodev_sqe *)0)->q)) || __builtin_types_compatible_p(__typeof__(*(node)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_iodev_sqe *)(((char *)(node)) - 
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                    __builtin_offsetof (
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                    struct rtio_iodev_sqe
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                    , 
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                    q
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                    )
# 1121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                    )); });

  rtio_iodev_sqe_err(iodev_sqe, -
# 1123 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                140
# 1123 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                         );
  node = rtio_mpsc_pop(&iodev->iodev_sq);
 }
}
# 1139 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_cqe_submit(struct rtio *r, int result, void *userdata, uint32_t flags)
{
 struct rtio_cqe *cqe = rtio_cqe_acquire(r);

 if (cqe == 
# 1143 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
           ((void *)0)
# 1143 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ) {
  atomic_inc(&r->xcqcnt);
 } else {
  cqe->result = result;
  cqe->userdata = userdata;
  cqe->flags = flags;
  rtio_cqe_produce(r, cqe);
 }

 atomic_inc(&r->cq_count);
# 1164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
}
# 1180 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_sqe_rx_buf(const struct rtio_iodev_sqe *iodev_sqe, uint32_t min_buf_len,
      uint32_t max_buf_len, uint8_t **buf, uint32_t *buf_len)
{
 struct rtio_sqe *sqe = (struct rtio_sqe *)&iodev_sqe->sqe;
# 1208 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 (void)(max_buf_len);


 if (sqe->buf_len < min_buf_len) {
  return -
# 1212 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
         12
# 1212 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ;
 }

 *buf = sqe->buf;
 *buf_len = sqe->buf_len;
 return 0;
}
# 1234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline void rtio_release_buffer(struct rtio *r, void *buff, uint32_t buff_len);

static inline void z_impl_rtio_release_buffer(struct rtio *r, void *buff, uint32_t buff_len)
{







 (void)(r);
 (void)(buff);
 (void)(buff_len);

}




static inline void rtio_access_grant(struct rtio *r, struct k_thread *t)
{
 k_object_access_grant(r, t);
# 1265 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
}
# 1277 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_sqe_cancel(struct rtio_sqe *sqe);

static inline int z_impl_rtio_sqe_cancel(struct rtio_sqe *sqe)
{
 struct rtio_iodev_sqe *iodev_sqe = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(sqe)), __typeof__(((struct rtio_iodev_sqe *)0)->sqe)) || __builtin_types_compatible_p(__typeof__(*(sqe)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct rtio_iodev_sqe *)(((char *)(sqe)) - 
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   __builtin_offsetof (
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   struct rtio_iodev_sqe
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   , 
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   sqe
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                   )
# 1281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                   )); });

 do {
  iodev_sqe->sqe.flags |= (1UL << (3));
  iodev_sqe = rtio_iodev_sqe_next(iodev_sqe);
 } while (iodev_sqe != 
# 1286 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                      ((void *)0)
# 1286 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                          );

 return 0;
}
# 1306 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_sqe_copy_in_get_handles(struct rtio *r, const struct rtio_sqe *sqes,
        struct rtio_sqe **handle, size_t sqe_count);

static inline int z_impl_rtio_sqe_copy_in_get_handles(struct rtio *r, const struct rtio_sqe *sqes,
            struct rtio_sqe **handle,
            size_t sqe_count)
{
 struct rtio_sqe *sqe;
 uint32_t acquirable = rtio_sqe_acquirable(r);

 if (acquirable < sqe_count) {
  return -
# 1317 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
         12
# 1317 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
               ;
 }

 for (unsigned long i = 0; i < sqe_count; i++) {
  sqe = rtio_sqe_acquire(r);
  { };
  if (handle != 
# 1323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
               ((void *)0) 
# 1323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                    && i == 0) {
   *handle = sqe;
  }
  *sqe = sqes[i];
 }

 return 0;
}
# 1348 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_sqe_copy_in(struct rtio *r, const struct rtio_sqe *sqes, size_t sqe_count)
{
 return rtio_sqe_copy_in_get_handles(r, sqes, 
# 1350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
                                             ((void *)0)
# 1350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                                                 , sqe_count);
}
# 1368 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_cqe_copy_out(struct rtio *r,
    struct rtio_cqe *cqes,
    size_t cqe_count,
    k_timeout_t timeout);
static inline int z_impl_rtio_cqe_copy_out(struct rtio *r,
        struct rtio_cqe *cqes,
        size_t cqe_count,
        k_timeout_t timeout)
{
 size_t copied = 0;
 struct rtio_cqe *cqe;
 k_timepoint_t end = sys_timepoint_calc(timeout);

 do {
  cqe = ((timeout).ticks == (((k_timeout_t) { .ticks = (((k_ticks_t) -1)) })).ticks) ? rtio_cqe_consume_block(r)
             : rtio_cqe_consume(r);
  if (cqe == 
# 1384 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 3 4
            ((void *)0)
# 1384 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
                ) {




   ;

   continue;
  }
  cqes[copied++] = *cqe;
  rtio_cqe_release(r, cqe);
 } while (copied < cqe_count && !sys_timepoint_expired(end));

 return copied;
}
# 1413 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
static inline int rtio_submit(struct rtio *r, uint32_t wait_count);

static inline int z_impl_rtio_submit(struct rtio *r, uint32_t wait_count)
{
 int res = 0;
# 1430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 uintptr_t cq_count = (uintptr_t)atomic_get(&r->cq_count) + wait_count;





 rtio_executor_submit(r);
# 1450 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
 while ((uintptr_t)atomic_get(&r->cq_count) < cq_count) {
  ;
  k_yield();
 }


 return res;
}
# 1467 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern int z_impl_rtio_cqe_get_mempool_buffer(const struct rtio * r, struct rtio_cqe * cqe, uint8_t ** buff, uint32_t * buff_len);


static inline int rtio_cqe_get_mempool_buffer(const struct rtio * r, struct rtio_cqe * cqe, uint8_t ** buff, uint32_t * buff_len)
{
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 return z_impl_rtio_cqe_get_mempool_buffer(r, cqe, buff, buff_len);
}
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern void z_impl_rtio_release_buffer(struct rtio * r, void * buff, uint32_t buff_len);


static inline void rtio_release_buffer(struct rtio * r, void * buff, uint32_t buff_len)
{
# 63 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 63 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 63 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 z_impl_rtio_release_buffer(r, buff, buff_len);
}
# 75 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern int z_impl_rtio_sqe_cancel(struct rtio_sqe * sqe);


static inline int rtio_sqe_cancel(struct rtio_sqe * sqe)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 86 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 86 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 return z_impl_rtio_sqe_cancel(sqe);
}
# 98 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern int z_impl_rtio_sqe_copy_in_get_handles(struct rtio * r, const struct rtio_sqe * sqes, struct rtio_sqe ** handle, size_t sqe_count);


static inline int rtio_sqe_copy_in_get_handles(struct rtio * r, const struct rtio_sqe * sqes, struct rtio_sqe ** handle, size_t sqe_count)
{
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 112 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 return z_impl_rtio_sqe_copy_in_get_handles(r, sqes, handle, sqe_count);
}
# 124 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern int z_impl_rtio_cqe_copy_out(struct rtio * r, struct rtio_cqe * cqes, size_t cqe_count, k_timeout_t timeout);


static inline int rtio_cqe_copy_out(struct rtio * r, struct rtio_cqe * cqes, size_t cqe_count, k_timeout_t timeout)
{
# 138 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 138 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 138 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 return z_impl_rtio_cqe_copy_out(r, cqes, cqe_count, timeout);
}
# 150 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
extern int z_impl_rtio_submit(struct rtio * r, uint32_t wait_count);


static inline int rtio_submit(struct rtio * r, uint32_t wait_count)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h" 3 4
0
# 162 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/rtio.h"
);
 return z_impl_rtio_submit(r, wait_count);
}
# 1468 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/rtio/rtio.h" 2
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/stats/stats.h" 1
# 54 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/stats/stats.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 55 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/stats/stats.h" 2






struct stats_name_map {
 uint16_t snm_off;
 const char *snm_name;
} __attribute__((packed));

struct stats_hdr {
 const char *s_name;
 uint8_t s_size;
 uint16_t s_cnt;
 uint8_t s_pad1;




 struct stats_hdr *s_next;
};
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 148 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
struct spi_cs_control {







 struct gpio_dt_spec gpio;




 uint32_t delay;
};
# 278 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
typedef uint16_t spi_operation_t;





struct spi_config {

 uint32_t frequency;
# 307 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
 spi_operation_t operation;

 uint16_t slave;




 struct spi_cs_control cs;
};
# 360 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
struct spi_dt_spec {
 const struct device *bus;
 struct spi_config config;
};
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
struct spi_buf {
 void *buf;
 size_t len;
};







struct spi_buf_set {
 const struct spi_buf *buffers;
 size_t count;
};
# 584 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
typedef int (*spi_api_io)(const struct device *dev,
     const struct spi_config *config,
     const struct spi_buf_set *tx_bufs,
     const struct spi_buf_set *rx_bufs);
# 596 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
typedef void (*spi_callback_t)(const struct device *dev, int result, void *data);






typedef int (*spi_api_io_async)(const struct device *dev,
    const struct spi_config *config,
    const struct spi_buf_set *tx_bufs,
    const struct spi_buf_set *rx_bufs,
    spi_callback_t cb,
    void *userdata);
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
typedef int (*spi_api_release)(const struct device *dev,
          const struct spi_config *config);






 struct spi_driver_api {
 spi_api_io transceive;






 spi_api_release release;
};
# 651 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline 
# 651 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
             _Bool 
# 651 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                  spi_cs_is_gpio(const struct spi_config *config)
{
 return config->cs.gpio.port != 
# 653 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
                               ((void *)0)
# 653 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                                   ;
}
# 663 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline 
# 663 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
             _Bool 
# 663 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                  spi_cs_is_gpio_dt(const struct spi_dt_spec *spec)
{
 return spi_cs_is_gpio(&spec->config);
}
# 676 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
__attribute__((deprecated))
static inline 
# 677 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
             _Bool 
# 677 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                  spi_is_ready(const struct spi_dt_spec *spec)
{

 if (!device_is_ready(spec->bus)) {
  return 
# 681 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
        0
# 681 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
             ;
 }

 if (spi_cs_is_gpio_dt(spec) &&
     !gpio_is_ready_dt(&spec->config.cs.gpio)) {
  return 
# 686 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
        0
# 686 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
             ;
 }
 return 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
       1
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
           ;
}
# 699 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline 
# 699 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
             _Bool 
# 699 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                  spi_is_ready_dt(const struct spi_dt_spec *spec)
{

 if (!device_is_ready(spec->bus)) {
  return 
# 703 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
        0
# 703 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
             ;
 }

 if (spi_cs_is_gpio_dt(spec) &&
     !gpio_is_ready_dt(&spec->config.cs.gpio)) {
  return 
# 708 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
        0
# 708 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
             ;
 }
 return 
# 710 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
       1
# 710 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
           ;
}
# 731 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_transceive(const struct device *dev,
        const struct spi_config *config,
        const struct spi_buf_set *tx_bufs,
        const struct spi_buf_set *rx_bufs);

static inline int z_impl_spi_transceive(const struct device *dev,
     const struct spi_config *config,
     const struct spi_buf_set *tx_bufs,
     const struct spi_buf_set *rx_bufs)
{
 const struct spi_driver_api *api =
  (const struct spi_driver_api *)dev->api;
 int ret;

 ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 ;

 return ret;
}
# 766 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
        const struct spi_buf_set *tx_bufs,
        const struct spi_buf_set *rx_bufs)
{
 return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
}
# 789 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_read(const struct device *dev,
      const struct spi_config *config,
      const struct spi_buf_set *rx_bufs)
{
 return spi_transceive(dev, config, 
# 793 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
                                   ((void *)0)
# 793 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                                       , rx_bufs);
}
# 808 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_read_dt(const struct spi_dt_spec *spec,
         const struct spi_buf_set *rx_bufs)
{
 return spi_read(spec->bus, &spec->config, rx_bufs);
}
# 830 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_write(const struct device *dev,
       const struct spi_config *config,
       const struct spi_buf_set *tx_bufs)
{
 return spi_transceive(dev, config, tx_bufs, 
# 834 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 3 4
                                            ((void *)0)
# 834 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
                                                );
}
# 849 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_write_dt(const struct spi_dt_spec *spec,
          const struct spi_buf_set *tx_bufs)
{
 return spi_write(spec->bus, &spec->config, tx_bufs);
}
# 1278 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_release(const struct device *dev,
     const struct spi_config *config);

static inline int z_impl_spi_release(const struct device *dev,
         const struct spi_config *config)
{
 const struct spi_driver_api *api =
  (const struct spi_driver_api *)dev->api;

 return api->release(dev, config);
}
# 1301 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
static inline int spi_release_dt(const struct spi_dt_spec *spec)
{
 return spi_release(spec->bus, &spec->config);
}
# 1314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h"
extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);


static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
{
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h" 3 4
0
# 37 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h"
);
 return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h"
extern int z_impl_spi_release(const struct device * dev, const struct spi_config * config);


static inline int spi_release(const struct device * dev, const struct spi_config * config)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 61 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h" 3 4
0
# 61 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/spi.h"
);
 return z_impl_spi_release(dev, config);
}
# 1315 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/spi.h" 2
# 8 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 1
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
struct device;


enum pm_device_flag {

 PM_DEVICE_FLAG_BUSY,

 PM_DEVICE_FLAG_TURN_ON_FAILED,

 PM_DEVICE_FLAG_PD_CLAIMED,




 PM_DEVICE_FLAG_WS_CAPABLE,

 PM_DEVICE_FLAG_WS_ENABLED,

 PM_DEVICE_FLAG_RUNTIME_ENABLED,

 PM_DEVICE_FLAG_STATE_LOCKED,

 PM_DEVICE_FLAG_PD,

 PM_DEVICE_FLAG_RUNTIME_AUTO,
};




enum pm_device_state {

 PM_DEVICE_STATE_ACTIVE,






 PM_DEVICE_STATE_SUSPENDED,

 PM_DEVICE_STATE_SUSPENDING,






 PM_DEVICE_STATE_OFF
};


enum pm_device_action {

 PM_DEVICE_ACTION_SUSPEND,

 PM_DEVICE_ACTION_RESUME,





 PM_DEVICE_ACTION_TURN_OFF,





 PM_DEVICE_ACTION_TURN_ON,
};
# 109 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
typedef int (*pm_device_action_cb_t)(const struct device *dev,
         enum pm_device_action action);
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
typedef 
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
       _Bool 
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
            (*pm_device_action_failed_cb_t)(const struct device *dev,
      int err);




struct pm_device {
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
 const struct device *domain;


 atomic_t flags;

 enum pm_device_state state;

 pm_device_action_cb_t action_cb;
};
# 334 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
const char *pm_device_state_str(enum pm_device_state state);
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
int pm_device_action_run(const struct device *dev,
  enum pm_device_action action);
# 366 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
void pm_device_children_action_run(const struct device *dev,
  enum pm_device_action action,
  pm_device_action_failed_cb_t failure_cb);
# 380 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
int pm_device_state_get(const struct device *dev,
   enum pm_device_state *state);
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
static inline void pm_device_init_suspended(const struct device *dev)
{
 struct pm_device *pm = dev->pm;

 pm->state = PM_DEVICE_STATE_SUSPENDED;
}
# 414 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
static inline void pm_device_init_off(const struct device *dev)
{
 struct pm_device *pm = dev->pm;

 pm->state = PM_DEVICE_STATE_OFF;
}
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
void pm_device_busy_set(const struct device *dev);
# 441 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
void pm_device_busy_clear(const struct device *dev);








# 449 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 449 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_is_any_busy(void);
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_is_busy(const struct device *dev);
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_wakeup_enable(const struct device *dev, 
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
                                                      _Bool 
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
                                                           enable);
# 484 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 484 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 484 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_wakeup_is_enabled(const struct device *dev);
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_wakeup_is_capable(const struct device *dev);
# 510 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
void pm_device_state_lock(const struct device *dev);
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
void pm_device_state_unlock(const struct device *dev);
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_state_is_locked(const struct device *dev);
# 541 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 541 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 541 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_on_power_domain(const struct device *dev);
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
int pm_device_power_domain_add(const struct device *dev,
          const struct device *domain);
# 571 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
int pm_device_power_domain_remove(const struct device *dev,
      const struct device *domain);
# 583 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"

# 583 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h" 3 4
_Bool 
# 583 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
    pm_device_is_powered(const struct device *dev);
# 598 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/pm/device.h"
int pm_device_driver_init(const struct device *dev, pm_device_action_cb_t action_cb);
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h" 1
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./pinctrl_soc.h" 1
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./pinctrl_soc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/dt-bindings/pinctrl/nrf-pinctrl.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./pinctrl_soc.h" 2
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./pinctrl_soc.h"
typedef uint32_t pinctrl_soc_pin_t;
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h" 2
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
struct pinctrl_state {

 const pinctrl_soc_pin_t *pins;

 uint8_t pin_cnt;

 uint8_t id;
};


struct pinctrl_dev_config {





 uintptr_t reg;


 const struct pinctrl_state *states;

 uint8_t state_cnt;
};
# 285 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
    const struct pinctrl_state **state);
# 304 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
      uintptr_t reg);
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
static inline int pinctrl_apply_state_direct(
 const struct pinctrl_dev_config *config,
 const struct pinctrl_state *state)
{
 uintptr_t reg;


 reg = config->reg;





 return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
}
# 342 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
          uint8_t id)
{
 int ret;
 const struct pinctrl_state *state;

 ret = pinctrl_lookup_state(config, id, &state);
 if (ret < 0) {
  return ret;
 }

 return pinctrl_apply_state_direct(config, state);
}
# 437 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/pinctrl.h"
int pinctrl_update_states(struct pinctrl_dev_config *config,
     const struct pinctrl_state *states,
     uint8_t state_cnt);
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2





# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 1
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 2


_Static_assert(( (8 < 8) || (8 == 8 && 34 < 66) || (8 == 8 && 34 == 66 && 0 < 0) ), "MDK version mismatch.");



# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_1(void) __attribute__((unused));
static 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_2(void) __attribute__((unused));
static 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_3(void) __attribute__((unused));
static 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_4(void) __attribute__((unused));
static 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_5(void) __attribute__((unused));
static 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_6(void) __attribute__((unused));
static 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_7(void) __attribute__((unused));
static 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_8(void) __attribute__((unused));
static 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_9(void) __attribute__((unused));
static 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_10(void) __attribute__((unused));
static 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_11(void) __attribute__((unused));
static 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_12(void) __attribute__((unused));
static 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_13(void) __attribute__((unused));
static 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_14(void) __attribute__((unused));
static 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_15(void) __attribute__((unused));
static 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_16(void) __attribute__((unused));
static 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_17(void) __attribute__((unused));
static 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_18(void) __attribute__((unused));
static 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_19(void) __attribute__((unused));
static 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_20(void) __attribute__((unused));
static 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_21(void) __attribute__((unused));
static 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_22(void) __attribute__((unused));
static 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_23(void) __attribute__((unused));
static 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_24(void) __attribute__((unused));
static 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_25(void) __attribute__((unused));
static 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_26(void) __attribute__((unused));
static 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_27(void) __attribute__((unused));
static 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_28(void) __attribute__((unused));
static 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_29(void) __attribute__((unused));
static 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_30(void) __attribute__((unused));
static 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_31(void) __attribute__((unused));
static 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_32(void) __attribute__((unused));
static 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_33(void) __attribute__((unused));
static 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_34(void) __attribute__((unused));
static 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_35(void) __attribute__((unused));
static 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_36(void) __attribute__((unused));
static 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_37(void) __attribute__((unused));
static 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_38(void) __attribute__((unused));
static 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_39(void) __attribute__((unused));
static 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_40(void) __attribute__((unused));
static 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_41(void) __attribute__((unused));
static 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_42(void) __attribute__((unused));
static 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_43(void) __attribute__((unused));
static 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_44(void) __attribute__((unused));
static 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_45(void) __attribute__((unused));
static 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_46(void) __attribute__((unused));
static 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_47(void) __attribute__((unused));
static 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_48(void) __attribute__((unused));
static 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_49(void) __attribute__((unused));
static 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_50(void) __attribute__((unused));
static 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_51(void) __attribute__((unused));
static 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_52(void) __attribute__((unused));
static 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_53(void) __attribute__((unused));
static 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_54(void) __attribute__((unused));
static 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_55(void) __attribute__((unused));
static 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_56(void) __attribute__((unused));
static 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_57(void) __attribute__((unused));
static 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_58(void) __attribute__((unused));
static 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_59(void) __attribute__((unused));
static 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_60(void) __attribute__((unused));
static 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_61(void) __attribute__((unused));
static 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_62(void) __attribute__((unused));
static 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_63(void) __attribute__((unused));
static 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_64(void) __attribute__((unused));
static 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_65(void) __attribute__((unused));
static 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_66(void) __attribute__((unused));
static 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_67(void) __attribute__((unused));
static 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_68(void) __attribute__((unused));
static 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_69(void) __attribute__((unused));
static 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_70(void) __attribute__((unused));
static 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_71(void) __attribute__((unused));
static 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_72(void) __attribute__((unused));
static 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_73(void) __attribute__((unused));
static 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_74(void) __attribute__((unused));
static 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_75(void) __attribute__((unused));
static 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_76(void) __attribute__((unused));
static 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_77(void) __attribute__((unused));
static 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_78(void) __attribute__((unused));
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_1(void)
{

        return 
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_2(void)
{

        return 
# 357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 568 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 568 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 568 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_3(void)
{

        return 
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 761 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_4(void)
{

        return 
# 773 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 773 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 786 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 786 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 786 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_5(void)
{

        return 
# 789 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 789 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_6(void)
{

        return 
# 817 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 817 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 1007 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 1028 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 1028 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 1028 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_7(void)
{

        return 
# 1031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 1031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 1221 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_8(void)
{

        return 
# 1245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 1245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 1435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 1456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 1456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 1456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_9(void)
{

        return 
# 1459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 1459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 1649 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 1670 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 1670 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 1670 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_10(void)
{

        return 
# 1673 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 1673 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 1863 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 1884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 1884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 1884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_11(void)
{

        return 
# 1887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 1887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 2077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 2098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 2098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 2098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_12(void)
{

        return 
# 2101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 2101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 2291 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 2312 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 2312 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 2312 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_13(void)
{

        return 
# 2315 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 2315 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 2505 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 2526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 2526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 2526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_14(void)
{

        return 
# 2529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 2529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 2719 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 2740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 2740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 2740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_15(void)
{

        return 
# 2743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 2743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 2933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 2954 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 2954 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 2954 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_16(void)
{

        return 
# 2957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 2957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 3147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 3168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 3168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 3168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_17(void)
{

        return 
# 3171 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 3171 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 3361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 3382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 3382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 3382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_18(void)
{

        return 
# 3385 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 3385 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 3575 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 3596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 3596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 3596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_19(void)
{

        return 
# 3599 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 3599 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 3789 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 3810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 3810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 3810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_20(void)
{

        return 
# 3813 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 3813 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 4003 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 4024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 4024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 4024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_21(void)
{

        return 
# 4027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 4027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 4217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 4238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 4238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 4238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_22(void)
{

        return 
# 4241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 4241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 4431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 4452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 4452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 4452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_23(void)
{

        return 
# 4455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 4455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 4645 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 4666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 4666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 4666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_24(void)
{

        return 
# 4669 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 4669 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 4859 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 4880 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 4880 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 4880 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_25(void)
{

        return 
# 4883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 4883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 5073 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 5094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 5094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 5094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_26(void)
{

        return 
# 5097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 5097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 5287 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 5308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 5308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 5308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_27(void)
{

        return 
# 5311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 5311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 5501 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 5522 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 5522 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 5522 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_28(void)
{

        return 
# 5525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 5525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 5715 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 5736 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 5736 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 5736 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_29(void)
{

        return 
# 5739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 5739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 5929 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 5950 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 5950 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 5950 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_30(void)
{

        return 
# 5953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 5953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 6143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 6164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 6164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 6164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_31(void)
{

        return 
# 6167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 6167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 6357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 6378 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 6378 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 6378 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_32(void)
{

        return 
# 6381 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 6381 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 6571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 6592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 6592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 6592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_33(void)
{

        return 
# 6595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 6595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 6785 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 6806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 6806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 6806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_34(void)
{

        return 
# 6809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 6809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 6999 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 7020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 7020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 7020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_35(void)
{

        return 
# 7023 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 7023 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 7213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 7234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 7234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 7234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_36(void)
{

        return 
# 7237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 7237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 7427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 7448 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 7448 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 7448 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_37(void)
{

        return 
# 7451 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 7451 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 7641 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 7662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 7662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 7662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_38(void)
{

        return 
# 7665 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 7665 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 7855 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 7876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 7876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 7876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_39(void)
{

        return 
# 7879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 7879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 8069 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 8090 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 8090 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 8090 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_40(void)
{

        return 
# 8093 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 8093 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 8283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 8304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 8304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 8304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_41(void)
{

        return 
# 8307 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 8307 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 8497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 8518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 8518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 8518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_42(void)
{

        return 
# 8521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 8521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 8711 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 8732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 8732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 8732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_43(void)
{

        return 
# 8735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 8735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 8925 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 8946 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 8946 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 8946 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_44(void)
{

        return 
# 8949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 8949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 9139 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 9160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 9160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 9160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_45(void)
{

        return 
# 9163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 9163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 9353 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 9374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 9374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 9374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_46(void)
{

        return 
# 9377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 9377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 9567 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 9588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 9588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 9588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_47(void)
{

        return 
# 9591 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 9591 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 9781 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 9802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 9802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 9802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_48(void)
{

        return 
# 9805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 9805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 9995 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 10016 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10016 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10016 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_49(void)
{

        return 
# 10019 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10019 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 10209 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 10218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_50(void)
{

        return 
# 10221 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10221 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 10234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_51(void)
{

        return 
# 10237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 10250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_52(void)
{

        return 
# 10253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 10266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_53(void)
{

        return 
# 10269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 10282 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10282 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10282 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_54(void)
{

        return 
# 10285 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10285 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 10310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_55(void)
{

        return 
# 10313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 10503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 10524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_56(void)
{

        return 
# 10527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 10717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 10738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_57(void)
{

        return 
# 10741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 10931 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 10952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 10952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 10952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_58(void)
{

        return 
# 10955 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 10955 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 11145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 11166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 11166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 11166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_59(void)
{

        return 
# 11169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 11169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 11359 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 11380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 11380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 11380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_60(void)
{

        return 
# 11383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 11383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 11573 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 11594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 11594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 11594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_61(void)
{

        return 
# 11597 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 11597 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 11787 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 11808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 11808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 11808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_62(void)
{

        return 
# 11811 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 11811 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 12001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 12022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 12022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 12022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_63(void)
{

        return 
# 12025 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 12025 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 12215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 12236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 12236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 12236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_64(void)
{

        return 
# 12239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 12239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 12429 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 12450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 12450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 12450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_65(void)
{

        return 
# 12453 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 12453 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 12643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 12664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 12664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 12664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_66(void)
{

        return 
# 12667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 12667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 12857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 12878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 12878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 12878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_67(void)
{

        return 
# 12881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 12881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 13071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 13092 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 13092 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 13092 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_68(void)
{

        return 
# 13095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 13095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 13285 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 13306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 13306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 13306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_69(void)
{

        return 
# 13309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 13309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 13499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 13520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 13520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 13520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_70(void)
{

        return 
# 13523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 13523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 13713 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 13734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 13734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 13734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_71(void)
{

        return 
# 13737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 13737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 13927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 13948 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 13948 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 13948 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_72(void)
{

        return 
# 13951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 13951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 14141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 14162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 14162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 14162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_73(void)
{

        return 
# 14165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 14165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 14355 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 14376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 14376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 14376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_74(void)
{

        return 
# 14379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 14379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 14569 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 14590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 14590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 14590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_75(void)
{

        return 
# 14593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 14593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 14783 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 14804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 14804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 14804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_76(void)
{

        return 
# 14807 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 14807 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 14997 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 15006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 15006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 15006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_77(void)
{

        return 
# 15009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 15009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;



}
# 15034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
static 
# 15034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
      _Bool 
# 15034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
           nrf51_errata_78(void)
{

        return 
# 15037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h" 3 4
              0
# 15037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
                   ;
# 15227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_erratas.h"
}
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_1(void) __attribute__((unused));
static 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_2(void) __attribute__((unused));
static 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_3(void) __attribute__((unused));
static 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_4(void) __attribute__((unused));
static 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_7(void) __attribute__((unused));
static 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_8(void) __attribute__((unused));
static 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_9(void) __attribute__((unused));
static 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_10(void) __attribute__((unused));
static 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_11(void) __attribute__((unused));
static 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_12(void) __attribute__((unused));
static 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_15(void) __attribute__((unused));
static 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_16(void) __attribute__((unused));
static 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_17(void) __attribute__((unused));
static 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_20(void) __attribute__((unused));
static 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_23(void) __attribute__((unused));
static 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_24(void) __attribute__((unused));
static 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_25(void) __attribute__((unused));
static 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_26(void) __attribute__((unused));
static 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_27(void) __attribute__((unused));
static 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_28(void) __attribute__((unused));
static 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_29(void) __attribute__((unused));
static 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_30(void) __attribute__((unused));
static 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_31(void) __attribute__((unused));
static 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_32(void) __attribute__((unused));
static 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_33(void) __attribute__((unused));
static 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_34(void) __attribute__((unused));
static 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_35(void) __attribute__((unused));
static 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_36(void) __attribute__((unused));
static 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_37(void) __attribute__((unused));
static 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_38(void) __attribute__((unused));
static 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_39(void) __attribute__((unused));
static 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_40(void) __attribute__((unused));
static 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_41(void) __attribute__((unused));
static 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_42(void) __attribute__((unused));
static 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_43(void) __attribute__((unused));
static 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_44(void) __attribute__((unused));
static 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_46(void) __attribute__((unused));
static 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_47(void) __attribute__((unused));
static 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_48(void) __attribute__((unused));
static 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_49(void) __attribute__((unused));
static 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_51(void) __attribute__((unused));
static 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_54(void) __attribute__((unused));
static 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_55(void) __attribute__((unused));
static 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_57(void) __attribute__((unused));
static 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_58(void) __attribute__((unused));
static 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_62(void) __attribute__((unused));
static 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_63(void) __attribute__((unused));
static 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_64(void) __attribute__((unused));
static 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_65(void) __attribute__((unused));
static 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_66(void) __attribute__((unused));
static 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_67(void) __attribute__((unused));
static 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_68(void) __attribute__((unused));
static 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_70(void) __attribute__((unused));
static 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_71(void) __attribute__((unused));
static 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_72(void) __attribute__((unused));
static 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_73(void) __attribute__((unused));
static 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_74(void) __attribute__((unused));
static 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_75(void) __attribute__((unused));
static 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_76(void) __attribute__((unused));
static 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_77(void) __attribute__((unused));
static 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_78(void) __attribute__((unused));
static 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_79(void) __attribute__((unused));
static 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_81(void) __attribute__((unused));
static 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_83(void) __attribute__((unused));
static 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_84(void) __attribute__((unused));
static 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_86(void) __attribute__((unused));
static 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_87(void) __attribute__((unused));
static 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_88(void) __attribute__((unused));
static 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_89(void) __attribute__((unused));
static 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_91(void) __attribute__((unused));
static 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_94(void) __attribute__((unused));
static 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_96(void) __attribute__((unused));
static 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_97(void) __attribute__((unused));
static 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_98(void) __attribute__((unused));
static 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_101(void) __attribute__((unused));
static 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_102(void) __attribute__((unused));
static 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_103(void) __attribute__((unused));
static 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_104(void) __attribute__((unused));
static 
# 120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_106(void) __attribute__((unused));
static 
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_107(void) __attribute__((unused));
static 
# 122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_108(void) __attribute__((unused));
static 
# 123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_109(void) __attribute__((unused));
static 
# 124 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 124 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_110(void) __attribute__((unused));
static 
# 125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_111(void) __attribute__((unused));
static 
# 126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_112(void) __attribute__((unused));
static 
# 127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_113(void) __attribute__((unused));
static 
# 128 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 128 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_115(void) __attribute__((unused));
static 
# 129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_116(void) __attribute__((unused));
static 
# 130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_117(void) __attribute__((unused));
static 
# 131 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 131 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_118(void) __attribute__((unused));
static 
# 132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_119(void) __attribute__((unused));
static 
# 133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_120(void) __attribute__((unused));
static 
# 134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_121(void) __attribute__((unused));
static 
# 135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_122(void) __attribute__((unused));
static 
# 136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_127(void) __attribute__((unused));
static 
# 137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_128(void) __attribute__((unused));
static 
# 138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_131(void) __attribute__((unused));
static 
# 139 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 139 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_132(void) __attribute__((unused));
static 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_133(void) __attribute__((unused));
static 
# 141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_134(void) __attribute__((unused));
static 
# 142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_135(void) __attribute__((unused));
static 
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_136(void) __attribute__((unused));
static 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_138(void) __attribute__((unused));
static 
# 145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_140(void) __attribute__((unused));
static 
# 146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_141(void) __attribute__((unused));
static 
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_142(void) __attribute__((unused));
static 
# 148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_143(void) __attribute__((unused));
static 
# 149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_144(void) __attribute__((unused));
static 
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_145(void) __attribute__((unused));
static 
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_146(void) __attribute__((unused));
static 
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_147(void) __attribute__((unused));
static 
# 153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_149(void) __attribute__((unused));
static 
# 154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_150(void) __attribute__((unused));
static 
# 155 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 155 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_151(void) __attribute__((unused));
static 
# 156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_153(void) __attribute__((unused));
static 
# 157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_154(void) __attribute__((unused));
static 
# 158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_155(void) __attribute__((unused));
static 
# 159 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 159 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_156(void) __attribute__((unused));
static 
# 160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_158(void) __attribute__((unused));
static 
# 161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_160(void) __attribute__((unused));
static 
# 162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_162(void) __attribute__((unused));
static 
# 163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_163(void) __attribute__((unused));
static 
# 164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_164(void) __attribute__((unused));
static 
# 165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_166(void) __attribute__((unused));
static 
# 166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_170(void) __attribute__((unused));
static 
# 167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_171(void) __attribute__((unused));
static 
# 168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_172(void) __attribute__((unused));
static 
# 169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_173(void) __attribute__((unused));
static 
# 170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_174(void) __attribute__((unused));
static 
# 171 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 171 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_176(void) __attribute__((unused));
static 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_178(void) __attribute__((unused));
static 
# 173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_179(void) __attribute__((unused));
static 
# 174 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 174 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_180(void) __attribute__((unused));
static 
# 175 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 175 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_181(void) __attribute__((unused));
static 
# 176 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 176 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_182(void) __attribute__((unused));
static 
# 177 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 177 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_183(void) __attribute__((unused));
static 
# 178 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 178 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_184(void) __attribute__((unused));
static 
# 179 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 179 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_186(void) __attribute__((unused));
static 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_187(void) __attribute__((unused));
static 
# 181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_189(void) __attribute__((unused));
static 
# 182 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 182 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_190(void) __attribute__((unused));
static 
# 183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_191(void) __attribute__((unused));
static 
# 184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_192(void) __attribute__((unused));
static 
# 185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_193(void) __attribute__((unused));
static 
# 186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_194(void) __attribute__((unused));
static 
# 187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_195(void) __attribute__((unused));
static 
# 188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_196(void) __attribute__((unused));
static 
# 189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_197(void) __attribute__((unused));
static 
# 190 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_198(void) __attribute__((unused));
static 
# 191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_199(void) __attribute__((unused));
static 
# 192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_200(void) __attribute__((unused));
static 
# 193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_201(void) __attribute__((unused));
static 
# 194 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 194 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_202(void) __attribute__((unused));
static 
# 195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_204(void) __attribute__((unused));
static 
# 196 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 196 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_208(void) __attribute__((unused));
static 
# 197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_209(void) __attribute__((unused));
static 
# 198 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 198 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_210(void) __attribute__((unused));
static 
# 199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_211(void) __attribute__((unused));
static 
# 200 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 200 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_212(void) __attribute__((unused));
static 
# 201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_213(void) __attribute__((unused));
static 
# 202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_214(void) __attribute__((unused));
static 
# 203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_215(void) __attribute__((unused));
static 
# 204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_216(void) __attribute__((unused));
static 
# 205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_217(void) __attribute__((unused));
static 
# 206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_218(void) __attribute__((unused));
static 
# 207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_219(void) __attribute__((unused));
static 
# 208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_220(void) __attribute__((unused));
static 
# 209 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 209 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_223(void) __attribute__((unused));
static 
# 210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_225(void) __attribute__((unused));
static 
# 211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_228(void) __attribute__((unused));
static 
# 212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_230(void) __attribute__((unused));
static 
# 213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_231(void) __attribute__((unused));
static 
# 214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_232(void) __attribute__((unused));
static 
# 215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_233(void) __attribute__((unused));
static 
# 216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_236(void) __attribute__((unused));
static 
# 217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_237(void) __attribute__((unused));
static 
# 218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_241(void) __attribute__((unused));
static 
# 219 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 219 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_242(void) __attribute__((unused));
static 
# 220 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 220 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_243(void) __attribute__((unused));
static 
# 221 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 221 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_244(void) __attribute__((unused));
static 
# 222 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_245(void) __attribute__((unused));
static 
# 223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_246(void) __attribute__((unused));
static 
# 224 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 224 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_248(void) __attribute__((unused));
static 
# 225 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 225 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_249(void) __attribute__((unused));
static 
# 226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_250(void) __attribute__((unused));
static 
# 227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_251(void) __attribute__((unused));
static 
# 228 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 228 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_252(void) __attribute__((unused));
static 
# 229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_254(void) __attribute__((unused));
static 
# 230 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 230 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_255(void) __attribute__((unused));
static 
# 231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_256(void) __attribute__((unused));
static 
# 232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_257(void) __attribute__((unused));
static 
# 233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_258(void) __attribute__((unused));
static 
# 234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_259(void) __attribute__((unused));
static 
# 235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_262(void) __attribute__((unused));
static 
# 236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_263(void) __attribute__((unused));
static 
# 237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_265(void) __attribute__((unused));
static 
# 238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_266(void) __attribute__((unused));
static 
# 239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_267(void) __attribute__((unused));
static 
# 240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_268(void) __attribute__((unused));
static 
# 241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_269(void) __attribute__((unused));
static 
# 242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_270(void) __attribute__((unused));
static 
# 243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_271(void) __attribute__((unused));
static 
# 244 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 244 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_272(void) __attribute__((unused));
static 
# 245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_273(void) __attribute__((unused));
# 259 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 259 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 259 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_1(void)
{
# 290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_2(void)
{
# 337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 353 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 353 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 353 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_3(void)
{
# 384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_4(void)
{
# 431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_7(void)
{
# 478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_8(void)
{
# 525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 541 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 541 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 541 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_9(void)
{
# 572 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 572 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 572 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_10(void)
{
# 619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_11(void)
{
# 666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 682 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 682 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 682 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_12(void)
{
# 724 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 724 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 724 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_15(void)
{
# 768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 798 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 798 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 800 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 800 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 858 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 858 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 858 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_16(void)
{
# 905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_17(void)
{
# 952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 952 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_20(void)
{
# 1000 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 1025 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 1030 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1030 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 1032 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1032 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 1034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 1036 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1036 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 1038 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1038 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 1040 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1040 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 1042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 1122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_23(void)
{
# 1169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_24(void)
{
# 1216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_25(void)
{
# 1263 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1263 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1263 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_26(void)
{
# 1310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1326 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1326 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1326 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_27(void)
{
# 1357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_28(void)
{
# 1404 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1404 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1404 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1420 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1420 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1420 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_29(void)
{
# 1451 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1451 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1451 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1467 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1467 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1467 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_30(void)
{
# 1498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1517 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1517 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1517 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_31(void)
{
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_32(void)
{
# 1655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1671 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1671 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1671 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_33(void)
{
# 1702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_34(void)
{
# 1749 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1749 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1749 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_35(void)
{
# 1796 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1796 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1796 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_36(void)
{
# 1844 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 1869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 1874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 1876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 1878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 1880 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1880 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 1882 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1882 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 1884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 1886 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 1886 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 1966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 1966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 1966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 1982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 1982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 1982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_37(void)
{
# 2013 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2013 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2013 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_38(void)
{
# 2060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_39(void)
{
# 2107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_40(void)
{
# 2154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_41(void)
{
# 2201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_42(void)
{
# 2248 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2248 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2248 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_43(void)
{
# 2295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_44(void)
{
# 2342 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2342 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2342 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_46(void)
{
# 2389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_47(void)
{
# 2436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_48(void)
{
# 2483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_49(void)
{
# 2530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_51(void)
{
# 2588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_54(void)
{
# 2626 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 2651 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 2656 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2656 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 2658 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2658 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 2660 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2660 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 2662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 2664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 2666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2666 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 2668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 2672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_55(void)
{
# 2714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 2739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 2744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 2746 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2746 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 2748 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2748 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 2750 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2750 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 2752 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2752 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 2754 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2754 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 2756 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2756 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 2792 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2792 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2792 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_57(void)
{
# 2839 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2839 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2839 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_58(void)
{
# 2877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 2902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 2907 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 2907 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 2909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 2911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 2913 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2913 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 2915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 2917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 2919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 2919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 2923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2939 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2939 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2939 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_62(void)
{
# 2970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 2970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 2970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 2986 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 2986 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 2986 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_63(void)
{
# 3017 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3017 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3017 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_64(void)
{
# 3075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3091 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3091 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3091 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_65(void)
{
# 3122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_66(void)
{
# 3170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 3195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 3200 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3200 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 3202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 3204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 3206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 3208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 3210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 3212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 3292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3308 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_67(void)
{
# 3350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_68(void)
{
# 3394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 3419 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 3424 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 3424 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 3426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 3428 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3428 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 3430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 3432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 3434 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3434 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 3436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 3436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 3484 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3484 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3484 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_70(void)
{
# 3531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_71(void)
{
# 3578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_72(void)
{
# 3636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3652 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3652 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3652 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_73(void)
{
# 3683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_74(void)
{
# 3741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_75(void)
{
# 3799 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3799 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3799 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_76(void)
{
# 3857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_77(void)
{
# 3967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 3967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 3967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 3989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 3989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 3989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_78(void)
{
# 4015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 4040 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 4049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 4051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 4053 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4053 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 4055 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4055 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 4057 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4057 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 4137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_79(void)
{
# 4195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4215 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_81(void)
{
# 4239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 4264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 4273 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4273 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 4275 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4275 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 4277 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4277 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 4279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 4281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 4329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4349 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4349 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4349 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_83(void)
{
# 4373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 4398 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 4407 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4407 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 4409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 4411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 4413 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4413 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 4415 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4415 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 4463 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4463 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4463 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4479 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4479 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4479 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_84(void)
{
# 4521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_86(void)
{
# 4579 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4579 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4579 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4598 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4598 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4598 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_87(void)
{
# 4621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 4646 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4651 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4651 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 4655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 4657 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4657 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 4659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 4661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 4663 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4663 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 4699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_88(void)
{
# 4809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_89(void)
{
# 4847 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 4872 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 4881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 4883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 4885 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4885 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 4887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 4889 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4889 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 4893 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4893 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_91(void)
{
# 4951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 4951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 4966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 4966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 4966 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_94(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 4981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 4983 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 4983 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 4985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 4987 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4987 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 4989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 4991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 4993 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 4993 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 4997 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 4997 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_96(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5043 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5043 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_97(void)
{
# 5081 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 5106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_98(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5159 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5159 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5169 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_101(void)
{
# 5231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_102(void)
{
# 5289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5304 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_103(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5319 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5319 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5321 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5321 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_104(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5365 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5365 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5369 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5369 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5375 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5375 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5381 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5381 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_106(void)
{
# 5439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_107(void)
{
# 5497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_108(void)
{
# 5555 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5555 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5555 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_109(void)
{
# 5613 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 5613 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5613 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5628 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5628 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5628 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_110(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5645 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5645 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5649 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5649 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5651 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5651 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_111(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5689 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5689 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5693 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5693 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5695 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5695 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5697 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5697 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5705 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5705 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5720 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5720 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5720 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_112(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5751 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5751 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_113(void)
{
# 5789 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 5814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5821 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5821 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5823 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5823 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5825 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5825 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5831 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5831 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_115(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5867 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5867 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5896 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5896 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5896 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_116(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5913 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5913 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5942 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5942 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5942 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_117(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 5957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 5957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 5959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 5961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 5963 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5963 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 5965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 5967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 5969 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 5969 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 5973 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 5973 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 5988 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 5988 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 5988 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_118(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6003 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6003 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6005 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6005 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6007 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6007 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6013 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6013 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6019 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6019 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_119(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6053 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6053 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6055 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6055 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6057 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6057 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6061 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6061 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6065 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6065 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6080 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6080 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6080 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_120(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6099 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6099 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_121(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_122(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 6191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 6193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 6195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 6197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 6199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 6203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_127(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6239 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6249 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6249 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_128(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6285 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6285 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6287 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6287 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6291 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6291 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_131(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_132(void)
{
# 6399 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 6399 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6399 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_133(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6429 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6429 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6433 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6433 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6460 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6460 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6460 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_134(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6475 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6475 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6477 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6477 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6479 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6479 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6485 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6485 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6487 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6487 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_135(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6533 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6533 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_136(void)
{
# 6585 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 6610 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6615 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6615 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6617 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6617 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 6619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 6621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 6623 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6623 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 6625 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6625 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 6627 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6627 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 6707 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 6707 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6707 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6723 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6723 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6723 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_138(void)
{
# 6765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 6765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6765 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6780 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6780 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6780 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_140(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6795 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6795 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6797 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6797 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6799 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6799 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6803 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6803 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6807 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6807 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6811 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6811 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_141(void)
{
# 6869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 6869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_142(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6899 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6899 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6903 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6903 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6907 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6907 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 6932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 6932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 6932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_143(void)
{
# 6953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 6978 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 6983 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 6983 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 6985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 6987 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6987 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 6989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 6991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 6993 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6993 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 6995 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 6995 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 6999 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 6999 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7014 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7014 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7014 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_144(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7041 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7041 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_145(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7079 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7079 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7081 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7081 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7083 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7083 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7087 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7087 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7091 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7091 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_146(void)
{
# 7149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_147(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7179 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7179 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7189 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_149(void)
{
# 7253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_150(void)
{
# 7293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 7318 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7325 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 7355 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7355 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7355 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_151(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7385 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7385 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7391 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7391 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7401 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7401 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7418 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7418 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7418 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_153(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 7439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7439 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 7441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 7443 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7443 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 7445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 7447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 7481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7496 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7496 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7496 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_154(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7511 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7511 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7517 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7517 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7519 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7519 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7523 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_155(void)
{
# 7571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 7596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7601 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7601 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7603 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7603 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 7605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 7607 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7607 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 7609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 7611 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7611 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 7613 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7613 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 7661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7681 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7681 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7681 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_156(void)
{
# 7705 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 7730 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7737 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7743 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 7795 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7795 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7795 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_158(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7825 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7825 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7831 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7831 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7833 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7833 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7837 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7837 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7841 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7841 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7856 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_160(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_162(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 7917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 7917 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 7919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 7921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 7923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 7925 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7925 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 7927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 7929 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 7929 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 7933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 7949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 7949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 7949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_163(void)
{
# 7991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 7991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 7991 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_164(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8021 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8021 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8023 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8023 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 8025 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8025 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 8027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 8029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 8031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8031 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 8033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 8037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8037 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8052 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8052 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8052 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_166(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8067 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8067 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8069 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8069 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8073 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8073 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8075 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8079 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8079 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 8083 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8083 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_170(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 8165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 8165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8165 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_171(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 8211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_172(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 8243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8249 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8249 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8253 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 8257 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8257 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_173(void)
{
# 8305 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 8330 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8337 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8339 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8339 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8343 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8343 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8345 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8345 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8347 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8347 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 8427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 8427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8442 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8442 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8442 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_174(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8457 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8457 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 8459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8461 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8461 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8463 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8463 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8465 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8465 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8467 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8467 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8469 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8469 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 8473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8495 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8495 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8495 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_176(void)
{
# 8521 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 8546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8551 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8551 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8553 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8553 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8555 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8555 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8557 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8557 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8561 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8561 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 8643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 8643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_178(void)
{
# 8701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 8701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8721 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8721 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8721 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_179(void)
{
# 8745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 8770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8775 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8775 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8777 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8777 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 8779 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8779 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 8781 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8781 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 8783 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8783 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 8785 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8785 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 8787 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8787 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 8835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 8835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8850 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_180(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8867 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8867 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 8869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8869 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 8871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8871 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 8873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8873 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 8875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8875 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 8877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 8881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8881 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_181(void)
{
# 8919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 8944 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 8949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 8949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 8951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8951 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 8953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 8955 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8955 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 8957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8957 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 8959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 8961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 8961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 8965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 8965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 8981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 8981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 8981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_182(void)
{
# 9012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9012 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9033 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_183(void)
{
# 9058 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 9083 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9088 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9088 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 9090 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9090 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9092 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9092 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9096 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9096 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 9166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_184(void)
{
# 9197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 9208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9216 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 9298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_186(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9328 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9328 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9330 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9330 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9332 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9332 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 9334 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9334 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 9336 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9336 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 9338 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9338 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 9340 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9340 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 9344 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9344 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_187(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9378 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9378 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9386 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9386 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 9426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9441 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_189(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9458 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9458 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9460 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9460 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 9462 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9462 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 9464 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9464 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 9466 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9466 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 9468 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9468 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 9472 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9472 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_190(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9516 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9516 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 9554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9569 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9569 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9569 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_191(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9586 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9586 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9596 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 9600 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9600 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_192(void)
{
# 9640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 9665 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9670 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9670 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 9672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9676 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9676 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 9678 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9678 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 9680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 9682 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9682 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 9702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_193(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9736 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9736 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9742 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9742 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9744 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 9748 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9748 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9767 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9767 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9767 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_194(void)
{
# 9790 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 9815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 9822 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9822 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9828 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9828 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9830 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9830 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9832 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9832 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 9868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 9868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9883 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_195(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 9898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 9900 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9900 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9906 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9906 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9910 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9910 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 9914 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 9914 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 9933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 9933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 9933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_196(void)
{
# 9956 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 9981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 9986 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9986 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 9988 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9988 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 9990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 9992 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9992 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 9994 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9994 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 9996 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9996 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 9998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 9998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 10034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10034 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_197(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 10066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 10068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 10072 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10072 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 10074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 10076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 10080 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10080 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10095 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_198(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 10112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 10126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_199(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10166 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 10172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10187 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_200(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 10206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10206 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 10208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 10210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 10212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 10214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 10218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10236 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_201(void)
{
# 10258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 10283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10288 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10288 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10294 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10294 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 10296 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10296 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 10298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 10300 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10300 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }
# 10320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10335 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_202(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 10352 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10352 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10356 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10356 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 10358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 10360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    default:
                        return 
# 10362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                }
            }

        return 
# 10366 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10366 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_204(void)
{
# 10406 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 10431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10436 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10438 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10438 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10440 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10440 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10442 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10442 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10444 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10444 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10448 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10448 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 10468 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10468 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10468 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10483 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_208(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10502 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10502 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10504 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10504 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10506 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 10514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_209(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10544 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10544 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10548 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10548 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10550 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10550 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10552 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10552 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10556 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10556 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 10560 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10560 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10582 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10582 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10582 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_210(void)
{
# 10608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 10633 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10638 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10638 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 10640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 10642 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10642 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10646 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10646 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10648 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10648 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10650 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10650 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 10730 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10730 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10730 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_211(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 10766 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10766 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 10768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10768 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10770 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10772 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10772 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10774 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10774 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10776 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10776 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 10812 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10812 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10812 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 10834 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 10834 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 10834 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_212(void)
{
# 10860 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 10885 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 10890 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10890 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 10892 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 10892 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 10894 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10894 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 10896 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10896 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 10898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 10900 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10900 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 10902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 10902 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 10982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 10982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 10982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_213(void)
{
# 11024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 11049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11054 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11054 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11058 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11058 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 11100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_214(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 11146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_215(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11176 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11176 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11178 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11178 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11182 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11182 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11186 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 11192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_216(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11222 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11222 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11224 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11224 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11228 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11228 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11230 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11230 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 11238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11238 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11255 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11255 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11255 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_217(void)
{
# 11310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11310 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_218(void)
{
# 11352 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 11377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 11382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 11384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 11384 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 11386 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11386 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11392 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11392 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 11430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_219(void)
{
# 11478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 11503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11514 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11516 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11516 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 11600 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11600 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11600 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11616 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11616 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11616 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_220(void)
{
# 11658 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11658 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11658 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_223(void)
{
# 11716 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11716 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11716 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11732 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_225(void)
{
# 11774 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11774 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11774 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_228(void)
{
# 11803 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 11812 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11812 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 11814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 11816 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11816 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 11818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 11820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 11822 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11822 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 11824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 11824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 11890 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11890 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11890 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_230(void)
{
# 11932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11947 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11947 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11947 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_231(void)
{
# 11974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 11974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 11974 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 11990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 11990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 11990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_232(void)
{
# 12030 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12030 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12030 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_233(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12072 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12072 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_236(void)
{







            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12160 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_237(void)
{
# 12237 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12246 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12246 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12248 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12248 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12252 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12252 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12254 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12254 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12256 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12256 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12346 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12346 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12346 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_241(void)
{
# 12372 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 12397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 12402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 12404 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 12404 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 12406 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12406 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12410 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12410 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12412 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12412 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12512 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_242(void)
{







            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12532 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12532 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12534 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12534 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12536 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12536 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12538 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12538 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12540 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12540 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12542 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12542 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12590 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12607 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12607 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12607 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_243(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12626 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12626 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12628 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12628 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12630 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12630 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12632 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12632 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12634 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12634 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12672 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12687 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12687 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12687 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_244(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12706 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12706 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12708 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12708 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12710 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12710 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12712 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12712 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 12718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_245(void)
{
# 12766 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 12791 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12796 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12796 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12798 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12798 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12800 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12800 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 12888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 12888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 12888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 12908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 12908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 12908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_246(void)
{
# 12919 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 12928 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12928 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 12930 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12930 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 12932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12932 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 12934 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12934 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 12936 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12936 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 12938 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12938 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 12940 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 12940 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 13020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13020 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_248(void)
{
# 13049 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 13058 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13058 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 13060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13060 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 13062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 13064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 13066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13066 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 13068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 13070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13070 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 13136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13158 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_249(void)
{
# 13171 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 13196 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 13201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 13203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13203 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 13205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 13207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13207 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 13209 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13209 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 13211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 13213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 13293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_250(void)
{
# 13351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_251(void)
{
# 13409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13430 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_252(void)
{
# 13455 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 13480 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 13485 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13485 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 13487 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13487 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 13489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 13491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 13493 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13493 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 13495 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13495 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 13497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 13563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13578 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_254(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 13593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 13595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 13597 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13597 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x03ul:
                        return 
# 13599 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13599 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x04ul:
                        return 
# 13601 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 13601 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x05ul:
                        return 
# 13603 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13603 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 13605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 13609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_255(void)
{
# 13647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13662 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_256(void)
{
# 13689 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13689 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13689 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_configuration_257(void)
{
# 13727 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13727 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13727 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13745 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_258(void)
{
# 13819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13836 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13836 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13836 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_259(void)
{






            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 13853 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13853 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x01ul:
                        return 
# 13855 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13855 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x02ul:
                        return 
# 13857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 13859 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13859 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 13861 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13861 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 13863 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13863 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 13865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 13865 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 13901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 13901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 13901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 13920 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 13920 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 13920 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_262(void)
{
# 14011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_263(void)
{
# 14103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_265(void)
{
# 14145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_266(void)
{
# 14193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
# 14218 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 14223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 14223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 14225 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 14225 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 14227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14227 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 14229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 14231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14231 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 14233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 14235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }
# 14315 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14315 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14315 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_267(void)
{
# 14373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14389 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_268(void)
{
# 14431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_269(void)
{
# 14473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14488 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14488 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14488 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_270(void)
{




            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;


            if (var1 == 0x08)
            {
                switch(var2)
                {
                    case 0x00ul:
                        return 
# 14503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 14503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x01ul:
                        return 
# 14505 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              0
# 14505 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                   ;
                    case 0x02ul:
                        return 
# 14507 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14507 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x03ul:
                        return 
# 14509 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14509 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x04ul:
                        return 
# 14511 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14511 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    case 0x05ul:
                        return 
# 14513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                    default:
                        return 
# 14515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
                              1
# 14515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                                  ;
                }
            }

        return 
# 14519 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14519 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14535 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14535 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14535 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_271(void)
{
# 14577 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14577 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14577 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_272(void)
{
# 14619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 14635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
static 
# 14635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
      _Bool 
# 14635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
           nrf52_errata_273(void)
{
# 14675 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
        return 
# 14675 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h" 3 4
              0
# 14675 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_erratas.h"
                   ;

}
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_1(void) __attribute__((unused));
static 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_2(void) __attribute__((unused));
static 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_3(void) __attribute__((unused));
static 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_4(void) __attribute__((unused));
static 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_5(void) __attribute__((unused));
static 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_6(void) __attribute__((unused));
static 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_7(void) __attribute__((unused));
static 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_8(void) __attribute__((unused));
static 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_9(void) __attribute__((unused));
static 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_10(void) __attribute__((unused));
static 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_11(void) __attribute__((unused));
static 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_12(void) __attribute__((unused));
static 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_13(void) __attribute__((unused));
static 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_14(void) __attribute__((unused));
static 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_15(void) __attribute__((unused));
static 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_16(void) __attribute__((unused));
static 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_18(void) __attribute__((unused));
static 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_19(void) __attribute__((unused));
static 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_20(void) __attribute__((unused));
static 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_21(void) __attribute__((unused));
static 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_22(void) __attribute__((unused));
static 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_23(void) __attribute__((unused));
static 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_26(void) __attribute__((unused));
static 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_27(void) __attribute__((unused));
static 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_28(void) __attribute__((unused));
static 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_29(void) __attribute__((unused));
static 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_30(void) __attribute__((unused));
static 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_31(void) __attribute__((unused));
static 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_32(void) __attribute__((unused));
static 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_33(void) __attribute__((unused));
static 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 72 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_34(void) __attribute__((unused));
static 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 73 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_36(void) __attribute__((unused));
static 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 74 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_37(void) __attribute__((unused));
static 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_42(void) __attribute__((unused));
static 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 76 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_43(void) __attribute__((unused));
static 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 77 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_44(void) __attribute__((unused));
static 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 78 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_45(void) __attribute__((unused));
static 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 79 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_46(void) __attribute__((unused));
static 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 80 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_47(void) __attribute__((unused));
static 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 81 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_49(void) __attribute__((unused));
static 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 82 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_50(void) __attribute__((unused));
static 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_51(void) __attribute__((unused));
static 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 84 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_52(void) __attribute__((unused));
static 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 85 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_53(void) __attribute__((unused));
static 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_54(void) __attribute__((unused));
static 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 87 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_55(void) __attribute__((unused));
static 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 88 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_57(void) __attribute__((unused));
static 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 89 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_58(void) __attribute__((unused));
static 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 90 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_59(void) __attribute__((unused));
static 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 91 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_62(void) __attribute__((unused));
static 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 92 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_64(void) __attribute__((unused));
static 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_65(void) __attribute__((unused));
static 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 94 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_66(void) __attribute__((unused));
static 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 95 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_67(void) __attribute__((unused));
static 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 96 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_69(void) __attribute__((unused));
static 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 97 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_70(void) __attribute__((unused));
static 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 98 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_71(void) __attribute__((unused));
static 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 99 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_72(void) __attribute__((unused));
static 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 100 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_73(void) __attribute__((unused));
static 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 101 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_74(void) __attribute__((unused));
static 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_75(void) __attribute__((unused));
static 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 103 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_76(void) __attribute__((unused));
static 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 104 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_77(void) __attribute__((unused));
static 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_79(void) __attribute__((unused));
static 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_80(void) __attribute__((unused));
static 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 107 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_81(void) __attribute__((unused));
static 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 108 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_82(void) __attribute__((unused));
static 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_83(void) __attribute__((unused));
static 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 110 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_84(void) __attribute__((unused));
static 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 111 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_85(void) __attribute__((unused));
static 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 112 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_86(void) __attribute__((unused));
static 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_87(void) __attribute__((unused));
static 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_90(void) __attribute__((unused));
static 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_91(void) __attribute__((unused));
static 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_93(void) __attribute__((unused));
static 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 117 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_95(void) __attribute__((unused));
static 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_97(void) __attribute__((unused));
static 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 119 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_99(void) __attribute__((unused));
static 
# 120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_103(void) __attribute__((unused));
static 
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_105(void) __attribute__((unused));
static 
# 122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 122 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_106(void) __attribute__((unused));
static 
# 123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_107(void) __attribute__((unused));
static 
# 124 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 124 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_109(void) __attribute__((unused));
static 
# 125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 125 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_110(void) __attribute__((unused));
static 
# 126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 126 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_112(void) __attribute__((unused));
static 
# 127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 127 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_113(void) __attribute__((unused));
static 
# 128 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 128 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_114(void) __attribute__((unused));
static 
# 129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 129 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_115(void) __attribute__((unused));
static 
# 130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_116(void) __attribute__((unused));
static 
# 131 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 131 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_117(void) __attribute__((unused));
static 
# 132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_119(void) __attribute__((unused));
static 
# 133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_121(void) __attribute__((unused));
static 
# 134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 134 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_122(void) __attribute__((unused));
static 
# 135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_133(void) __attribute__((unused));
static 
# 136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_134(void) __attribute__((unused));
static 
# 137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 137 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_135(void) __attribute__((unused));
static 
# 138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_136(void) __attribute__((unused));
static 
# 139 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 139 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_137(void) __attribute__((unused));
static 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 140 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_138(void) __attribute__((unused));
static 
# 141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_140(void) __attribute__((unused));
static 
# 142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 142 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_152(void) __attribute__((unused));
static 
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 143 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_153(void) __attribute__((unused));
static 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_154(void) __attribute__((unused));
static 
# 145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 145 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_155(void) __attribute__((unused));
static 
# 146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_157(void) __attribute__((unused));
static 
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_158(void) __attribute__((unused));
static 
# 148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 148 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_159(void) __attribute__((unused));
static 
# 149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_160(void) __attribute__((unused));
static 
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_161(void) __attribute__((unused));
static 
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_162(void) __attribute__((unused));
static 
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_163(void) __attribute__((unused));
static 
# 153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_165(void) __attribute__((unused));
static 
# 154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 154 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_166(void) __attribute__((unused));
static 
# 155 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 155 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_167(void) __attribute__((unused));
static 
# 156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 156 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_168(void) __attribute__((unused));
static 
# 157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_169(void) __attribute__((unused));
# 174 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 174 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 174 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_1(void)
{

        return 
# 177 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 177 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_2(void)
{

        return 
# 232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 267 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 284 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 284 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 284 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_3(void)
{

        return 
# 287 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 287 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 322 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 339 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 339 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 339 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_4(void)
{

        return 
# 342 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 342 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_5(void)
{

        return 
# 397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_6(void)
{

        return 
# 452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 482 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 499 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_7(void)
{

        return 
# 502 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 502 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 537 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_8(void)
{

        return 
# 557 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 557 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_9(void)
{

        return 
# 612 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 612 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 647 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_10(void)
{

        return 
# 667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 697 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_11(void)
{

        return 
# 717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 747 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_12(void)
{

        return 
# 767 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 767 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 802 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_13(void)
{

        return 
# 823 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 823 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 862 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_14(void)
{

        return 
# 882 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 882 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 912 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 930 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 930 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 930 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_15(void)
{

        return 
# 933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 933 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 972 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_16(void)
{

        return 
# 992 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 992 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_18(void)
{

        return 
# 1042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1077 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1094 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_19(void)
{

        return 
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_20(void)
{

        return 
# 1153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1210 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_21(void)
{

        return 
# 1213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1252 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_22(void)
{

        return 
# 1272 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1272 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1307 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_23(void)
{

        return 
# 1327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_26(void)
{

        return 
# 1383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1422 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1440 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1440 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1440 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_27(void)
{

        return 
# 1443 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1443 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1482 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1500 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_28(void)
{

        return 
# 1503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1503 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1542 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1559 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_29(void)
{

        return 
# 1562 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1562 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1592 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_30(void)
{

        return 
# 1612 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1612 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1642 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1660 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1660 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1660 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_31(void)
{

        return 
# 1663 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1663 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1702 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1719 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1719 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1719 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_32(void)
{

        return 
# 1722 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1722 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1752 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1769 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1769 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1769 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_33(void)
{

        return 
# 1772 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1772 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1807 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1824 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_34(void)
{

        return 
# 1827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1827 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1857 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1874 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_36(void)
{

        return 
# 1877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1912 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 1921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1921 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_37(void)
{

        return 
# 1924 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1924 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;



}
# 1945 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 1945 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 1945 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_42(void)
{

        return 
# 1948 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 1948 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 1983 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2000 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2000 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2000 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_43(void)
{

        return 
# 2003 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2003 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2038 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_44(void)
{

        return 
# 2059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2098 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2115 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_45(void)
{

        return 
# 2118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2170 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_46(void)
{

        return 
# 2173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2226 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_47(void)
{

        return 
# 2229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2229 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2268 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2286 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2286 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2286 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_49(void)
{

        return 
# 2289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2328 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2345 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2345 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2345 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_50(void)
{

        return 
# 2348 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2348 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_51(void)
{

        return 
# 2403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2438 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_52(void)
{

        return 
# 2459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2498 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2515 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_53(void)
{

        return 
# 2518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2518 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2553 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2570 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2570 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2570 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_54(void)
{

        return 
# 2573 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2573 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2603 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2621 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_55(void)
{

        return 
# 2624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2663 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_57(void)
{

        return 
# 2683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2718 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2735 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_58(void)
{

        return 
# 2738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2738 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2773 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2790 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2790 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2790 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_59(void)
{

        return 
# 2793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2793 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2828 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2846 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2846 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2846 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_62(void)
{

        return 
# 2849 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2849 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2905 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_64(void)
{

        return 
# 2908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2908 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2943 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 2960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 2960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 2960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_65(void)
{

        return 
# 2963 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 2963 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 2998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3015 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_66(void)
{

        return 
# 3018 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3018 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3053 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3071 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_67(void)
{

        return 
# 3074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3074 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_69(void)
{

        return 
# 3133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3133 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3168 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_70(void)
{

        return 
# 3188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3188 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_71(void)
{

        return 
# 3243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3278 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3295 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_72(void)
{

        return 
# 3298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3298 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3333 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3351 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_73(void)
{

        return 
# 3354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3354 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_74(void)
{

        return 
# 3414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3453 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3470 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3470 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3470 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_75(void)
{

        return 
# 3473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3525 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_76(void)
{

        return 
# 3528 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3528 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3563 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_77(void)
{

        return 
# 3584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3623 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3640 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_79(void)
{

        return 
# 3643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3678 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3695 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3695 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3695 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_80(void)
{

        return 
# 3698 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3698 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3733 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3750 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3750 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3750 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_81(void)
{

        return 
# 3753 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3753 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3788 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3805 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_82(void)
{

        return 
# 3808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3843 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3860 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3860 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3860 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_83(void)
{

        return 
# 3863 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3863 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3915 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_84(void)
{

        return 
# 3918 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3918 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 3953 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 3970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 3970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 3970 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_85(void)
{

        return 
# 3973 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 3973 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4008 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4026 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4026 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4026 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_86(void)
{

        return 
# 4029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4029 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_87(void)
{

        return 
# 4088 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4088 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4118 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4135 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_90(void)
{

        return 
# 4138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4138 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4190 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4190 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4190 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_91(void)
{

        return 
# 4193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4240 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_93(void)
{

        return 
# 4243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4243 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4273 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_95(void)
{

        return 
# 4293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4293 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_97(void)
{

        return 
# 4344 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4344 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_99(void)
{

        return 
# 4403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4438 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_103(void)
{

        return 
# 4450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;



}
# 4471 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4471 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4471 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_105(void)
{

        return 
# 4474 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4474 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4509 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4526 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_106(void)
{

        return 
# 4529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4564 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_107(void)
{

        return 
# 4584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4619 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4636 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_109(void)
{

        return 
# 4639 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4639 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4674 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_110(void)
{

        return 
# 4694 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4694 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4729 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4746 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4746 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4746 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_112(void)
{

        return 
# 4749 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4749 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4784 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_113(void)
{

        return 
# 4804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4804 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4834 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4851 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4851 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4851 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_114(void)
{

        return 
# 4854 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4854 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4901 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_115(void)
{

        return 
# 4904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4939 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 4956 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 4956 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 4956 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_116(void)
{

        return 
# 4959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 4959 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 4989 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5006 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_117(void)
{

        return 
# 5009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5039 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5056 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_119(void)
{

        return 
# 5059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5089 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_121(void)
{

        return 
# 5109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_122(void)
{

        return 
# 5164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5194 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5211 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_133(void)
{

        return 
# 5214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5214 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5249 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_134(void)
{

        return 
# 5269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5299 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_135(void)
{

        return 
# 5320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5359 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_136(void)
{

        return 
# 5379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_137(void)
{

        return 
# 5435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5474 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5491 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_138(void)
{

        return 
# 5494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5494 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5529 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5546 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_140(void)
{

        return 
# 5549 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5549 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5602 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5602 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5602 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_152(void)
{

        return 
# 5605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5661 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_153(void)
{

        return 
# 5664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5664 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5717 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_154(void)
{

        return 
# 5720 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5720 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5759 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5776 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5776 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5776 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_155(void)
{

        return 
# 5779 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5779 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5809 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5826 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_157(void)
{

        return 
# 5829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5829 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5859 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_158(void)
{

        return 
# 5879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5926 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5926 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5926 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_159(void)
{

        return 
# 5929 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5929 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 5964 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 5982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 5982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 5982 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_160(void)
{

        return 
# 5985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 5985 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6042 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_161(void)
{

        return 
# 6045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6084 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6102 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_162(void)
{

        return 
# 6105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6161 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_163(void)
{

        return 
# 6164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6164 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6199 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6217 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_165(void)
{

        return 
# 6220 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6220 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6259 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6276 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6276 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6276 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_166(void)
{

        return 
# 6279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6279 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6314 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6331 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_167(void)
{

        return 
# 6334 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6334 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6369 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_168(void)
{

        return 
# 6390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6390 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6429 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 6447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
static 
# 6447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
      _Bool 
# 6447 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
           nrf53_errata_169(void)
{

        return 
# 6450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h" 3 4
              0
# 6450 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
                   ;
# 6489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf53_erratas.h"
}
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_1(void) __attribute__((unused));
static 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_2(void) __attribute__((unused));
static 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_4(void) __attribute__((unused));
static 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_6(void) __attribute__((unused));
static 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_7(void) __attribute__((unused));
static 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_8(void) __attribute__((unused));
static 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_9(void) __attribute__((unused));
static 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_10(void) __attribute__((unused));
static 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 50 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_12(void) __attribute__((unused));
static 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 51 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_14(void) __attribute__((unused));
static 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_15(void) __attribute__((unused));
static 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_16(void) __attribute__((unused));
static 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_17(void) __attribute__((unused));
static 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_20(void) __attribute__((unused));
static 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_21(void) __attribute__((unused));
static 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_23(void) __attribute__((unused));
static 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 58 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_24(void) __attribute__((unused));
static 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 59 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_26(void) __attribute__((unused));
static 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 60 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_27(void) __attribute__((unused));
static 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 61 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_28(void) __attribute__((unused));
static 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 62 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_29(void) __attribute__((unused));
static 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_30(void) __attribute__((unused));
static 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_31(void) __attribute__((unused));
static 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 65 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_32(void) __attribute__((unused));
static 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 66 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_33(void) __attribute__((unused));
static 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 67 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_35(void) __attribute__((unused));
static 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 68 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_36(void) __attribute__((unused));
static 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_37(void) __attribute__((unused));
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 83 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_1(void)
{

        return 
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 86 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 144 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_2(void)
{

        return 
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 147 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 191 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 205 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_4(void)
{

        return 
# 208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 208 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 252 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 266 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_6(void)
{

        return 
# 269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 269 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 327 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_7(void)
{

        return 
# 330 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 330 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 388 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_8(void)
{

        return 
# 391 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 391 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 449 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_9(void)
{

        return 
# 452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 452 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 496 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_10(void)
{

        return 
# 513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 513 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 557 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_12(void)
{

        return 
# 574 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 574 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 632 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 632 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 632 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_14(void)
{

        return 
# 635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 635 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 679 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 693 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 693 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 693 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_15(void)
{

        return 
# 696 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 696 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 740 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 754 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 754 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 754 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_16(void)
{

        return 
# 757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 801 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 815 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_17(void)
{

        return 
# 818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 862 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 876 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_20(void)
{

        return 
# 879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 879 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 937 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 937 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 937 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_21(void)
{

        return 
# 940 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 940 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 984 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 998 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_23(void)
{

        return 
# 1001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1045 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1059 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_24(void)
{

        return 
# 1062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1062 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1106 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1120 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_26(void)
{

        return 
# 1123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1167 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1181 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_27(void)
{

        return 
# 1184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1184 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1228 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1242 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_28(void)
{

        return 
# 1245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1245 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1289 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1303 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1303 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1303 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_29(void)
{

        return 
# 1306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1306 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1350 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_30(void)
{

        return 
# 1367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1367 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1425 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1425 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1425 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_31(void)
{

        return 
# 1428 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1428 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1472 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1486 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1486 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1486 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_32(void)
{

        return 
# 1489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1489 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1533 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1547 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_33(void)
{

        return 
# 1550 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1550 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1594 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_35(void)
{

        return 
# 1611 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1611 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1655 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_36(void)
{

        return 
# 1671 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1671 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;
# 1701 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
}
# 1710 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
static 
# 1710 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
      _Bool 
# 1710 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
           nrf91_errata_37(void)
{

        return 
# 1713 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h" 3 4
              0
# 1713 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf91_erratas.h"
                   ;



}
# 49 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_erratas.h" 2
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 2
# 358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
typedef enum
{
    NRF_SPIM_TASK_START = 
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   __builtin_offsetof (
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   NRF_SPIM_Type
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   , 
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   TASKS_START
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   )
# 360 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                       ,
    NRF_SPIM_TASK_STOP = 
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   __builtin_offsetof (
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   NRF_SPIM_Type
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   , 
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   TASKS_STOP
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   )
# 361 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                      ,
    NRF_SPIM_TASK_SUSPEND = 
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   __builtin_offsetof (
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   NRF_SPIM_Type
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   , 
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   TASKS_SUSPEND
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   )
# 362 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                         ,
    NRF_SPIM_TASK_RESUME = 
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   __builtin_offsetof (
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   NRF_SPIM_Type
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   , 
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                   TASKS_RESUME
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                                   )
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                        ,
# 374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
} nrf_spim_task_t;


typedef enum
{
    NRF_SPIM_EVENT_STARTED = 
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               NRF_SPIM_Type
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               EVENTS_STARTED
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               )
# 379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                      ,
    NRF_SPIM_EVENT_STOPPED = 
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               __builtin_offsetof (
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               NRF_SPIM_Type
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               , 
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               EVENTS_STOPPED
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               )
# 380 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                      ,
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
    NRF_SPIM_EVENT_ENDRX = 
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               __builtin_offsetof (
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               NRF_SPIM_Type
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               , 
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               EVENTS_ENDRX
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               )
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                    ,
    NRF_SPIM_EVENT_ENDTX = 
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               NRF_SPIM_Type
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               EVENTS_ENDTX
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               )
# 394 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                                                    ,

    NRF_SPIM_EVENT_END = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               NRF_SPIM_Type
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                               EVENTS_END
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                               )

# 397 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
} nrf_spim_event_t;


typedef enum
{
    NRF_SPIM_SHORT_END_START_MASK = (0x1UL << (17UL)),
# 413 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
    NRF_SPIM_ALL_SHORTS_MASK = (0x1UL << (17UL))
# 424 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
} nrf_spim_short_mask_t;


typedef enum
{
    NRF_SPIM_INT_STARTED_MASK = (0x1UL << (19UL)),
    NRF_SPIM_INT_STOPPED_MASK = (0x1UL << (1UL)),
# 443 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
    NRF_SPIM_INT_ENDRX_MASK = (0x1UL << (4UL)),
    NRF_SPIM_INT_ENDTX_MASK = (0x1UL << (8UL)),

    NRF_SPIM_INT_END_MASK = (0x1UL << (6UL)),
    NRF_SPIM_ALL_INTS_MASK = NRF_SPIM_INT_STARTED_MASK
                                 | NRF_SPIM_INT_STOPPED_MASK
# 459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                                 | NRF_SPIM_INT_ENDRX_MASK
                                 | NRF_SPIM_INT_ENDTX_MASK
                                 | NRF_SPIM_INT_END_MASK
} nrf_spim_int_mask_t;



typedef enum
{
    NRF_SPIM_FREQ_125K = (0x02000000UL),
    NRF_SPIM_FREQ_250K = (0x04000000UL),
    NRF_SPIM_FREQ_500K = (0x08000000UL),
    NRF_SPIM_FREQ_1M = (0x10000000UL),
    NRF_SPIM_FREQ_2M = (0x20000000UL),
    NRF_SPIM_FREQ_4M = (0x40000000UL),


    NRF_SPIM_FREQ_8M = (int)(0x80000000UL),

    NRF_SPIM_FREQ_16M = (0x0A000000UL),


    NRF_SPIM_FREQ_32M = (0x14000000UL)

} nrf_spim_frequency_t;



typedef enum
{
    NRF_SPIM_MODE_0,
    NRF_SPIM_MODE_1,
    NRF_SPIM_MODE_2,
    NRF_SPIM_MODE_3
} nrf_spim_mode_t;


typedef enum
{
    NRF_SPIM_BIT_ORDER_MSB_FIRST = (0UL),
    NRF_SPIM_BIT_ORDER_LSB_FIRST = (1UL)
} nrf_spim_bit_order_t;



typedef enum
{




    NRF_SPIM_CSN_POL_LOW = (0UL),
    NRF_SPIM_CSN_POL_HIGH = (1UL)

} nrf_spim_csn_pol_t;
# 522 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
                                             nrf_spim_task_t task);
# 533 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_task_address_get(NRF_SPIM_Type const * p_reg,
                                                     nrf_spim_task_t task);







static inline void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
                                            nrf_spim_event_t event);
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline 
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_event_check(NRF_SPIM_Type const * p_reg,
                                            nrf_spim_event_t event);
# 565 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_event_address_get(NRF_SPIM_Type const * p_reg,
                                                      nrf_spim_event_t event);







static inline void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
                                              uint32_t mask);







static inline void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
                                               uint32_t mask);
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_shorts_get(NRF_SPIM_Type const * p_reg);
# 602 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
                                           uint32_t mask);
# 612 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
                                            uint32_t mask);
# 624 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_int_enable_check(NRF_SPIM_Type const * p_reg, uint32_t mask);
# 697 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_enable(NRF_SPIM_Type * p_reg);






static inline void nrf_spim_disable(NRF_SPIM_Type * p_reg);
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline 
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 714 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_enable_check(NRF_SPIM_Type const * p_reg);
# 727 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t sck_pin,
                                         uint32_t mosi_pin,
                                         uint32_t miso_pin);
# 739 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_sck_pin_get(NRF_SPIM_Type const * p_reg);
# 748 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_mosi_pin_get(NRF_SPIM_Type const * p_reg);
# 757 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_miso_pin_get(NRF_SPIM_Type const * p_reg);
# 773 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_csn_configure(NRF_SPIM_Type * p_reg,
                                              uint32_t pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t duration);
# 785 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_csn_pin_get(NRF_SPIM_Type const * p_reg);
# 798 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t dcx_pin);
# 808 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_dcx_pin_get(NRF_SPIM_Type const * p_reg);
# 821 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_dcx_cnt_set(NRF_SPIM_Type * p_reg,
                                            uint32_t count);
# 833 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t rxdelay);
# 843 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_stallstat_rx_clear(NRF_SPIM_Type * p_reg);
# 852 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline 
# 852 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 852 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_stallstat_rx_get(NRF_SPIM_Type const * p_reg);






static inline void nrf_spim_stallstat_tx_clear(NRF_SPIM_Type * p_reg);
# 868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline 
# 868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 868 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_stallstat_tx_get(NRF_SPIM_Type const * p_reg);
# 878 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
                                              nrf_spim_frequency_t frequency);
# 888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline nrf_spim_frequency_t nrf_spim_frequency_get(NRF_SPIM_Type * p_reg);
# 898 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t length);
# 909 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_tx_amount_get(NRF_SPIM_Type const * p_reg);
# 918 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_tx_maxcnt_get(NRF_SPIM_Type const * p_reg);
# 927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t length);
# 938 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_rx_amount_get(NRF_SPIM_Type const * p_reg);
# 947 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline uint32_t nrf_spim_rx_maxcnt_get(NRF_SPIM_Type const * p_reg);
# 956 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_configure(NRF_SPIM_Type * p_reg,
                                          nrf_spim_mode_t spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order);
# 967 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t orc);







static inline void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg);






static inline void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg);






static inline void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg);






static inline void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg);
# 1130 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
                                             nrf_spim_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
}

static inline uint32_t nrf_spim_task_address_get(NRF_SPIM_Type const * p_reg,
                                                     nrf_spim_task_t task)
{
    return nrf_task_event_address_get(p_reg, task);
}

static inline void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
                                            nrf_spim_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

static inline 
# 1149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 1149 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_event_check(NRF_SPIM_Type const * p_reg,
                                            nrf_spim_event_t event)
{
    return nrf_event_check(p_reg, event);
}

static inline uint32_t nrf_spim_event_address_get(NRF_SPIM_Type const * p_reg,
                                                      nrf_spim_event_t event)
{
    return nrf_task_event_address_get(p_reg, event);
}

static inline void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
                                              uint32_t mask)
{
    p_reg->SHORTS |= mask;
}

static inline void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
                                               uint32_t mask)
{
    p_reg->SHORTS &= ~(mask);
}

static inline uint32_t nrf_spim_shorts_get(NRF_SPIM_Type const * p_reg)
{
    return p_reg->SHORTS;
}

static inline void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->INTENSET = mask;
}

static inline void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
}

static inline uint32_t nrf_spim_int_enable_check(NRF_SPIM_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
}
# 1241 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
static inline void nrf_spim_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->ENABLE = ((7UL) << (0UL));
}

static inline void nrf_spim_disable(NRF_SPIM_Type * p_reg)
{

    if (nrf52_errata_89())
    {
        uint32_t temp1 = *(volatile uint32_t *)((uint8_t *)p_reg + 0x508UL);
        uint32_t temp2 = *(volatile uint32_t *)((uint8_t *)p_reg + 0x50CUL);
        *(volatile uint32_t *)((uint8_t *)p_reg + 0x500) = 0;
        *(volatile uint32_t *)((uint8_t *)p_reg + 0x508) = 0xFFFFFFFF;
        *(volatile uint32_t *)((uint8_t *)p_reg + 0x50C) = 0xFFFFFFFF;
        *(volatile uint32_t *)((uint8_t *)p_reg + 0x500) = 9;

        p_reg->ENABLE = ((0UL) << (0UL));

        *(volatile uint32_t *)((uint8_t *)p_reg + 0x508) = temp1;
        *(volatile uint32_t *)((uint8_t *)p_reg + 0x50C) = temp2;
    }
    else

    {
        p_reg->ENABLE = ((0UL) << (0UL));
    }
}

static inline 
# 1270 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 1270 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_enable_check(NRF_SPIM_Type const * p_reg)
{
    return p_reg->ENABLE == (7UL);
}

static inline void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t sck_pin,
                                         uint32_t mosi_pin,
                                         uint32_t miso_pin)
{
    p_reg->PSEL.SCK = sck_pin;
    p_reg->PSEL.MOSI = mosi_pin;
    p_reg->PSEL.MISO = miso_pin;
}

static inline uint32_t nrf_spim_sck_pin_get(NRF_SPIM_Type const * p_reg)
{
    return p_reg->PSEL.SCK;
}

static inline uint32_t nrf_spim_mosi_pin_get(NRF_SPIM_Type const * p_reg)
{
    return p_reg->PSEL.MOSI;
}

static inline uint32_t nrf_spim_miso_pin_get(NRF_SPIM_Type const * p_reg)
{
    return p_reg->PSEL.MISO;
}


static inline void nrf_spim_csn_configure(NRF_SPIM_Type * p_reg,
                                              uint32_t pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t duration)
{



    p_reg->PSEL.CSN = pin;

    p_reg->CSNPOL = polarity;
    p_reg->IFTIMING.CSNDUR = duration;
}

static inline uint32_t nrf_spim_csn_pin_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->PSEL.CSN;

}



static inline void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg, uint32_t dcx_pin)
{



    p_reg->PSELDCX = dcx_pin;

}

static inline uint32_t nrf_spim_dcx_pin_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->PSELDCX;

}

static inline void nrf_spim_dcx_cnt_set(NRF_SPIM_Type * p_reg, uint32_t dcx_cnt)
{
    p_reg->DCXCNT = dcx_cnt;
}



static inline void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
}



static inline void nrf_spim_stallstat_rx_clear(NRF_SPIM_Type * p_reg)
{
    p_reg->STALLSTAT &= ~((0x1UL << (1UL)));
}

static inline 
# 1364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 1364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_stallstat_rx_get(NRF_SPIM_Type const * p_reg)
{
    return (p_reg->STALLSTAT & (0x1UL << (1UL))) != 0;
}

static inline void nrf_spim_stallstat_tx_clear(NRF_SPIM_Type * p_reg)
{
    p_reg->STALLSTAT &= ~((0x1UL << (0UL)));
}

static inline 
# 1374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h" 3 4
                 _Bool 
# 1374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_spim.h"
                      nrf_spim_stallstat_tx_get(NRF_SPIM_Type const * p_reg)
{
    return (p_reg->STALLSTAT & (0x1UL << (0UL))) != 0;
}



static inline void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
}

static inline nrf_spim_frequency_t nrf_spim_frequency_get(NRF_SPIM_Type * p_reg)
{
    return (nrf_spim_frequency_t)(p_reg->FREQUENCY);
}


static inline void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t length)
{




    p_reg->TXD.PTR = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;

}

static inline uint32_t nrf_spim_tx_amount_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->TXD.AMOUNT;

}

static inline uint32_t nrf_spim_tx_maxcnt_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->TXD.MAXCNT;

}

static inline void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t length)
{




    p_reg->RXD.PTR = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;

}

static inline uint32_t nrf_spim_rx_amount_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->RXD.AMOUNT;

}

static inline uint32_t nrf_spim_rx_maxcnt_get(NRF_SPIM_Type const * p_reg)
{



    return p_reg->RXD.MAXCNT;

}

static inline void nrf_spim_configure(NRF_SPIM_Type * p_reg,
                                          nrf_spim_mode_t spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        (0UL) : (1UL));
    switch (spi_mode)
    {
    default:
    case NRF_SPIM_MODE_0:
        config |= ((0UL) << (2UL)) |
                  ((0UL) << (1UL));
        break;

    case NRF_SPIM_MODE_1:
        config |= ((0UL) << (2UL)) |
                  ((1UL) << (1UL));
        break;

    case NRF_SPIM_MODE_2:
        config |= ((1UL) << (2UL)) |
                  ((0UL) << (1UL));
        break;

    case NRF_SPIM_MODE_3:
        config |= ((1UL) << (2UL)) |
                  ((1UL) << (1UL));
        break;
    }
    p_reg->CONFIG = config;
}

static inline void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t orc)
{
    p_reg->ORC = orc;
}


static inline void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = (1UL) << (0UL);
}

static inline void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = (0UL) << (0UL);
}

static inline void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = (1UL) << (0UL);
}

static inline void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = (0UL) << (0UL);
}
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 2





typedef struct nrfy_spim_xfer_desc_t nrfy_spim_xfer_desc_t;

static inline 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       __nrfy_internal_spim_event_handle(NRF_SPIM_Type * p_reg,
                                                          uint32_t mask,
                                                          nrf_spim_event_t event,
                                                          uint32_t * p_evt_mask);

static inline
uint32_t __nrfy_internal_spim_events_process(NRF_SPIM_Type * p_reg,
                                             uint32_t mask,
                                             nrfy_spim_xfer_desc_t const * p_xfer);

static inline void __nrfy_internal_spim_event_enabled_clear(NRF_SPIM_Type * p_reg,
                                                                 uint32_t mask,
                                                                 nrf_spim_event_t event);
# 124 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
struct nrfy_spim_xfer_desc_t
{
    uint8_t const * p_tx_buffer;
    size_t tx_length;
    uint8_t * p_rx_buffer;
    size_t rx_length;
};



typedef struct
{

    uint32_t dcx_pin;



    uint32_t csn_pin;


} nrfy_spim_ext_pins_t;


typedef struct
{
    nrfy_spim_ext_pins_t pins;

    nrf_spim_csn_pol_t csn_pol;
    uint8_t csn_duration;




    uint8_t rx_delay;




} nrfy_spim_ext_config_t;



typedef struct
{
    uint32_t sck_pin;
    uint32_t mosi_pin;

    uint32_t miso_pin;

} nrfy_spim_pins_t;


typedef struct
{
    nrfy_spim_pins_t pins;
    uint8_t orc;



    nrf_spim_frequency_t frequency;



    nrf_spim_mode_t mode;
    nrf_spim_bit_order_t bit_order;

    nrfy_spim_ext_config_t ext_config;

    
# 192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 192 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                          skip_psel_cfg;
# 201 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
} nrfy_spim_config_t;







static inline void nrfy_spim_periph_configure(NRF_SPIM_Type * p_reg,
                                                   nrfy_spim_config_t const * p_config)
{
    if (!p_config->skip_psel_cfg)
    {
        nrf_spim_pins_set(p_reg,
            p_config->pins.sck_pin, p_config->pins.mosi_pin, p_config->pins.miso_pin);

        nrf_spim_dcx_pin_set(p_reg, p_config->ext_config.pins.dcx_pin);


        nrf_spim_csn_configure(p_reg,
                               p_config->ext_config.pins.csn_pin,
                               p_config->ext_config.csn_pol,
                               p_config->ext_config.csn_duration);

    }
    nrf_spim_orc_set(p_reg, p_config->orc);

    nrf_spim_frequency_set(p_reg, p_config->frequency);



    nrf_spim_configure(p_reg, p_config->mode, p_config->bit_order);

    nrf_spim_iftiming_set(p_reg, p_config->ext_config.rx_delay);

    nrf_barrier_w();
}
# 247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_int_init(NRF_SPIM_Type * p_reg,
                                           uint32_t mask,
                                           uint8_t irq_priority,
                                           
# 250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                                          _Bool 
# 250 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                                                          enable)
{
    __nrfy_internal_spim_event_enabled_clear(p_reg, mask, NRF_SPIM_EVENT_STOPPED);
    __nrfy_internal_spim_event_enabled_clear(p_reg, mask, NRF_SPIM_EVENT_ENDRX);
    __nrfy_internal_spim_event_enabled_clear(p_reg, mask, NRF_SPIM_EVENT_END);
    __nrfy_internal_spim_event_enabled_clear(p_reg, mask, NRF_SPIM_EVENT_ENDTX);
    __nrfy_internal_spim_event_enabled_clear(p_reg, mask, NRF_SPIM_EVENT_STARTED);

    nrf_barrier_w();
    ;
    arch_irq_enable(nrfx_get_irq_number(p_reg));
    if (enable)
    {
        nrf_spim_int_enable(p_reg, mask);
    }
    nrf_barrier_w();
}






static inline void nrfy_spim_int_uninit(NRF_SPIM_Type * p_reg)
{
    arch_irq_disable(nrfx_get_irq_number(p_reg));
    nrf_barrier_w();
}
# 290 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline uint32_t nrfy_spim_events_process(NRF_SPIM_Type * p_reg,
                                                     uint32_t mask,
                                                     nrfy_spim_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = __nrfy_internal_spim_events_process(p_reg, mask, p_xfer);
    nrf_barrier_w();
    return evt_mask;
}







static inline void nrfy_spim_buffers_set(NRF_SPIM_Type * p_reg,
                                              nrfy_spim_xfer_desc_t const * p_xfer)
{
    if (p_xfer->p_tx_buffer)
    {
        do { (void)p_xfer->p_tx_buffer; (void)p_xfer->tx_length; } while (0);
    }
    nrf_spim_tx_buffer_set(p_reg, p_xfer->p_tx_buffer, p_xfer->tx_length);
    nrf_spim_rx_buffer_set(p_reg, p_xfer->p_rx_buffer, p_xfer->rx_length);
    nrf_barrier_w();
}
# 324 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_xfer_start(NRF_SPIM_Type * p_reg,
                                             nrfy_spim_xfer_desc_t const * p_xfer)
{
    nrf_spim_task_trigger(p_reg, NRF_SPIM_TASK_START);
    if (p_xfer)
    {
        nrf_barrier_w();
        while (!nrf_spim_event_check(p_reg, NRF_SPIM_EVENT_END))
        {}
        (void)__nrfy_internal_spim_events_process(p_reg,
                                                  (1U << ((((uint32_t)(NRF_SPIM_EVENT_END)) - 0x100) >> 2)),
                                                  p_xfer);
    }
    nrf_barrier_w();
}
# 347 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_abort(NRF_SPIM_Type * p_reg, nrfy_spim_xfer_desc_t const * p_xfer)
{
    nrf_spim_task_trigger(p_reg, NRF_SPIM_TASK_STOP);
    if (p_xfer)
    {
        nrf_barrier_w();
        uint32_t evt_mask = (1U << ((((uint32_t)(NRF_SPIM_EVENT_STOPPED)) - 0x100) >> 2));
        while (!__nrfy_internal_spim_events_process(p_reg, evt_mask, p_xfer))
        {}
        (void)__nrfy_internal_spim_events_process(p_reg,
                                                  (1U << ((((uint32_t)(NRF_SPIM_EVENT_END)) - 0x100) >> 2)),
                                                  
# 358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                                                 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                                                     );
    }
    nrf_barrier_w();
}







static inline void nrfy_spim_pins_get(NRF_SPIM_Type const * p_reg, nrfy_spim_pins_t * p_pins)
{
    p_pins->sck_pin = nrf_spim_sck_pin_get(p_reg);
    p_pins->mosi_pin = nrf_spim_mosi_pin_get(p_reg);
    p_pins->miso_pin = nrf_spim_miso_pin_get(p_reg);
}
# 383 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_ext_pins_get(NRF_SPIM_Type const * p_reg,
                                               nrfy_spim_ext_pins_t * p_pins)
{
    p_pins->dcx_pin = nrf_spim_dcx_pin_get(p_reg);

    p_pins->csn_pin = nrf_spim_csn_pin_get(p_reg);

}
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_tx_list_set(NRF_SPIM_Type * p_reg, 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                                                                    _Bool 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                                                                         enable)
{
    if (enable)
    {
        nrf_spim_tx_list_enable(p_reg);
    }
    else
    {
        nrf_spim_tx_list_disable(p_reg);
    }
    nrf_barrier_w();
}







static inline void nrfy_spim_rx_list_set(NRF_SPIM_Type * p_reg, 
# 419 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                                                                    _Bool 
# 419 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                                                                         enable)
{
    if (enable)
    {
        nrf_spim_rx_list_enable(p_reg);
    }
    else
    {
        nrf_spim_rx_list_disable(p_reg);
    }
    nrf_barrier_w();
}



static inline void nrfy_spim_task_trigger(NRF_SPIM_Type * p_reg,
                                               nrf_spim_task_t task)
{
    nrf_spim_task_trigger(p_reg, task);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_task_address_get(NRF_SPIM_Type const * p_reg,
                                                       nrf_spim_task_t task)
{
    return nrf_spim_task_address_get(p_reg, task);
}


static inline void nrfy_spim_event_clear(NRF_SPIM_Type * p_reg, nrf_spim_event_t event)
{
    nrf_spim_event_clear(p_reg, event);
    nrf_barrier_w();
}


static inline 
# 456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       nrfy_spim_event_check(NRF_SPIM_Type const * p_reg, nrf_spim_event_t event)
{
    nrf_barrier_r();
    
# 459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 459 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        check = nrf_spim_event_check(p_reg, event);
    nrf_barrier_r();
    return check;
}


static inline uint32_t nrfy_spim_event_address_get(NRF_SPIM_Type const * p_reg,
                                                        nrf_spim_event_t event)
{
    return nrf_spim_event_address_get(p_reg, event);
}


static inline void nrfy_spim_shorts_enable(NRF_SPIM_Type * p_reg, uint32_t mask)
{
    nrf_spim_shorts_enable(p_reg, mask);
    nrf_barrier_w();
}


static inline void nrfy_spim_shorts_disable(NRF_SPIM_Type * p_reg, uint32_t mask)
{
    nrf_spim_shorts_disable(p_reg, mask);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_shorts_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t shorts = nrf_spim_shorts_get(p_reg);
    nrf_barrier_r();
    return shorts;
}


static inline void nrfy_spim_int_enable(NRF_SPIM_Type * p_reg, uint32_t mask)
{
    nrf_spim_int_enable(p_reg, mask);
    nrf_barrier_w();
}


static inline void nrfy_spim_int_disable(NRF_SPIM_Type * p_reg, uint32_t mask)
{
    nrf_spim_int_disable(p_reg, mask);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_int_enable_check(NRF_SPIM_Type const * p_reg, uint32_t mask)
{
    nrf_barrier_rw();
    uint32_t check = nrf_spim_int_enable_check(p_reg, mask);
    nrf_barrier_r();
    return check;
}
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_enable(NRF_SPIM_Type * p_reg)
{
    nrf_spim_enable(p_reg);
    nrf_barrier_w();
}


static inline void nrfy_spim_disable(NRF_SPIM_Type * p_reg)
{
    nrf_spim_disable(p_reg);
    nrf_barrier_w();
}


static inline 
# 568 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 568 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       nrfy_spim_enable_check(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 571 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        check = nrf_spim_enable_check(p_reg);
    nrf_barrier_r();
    return check;
}


static inline void nrfy_spim_pins_set(NRF_SPIM_Type * p_reg,
                                           uint32_t sck_pin,
                                           uint32_t mosi_pin,
                                           uint32_t miso_pin)
{
    nrf_spim_pins_set(p_reg, sck_pin, mosi_pin, miso_pin);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_sck_pin_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_spim_sck_pin_get(p_reg);
    nrf_barrier_r();
    return pin;
}


static inline uint32_t nrfy_spim_mosi_pin_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_spim_mosi_pin_get(p_reg);
    nrf_barrier_r();
    return pin;
}


static inline uint32_t nrfy_spim_miso_pin_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_spim_miso_pin_get(p_reg);
    nrf_barrier_r();
    return pin;
}




static inline void nrfy_spim_csn_configure(NRF_SPIM_Type * p_reg,
                                                uint32_t pin,
                                                nrf_spim_csn_pol_t polarity,
                                                uint32_t duration)
{
    nrf_spim_csn_configure(p_reg, pin, polarity, duration);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_csn_pin_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_spim_csn_pin_get(p_reg);
    nrf_barrier_r();
    return pin;
}




static inline void nrfy_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                              uint32_t dcx_pin)
{
    nrf_spim_dcx_pin_set(p_reg, dcx_pin);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_dcx_pin_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_spim_dcx_pin_get(p_reg);
    nrf_barrier_r();
    return pin;
}


static inline void nrfy_spim_dcx_cnt_set(NRF_SPIM_Type * p_reg, uint32_t count)
{
    nrf_spim_dcx_cnt_set(p_reg, count);
    nrf_barrier_w();
}




static inline void nrfy_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                               uint32_t rxdelay)
{
    nrf_spim_iftiming_set(p_reg, rxdelay);
    nrf_barrier_w();
}




static inline void nrfy_spim_stallstat_rx_clear(NRF_SPIM_Type * p_reg)
{
    nrf_spim_stallstat_rx_clear(p_reg);
    nrf_barrier_w();
}


static inline 
# 680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 680 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       nrfy_spim_stallstat_rx_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    
# 683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 683 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        stallstat = nrf_spim_stallstat_rx_get(p_reg);
    nrf_barrier_r();
    return stallstat;
}


static inline void nrfy_spim_stallstat_tx_clear(NRF_SPIM_Type * p_reg)
{
    nrf_spim_stallstat_tx_clear(p_reg);
    nrf_barrier_w();
}


static inline 
# 696 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 696 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       nrfy_spim_stallstat_tx_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    
# 699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        stallstat = nrf_spim_stallstat_tx_get(p_reg);
    nrf_barrier_r();
    return stallstat;
}




static inline void nrfy_spim_frequency_set(NRF_SPIM_Type * p_reg,
                                                nrf_spim_frequency_t frequency)
{
    nrf_spim_frequency_set(p_reg, frequency);
    nrf_barrier_w();
}
# 734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
static inline void nrfy_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                                uint8_t const * p_buffer,
                                                size_t length)
{
    nrf_spim_tx_buffer_set(p_reg, p_buffer, length);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_tx_amount_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_r();
    uint32_t amount = nrf_spim_tx_amount_get(p_reg);
    nrf_barrier_r();
    return amount;
}


static inline uint32_t nrfy_spim_tx_maxcnt_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t maxcnt = nrf_spim_tx_maxcnt_get(p_reg);
    nrf_barrier_r();
    return maxcnt;
}


static inline void nrfy_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                                uint8_t * p_buffer,
                                                size_t length)
{
    nrf_spim_rx_buffer_set(p_reg, p_buffer, length);
    nrf_barrier_w();
}


static inline uint32_t nrfy_spim_rx_amount_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_r();
    uint32_t amount = nrf_spim_rx_amount_get(p_reg);
    nrf_barrier_r();
    return amount;
}


static inline uint32_t nrfy_spim_rx_maxcnt_get(NRF_SPIM_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t maxcnt = nrf_spim_rx_maxcnt_get(p_reg);
    nrf_barrier_r();
    return maxcnt;
}


static inline void nrfy_spim_configure(NRF_SPIM_Type * p_reg,
                                            nrf_spim_mode_t spi_mode,
                                            nrf_spim_bit_order_t spi_bit_order)
{
    nrf_spim_configure(p_reg, spi_mode, spi_bit_order);
    nrf_barrier_w();
}


static inline void nrfy_spim_orc_set(NRF_SPIM_Type * p_reg,
                                          uint8_t orc)
{
    nrf_spim_orc_set(p_reg, orc);
    nrf_barrier_w();
}



static inline 
# 806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                  _Bool 
# 806 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                       __nrfy_internal_spim_event_handle(NRF_SPIM_Type * p_reg,
                                                          uint32_t mask,
                                                          nrf_spim_event_t event,
                                                          uint32_t * p_evt_mask)
{
    if ((mask & (1U << ((((uint32_t)(event)) - 0x100) >> 2))) && nrf_spim_event_check(p_reg, event))
    {
        nrf_spim_event_clear(p_reg, event);
        if (p_evt_mask)
        {
            *p_evt_mask |= (1U << ((((uint32_t)(event)) - 0x100) >> 2));
        }
        return 
# 818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
              1
# 818 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                  ;
    }
    return 
# 820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
          0
# 820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
               ;
}

static inline
uint32_t __nrfy_internal_spim_events_process(NRF_SPIM_Type * p_reg,
                                             uint32_t mask,
                                             nrfy_spim_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = 0;

    nrf_barrier_r();
    (void)__nrfy_internal_spim_event_handle(p_reg, mask, NRF_SPIM_EVENT_STARTED, &evt_mask);

    
# 833 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 833 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        stop = __nrfy_internal_spim_event_handle(p_reg, mask, NRF_SPIM_EVENT_STOPPED, &evt_mask);

    
# 835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
   _Bool 
# 835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
        invalidated = 
# 835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                      0
# 835 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                           ;
    if (__nrfy_internal_spim_event_handle(p_reg, mask, NRF_SPIM_EVENT_END, &evt_mask) && p_xfer)
    {
        size_t size = stop ? nrf_spim_rx_amount_get(p_reg) : p_xfer->rx_length;
        do { (void)p_xfer->p_rx_buffer; (void)size; } while (0);
        invalidated = 
# 840 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h" 3 4
                     1
# 840 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_spim.h"
                         ;
    }

    if (__nrfy_internal_spim_event_handle(p_reg, mask, NRF_SPIM_EVENT_ENDRX, &evt_mask) &&
        p_xfer && !invalidated)
    {
        size_t size = stop ? nrf_spim_rx_amount_get(p_reg) : p_xfer->rx_length;
        do { (void)p_xfer->p_rx_buffer; (void)size; } while (0);
    }

    (void)__nrfy_internal_spim_event_handle(p_reg, mask, NRF_SPIM_EVENT_ENDTX, &evt_mask);

    return evt_mask;
}

static inline void __nrfy_internal_spim_event_enabled_clear(NRF_SPIM_Type * p_reg,
                                                                 uint32_t mask,
                                                                 nrf_spim_event_t event)
{
    if (mask & (1U << ((((uint32_t)(event)) - 0x100) >> 2)))
    {
        nrf_spim_event_clear(p_reg, event);
    }
}
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 1
# 173 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
typedef enum
{
    NRF_GPIO_PIN_DIR_INPUT = (0UL),
    NRF_GPIO_PIN_DIR_OUTPUT = (1UL)
} nrf_gpio_pin_dir_t;


typedef enum
{
    NRF_GPIO_PIN_INPUT_CONNECT = (0UL),
    NRF_GPIO_PIN_INPUT_DISCONNECT = (1UL)
} nrf_gpio_pin_input_t;





typedef enum
{
    NRF_GPIO_PIN_NOPULL = (0UL),
    NRF_GPIO_PIN_PULLDOWN = (1UL),
    NRF_GPIO_PIN_PULLUP = (3UL),
} nrf_gpio_pin_pull_t;


typedef enum
{

    NRF_GPIO_PIN_S0S1 = (0UL),
    NRF_GPIO_PIN_H0S1 = (1UL),
    NRF_GPIO_PIN_S0H1 = (2UL),
    NRF_GPIO_PIN_H0H1 = (3UL),
    NRF_GPIO_PIN_D0S1 = (4UL),
    NRF_GPIO_PIN_D0H1 = (5UL),
    NRF_GPIO_PIN_S0D1 = (6UL),
    NRF_GPIO_PIN_H0D1 = (7UL),
# 232 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
} nrf_gpio_pin_drive_t;


typedef enum
{
    NRF_GPIO_PIN_NOSENSE = (0UL),
    NRF_GPIO_PIN_SENSE_LOW = (3UL),
    NRF_GPIO_PIN_SENSE_HIGH = (2UL),
} nrf_gpio_pin_sense_t;
# 344 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end);
# 357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_range_cfg_input(uint32_t pin_range_start,
                                                uint32_t pin_range_end,
                                                nrf_gpio_pin_pull_t pull_config);
# 374 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_cfg(
    uint32_t pin_number,
    nrf_gpio_pin_dir_t dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense);
# 396 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_reconfigure(uint32_t pin_number,
                                            const nrf_gpio_pin_dir_t * p_dir,
                                            const nrf_gpio_pin_input_t * p_input,
                                            const nrf_gpio_pin_pull_t * p_pull,
                                            const nrf_gpio_pin_drive_t * p_drive,
                                            const nrf_gpio_pin_sense_t * p_sense);
# 411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_cfg_output(uint32_t pin_number);
# 422 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_pin_output_set(NRF_GPIO_Type * p_reg, uint32_t pin_number);
# 433 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config);
# 445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_pin_input_set(NRF_GPIO_Type * p_reg,
                                                   uint32_t pin_number,
                                                   nrf_gpio_pin_pull_t pull_config);






static inline void nrf_gpio_cfg_default(uint32_t pin_number);







static inline void nrf_gpio_cfg_watcher(uint32_t pin_number);






static inline void nrf_gpio_input_disconnect(uint32_t pin_number);
# 480 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_cfg_sense_input(uint32_t pin_number,
                                                nrf_gpio_pin_pull_t pull_config,
                                                nrf_gpio_pin_sense_t sense_config);







static inline void nrf_gpio_cfg_sense_set(uint32_t pin_number,
                                              nrf_gpio_pin_sense_t sense_config);







static inline void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction);






static inline void nrf_gpio_pin_set(uint32_t pin_number);






static inline void nrf_gpio_pin_clear(uint32_t pin_number);






static inline void nrf_gpio_pin_toggle(uint32_t pin_number);
# 530 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value);
# 541 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_pin_write(NRF_GPIO_Type * p_reg,
                                               uint32_t pin_number,
                                               uint32_t value);
# 554 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_pin_read(uint32_t pin_number);
# 566 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline 
# 566 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 566 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_port_pin_read(NRF_GPIO_Type const * p_reg, uint32_t pin_number);
# 575 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_pin_out_read(uint32_t pin_number);
# 584 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number);
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number);
# 602 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline nrf_gpio_pin_input_t nrf_gpio_pin_input_get(uint32_t pin_number);
# 611 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline nrf_gpio_pin_pull_t nrf_gpio_pin_pull_get(uint32_t pin_number);







static inline void nrf_gpio_port_dir_output_set(NRF_GPIO_Type * p_reg, uint32_t out_mask);







static inline void nrf_gpio_port_dir_input_set(NRF_GPIO_Type * p_reg, uint32_t in_mask);
# 637 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_dir_write(NRF_GPIO_Type * p_reg, uint32_t dir_mask);
# 648 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_port_dir_read(NRF_GPIO_Type const * p_reg);
# 657 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg);
# 668 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg);
# 678 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value);







static inline void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask);







static inline void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask);
# 703 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_ports_read(uint32_t start_port,
                                           uint32_t length,
                                           uint32_t * p_masks);
# 761 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_detect_latch_set(NRF_GPIO_Type * p_reg, 
# 761 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                                            _Bool 
# 761 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                                                 enable);
# 771 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline 
# 771 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 771 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_port_detect_latch_check(NRF_GPIO_Type const * p_reg);
# 784 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_latches_read(uint32_t start_port,
                                             uint32_t length,
                                             uint32_t * p_masks);
# 797 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_latches_read_and_clear(uint32_t start_port,
                                                       uint32_t length,
                                                       uint32_t * p_masks);
# 810 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_pin_latch_get(uint32_t pin_number);
# 819 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_pin_latch_clear(uint32_t pin_number);
# 866 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline 
# 866 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 866 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_pin_present_check(uint32_t pin_number);
# 877 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin);
# 887 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin);



static inline NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    { };

    NRF_GPIO_Type * p_port = 
# 895 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                            ((void *)0)
# 895 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                ;

    switch (nrf_gpio_pin_port_number_extract(p_pin))
    {
        case 0: p_port = ((NRF_GPIO_Type*) 0x50000000UL); break; case 1: p_port = ((NRF_GPIO_Type*) 0x50000300UL); break; ;

        default:
            { };
    }
    return p_port;
}


static inline void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end)
{
    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        nrf_gpio_cfg_output(pin_range_start);
    }
}


static inline void nrf_gpio_range_cfg_input(uint32_t pin_range_start,
                                                uint32_t pin_range_end,
                                                nrf_gpio_pin_pull_t pull_config)
{
    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        nrf_gpio_cfg_input(pin_range_start, pull_config);
    }
}


static inline void nrf_gpio_cfg(
    uint32_t pin_number,
    nrf_gpio_pin_dir_t dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number];

    uint32_t to_update = (0x1UL << (0UL)) |
                         (0x1UL << (1UL)) |
                         (0x3UL << (2UL)) |

                         (0x7UL << (8UL)) |




                         (0x3UL << (16UL));


    cnf &= ~to_update;
    cnf |= ((uint32_t)dir << (0UL)) |
           ((uint32_t)input << (1UL)) |
           ((uint32_t)pull << (2UL)) |

           ((uint32_t)drive << (8UL)) |



           ((uint32_t)sense << (16UL));

    reg->PIN_CNF[pin_number] = cnf;
}

static inline void nrf_gpio_reconfigure(uint32_t pin_number,
                                            const nrf_gpio_pin_dir_t * p_dir,
                                            const nrf_gpio_pin_input_t * p_input,
                                            const nrf_gpio_pin_pull_t * p_pull,
                                            const nrf_gpio_pin_drive_t * p_drive,
                                            const nrf_gpio_pin_sense_t * p_sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number];
    uint32_t to_update = (p_dir ? (0x1UL << (0UL)) : 0) |
                         (p_input ? (0x1UL << (1UL)) : 0) |
                         (p_pull ? (0x3UL << (2UL)) : 0) |

                         (p_drive ? (0x7UL << (8UL)) : 0) |



                         (p_sense ? (0x3UL << (16UL)) : 0);


    cnf &= ~to_update;
    cnf |= ((uint32_t)(p_dir ? *p_dir : 0) << (0UL)) |
           ((uint32_t)(p_input ? *p_input : 0) << (1UL)) |
           ((uint32_t)(p_pull ? *p_pull : 0) << (2UL)) |

           ((uint32_t)(p_drive ? *p_drive : 0) << (8UL)) |



           ((uint32_t)(p_sense ? *p_sense : 0)<< (16UL));

    reg->PIN_CNF[pin_number] = cnf;
}

static inline void nrf_gpio_cfg_output(uint32_t pin_number)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_OUTPUT,
        NRF_GPIO_PIN_INPUT_DISCONNECT,
        NRF_GPIO_PIN_NOPULL,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}

static inline void nrf_gpio_port_pin_output_set(NRF_GPIO_Type * p_reg, uint32_t pin_number)
{
    uint32_t cnf = ((uint32_t)NRF_GPIO_PIN_DIR_OUTPUT << (0UL)) |
           ((uint32_t)NRF_GPIO_PIN_INPUT_DISCONNECT << (1UL)) |
           ((uint32_t)NRF_GPIO_PIN_NOPULL << (2UL)) |

           ((uint32_t)NRF_GPIO_PIN_S0S1 << (8UL)) |



           ((uint32_t)NRF_GPIO_PIN_NOSENSE << (16UL));
    p_reg->PIN_CNF[pin_number] = cnf;
}

static inline void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_CONNECT,
        pull_config,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}

static inline void nrf_gpio_port_pin_input_set(NRF_GPIO_Type * p_reg,
                                                   uint32_t pin_number,
                                                   nrf_gpio_pin_pull_t pull_config)
{
    uint32_t cnf = ((uint32_t)NRF_GPIO_PIN_DIR_INPUT << (0UL)) |
           ((uint32_t)NRF_GPIO_PIN_INPUT_CONNECT << (1UL)) |
           ((uint32_t)pull_config << (2UL)) |

           ((uint32_t)NRF_GPIO_PIN_S0S1 << (8UL)) |



           ((uint32_t)NRF_GPIO_PIN_NOSENSE << (16UL));
    p_reg->PIN_CNF[pin_number] = cnf;
}


static inline void nrf_gpio_cfg_default(uint32_t pin_number)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_DISCONNECT,
        NRF_GPIO_PIN_NOPULL,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}


static inline void nrf_gpio_cfg_watcher(uint32_t pin_number)
{
    nrf_gpio_pin_input_t input = NRF_GPIO_PIN_INPUT_CONNECT;

    nrf_gpio_reconfigure(pin_number, 
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                    ((void *)0)
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                        , &input, 
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                  ((void *)0)
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                      , 
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                        ((void *)0)
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                            , 
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                              ((void *)0)
# 1068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                                  );
}


static inline void nrf_gpio_input_disconnect(uint32_t pin_number)
{
    nrf_gpio_pin_input_t input = NRF_GPIO_PIN_INPUT_DISCONNECT;

    nrf_gpio_reconfigure(pin_number, 
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                    ((void *)0)
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                        , &input, 
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                  ((void *)0)
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                      , 
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                        ((void *)0)
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                            , 
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                              ((void *)0)
# 1076 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                                  );
}


static inline void nrf_gpio_cfg_sense_input(uint32_t pin_number,
                                                nrf_gpio_pin_pull_t pull_config,
                                                nrf_gpio_pin_sense_t sense_config)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_CONNECT,
        pull_config,
        NRF_GPIO_PIN_S0S1,
        sense_config);
}


static inline void nrf_gpio_cfg_sense_set(uint32_t pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    nrf_gpio_reconfigure(pin_number, 
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                    ((void *)0)
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                        , 
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                          ((void *)0)
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                              , 
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                ((void *)0)
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                    , 
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                      ((void *)0)
# 1097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                          , &sense_config);
}

static inline void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction)
{
    if (direction == NRF_GPIO_PIN_DIR_INPUT)
    {
        nrf_gpio_cfg(
            pin_number,
            NRF_GPIO_PIN_DIR_INPUT,
            NRF_GPIO_PIN_INPUT_CONNECT,
            NRF_GPIO_PIN_NOPULL,
            NRF_GPIO_PIN_S0S1,
            NRF_GPIO_PIN_NOSENSE);
    }
    else
    {
        NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
        reg->DIRSET = (1UL << pin_number);
    }
}


static inline void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}


static inline void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}


static inline void nrf_gpio_pin_toggle(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t pins_state = reg->OUT;

    reg->OUTSET = (~pins_state & (1UL << pin_number));
    reg->OUTCLR = (pins_state & (1UL << pin_number));
}


static inline void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)
{
    if (value == 0)
    {
        nrf_gpio_pin_clear(pin_number);
    }
    else
    {
        nrf_gpio_pin_set(pin_number);
    }
}

static inline void nrf_gpio_port_pin_write(NRF_GPIO_Type * p_reg,
                                               uint32_t pin_number,
                                               uint32_t value)
{
    if (value == 0)
    {
        nrf_gpio_port_out_clear(p_reg, 1UL << pin_number);
    }
    else
    {
        nrf_gpio_port_out_set(p_reg, 1UL << pin_number);
    }
}


static inline uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
}

static inline 
# 1180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 1180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_port_pin_read(NRF_GPIO_Type const * p_reg, uint32_t pin_number)
{
    return ((nrf_gpio_port_in_read(p_reg) >> pin_number) & 1UL);
}

static inline uint32_t nrf_gpio_pin_out_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
}


static inline nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
                                   (0x3UL << (16UL))) >> (16UL));
}


static inline nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
                                 (0x1UL << (0UL))) >> (0UL));
}

static inline nrf_gpio_pin_input_t nrf_gpio_pin_input_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_input_t)((reg->PIN_CNF[pin_number] &
                                   (0x1UL << (1UL))) >> (1UL));
}

static inline nrf_gpio_pin_pull_t nrf_gpio_pin_pull_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_pull_t)((reg->PIN_CNF[pin_number] &
                                  (0x3UL << (2UL))) >> (2UL));
}


static inline void nrf_gpio_port_dir_output_set(NRF_GPIO_Type * p_reg, uint32_t out_mask)
{
    p_reg->DIRSET = out_mask;
}


static inline void nrf_gpio_port_dir_input_set(NRF_GPIO_Type * p_reg, uint32_t in_mask)
{
    p_reg->DIRCLR = in_mask;
}


static inline void nrf_gpio_port_dir_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->DIR = value;
}


static inline uint32_t nrf_gpio_port_dir_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->DIR;
}


static inline uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
}


static inline uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->OUT;
}


static inline void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
}


static inline void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
}


static inline void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
}


static inline void nrf_gpio_ports_read(uint32_t start_port,
                                           uint32_t length,
                                           uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL), };

    { };
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
        p_masks++;
    }
}
# 1323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline void nrf_gpio_port_detect_latch_set(NRF_GPIO_Type * p_reg, 
# 1323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                                            _Bool 
# 1323 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                                                 enable)
{
    p_reg->DETECTMODE = (enable ? (1UL) :
                                  (0UL));
}

static inline 
# 1329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 1329 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_port_detect_latch_check(NRF_GPIO_Type const * p_reg)
{
    return (p_reg->DETECTMODE == (1UL));
}



static inline void nrf_gpio_latches_read(uint32_t start_port,
                                             uint32_t length,
                                             uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL), };
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = gpio_regs[i]->LATCH;
        p_masks++;
    }
}

static inline void nrf_gpio_latches_read_and_clear(uint32_t start_port,
                                                       uint32_t length,
                                                       uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL), };
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = gpio_regs[i]->LATCH;


        gpio_regs[i]->LATCH = *p_masks;

        p_masks++;
    }
}

static inline uint32_t nrf_gpio_pin_latch_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (reg->LATCH & (1 << pin_number)) ? 1 : 0;
}


static inline void nrf_gpio_pin_latch_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->LATCH = (1 << pin_number);
}
# 1417 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
static inline 
# 1417 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                 _Bool 
# 1417 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                      nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    {
        case 0: mask = 0xFFFFFFFFUL; break; case 1: mask = 0x0000FFFFUL; break; ;

        default:
            return 
# 1427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                  0
# 1427 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                       ;
    }
# 1444 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? 
# 1446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                         1 
# 1446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                              : 
# 1446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h" 3 4
                                                0
# 1446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_gpio.h"
                                                     ;
}

static inline uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = ((pin_number) & 0x1F);

    return ((pin_number) >> 5);
}
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h" 2
# 52 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h"
static inline void nrfy_gpio_range_cfg_output(uint32_t pin_range_start,
                                                   uint32_t pin_range_end)
{
    nrf_gpio_range_cfg_output(pin_range_start, pin_range_end);
    nrf_barrier_w();
}


static inline void nrfy_gpio_range_cfg_input(uint32_t pin_range_start,
                                                  uint32_t pin_range_end,
                                                  nrf_gpio_pin_pull_t pull_config)
{
    nrf_gpio_range_cfg_input(pin_range_start, pin_range_end, pull_config);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg(uint32_t pin_number,
                                      nrf_gpio_pin_dir_t dir,
                                      nrf_gpio_pin_input_t input,
                                      nrf_gpio_pin_pull_t pull,
                                      nrf_gpio_pin_drive_t drive,
                                      nrf_gpio_pin_sense_t sense)
{
    nrf_gpio_cfg(pin_number, dir, input, pull, drive, sense);
    nrf_barrier_w();
}


static inline void nrfy_gpio_reconfigure(uint32_t pin_number,
                                              const nrf_gpio_pin_dir_t * p_dir,
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t * p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg_output(uint32_t pin_number)
{
    nrf_gpio_cfg_output(pin_number);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)
{
    nrf_gpio_cfg_input(pin_number, pull_config);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg_default(uint32_t pin_number)
{
    nrf_gpio_cfg_default(pin_number);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg_watcher(uint32_t pin_number)
{
    nrf_barrier_r();
    nrf_gpio_cfg_watcher(pin_number);
    nrf_barrier_rw();
}


static inline void nrfy_gpio_input_disconnect(uint32_t pin_number)
{
    nrf_barrier_r();
    nrf_gpio_input_disconnect(pin_number);
    nrf_barrier_rw();
}


static inline void nrfy_gpio_cfg_sense_input(uint32_t pin_number,
                                                  nrf_gpio_pin_pull_t pull_config,
                                                  nrf_gpio_pin_sense_t sense_config)
{
    nrf_gpio_cfg_sense_input(pin_number, pull_config, sense_config);
    nrf_barrier_w();
}


static inline void nrfy_gpio_cfg_sense_set(uint32_t pin_number,
                                                nrf_gpio_pin_sense_t sense_config)
{
    nrf_barrier_r();
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
    nrf_barrier_rw();
}


static inline void nrfy_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction)
{
    nrf_gpio_pin_dir_set(pin_number, direction);
    nrf_barrier_w();
}


static inline void nrfy_gpio_pin_set(uint32_t pin_number)
{
    nrf_gpio_pin_set(pin_number);
    nrf_barrier_w();
}


static inline void nrfy_gpio_pin_clear(uint32_t pin_number)
{
    nrf_gpio_pin_clear(pin_number);
    nrf_barrier_w();
}


static inline void nrfy_gpio_pin_toggle(uint32_t pin_number)
{
    nrf_gpio_pin_toggle(pin_number);
    nrf_barrier_w();
}


static inline void nrfy_gpio_pin_write(uint32_t pin_number, uint32_t value)
{
    nrf_gpio_pin_write(pin_number, value);
    nrf_barrier_w();
}


static inline uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
}


static inline uint32_t nrfy_gpio_pin_out_read(uint32_t pin_number)
{
    nrf_barrier_rw();
    uint32_t pin = nrf_gpio_pin_out_read(pin_number);
    nrf_barrier_r();
    return pin;
}


static inline nrf_gpio_pin_sense_t nrfy_gpio_pin_sense_get(uint32_t pin_number)
{
    nrf_barrier_rw();
    nrf_gpio_pin_sense_t pin_sense = nrf_gpio_pin_sense_get(pin_number);
    nrf_barrier_r();
    return pin_sense;
}


static inline nrf_gpio_pin_dir_t nrfy_gpio_pin_dir_get(uint32_t pin_number)
{
    nrf_barrier_rw();
    nrf_gpio_pin_dir_t pin_dir = nrf_gpio_pin_dir_get(pin_number);
    nrf_barrier_r();
    return pin_dir;
}


static inline nrf_gpio_pin_input_t nrfy_gpio_pin_input_get(uint32_t pin_number)
{
    nrf_barrier_rw();
    nrf_gpio_pin_input_t pin_input = nrf_gpio_pin_input_get(pin_number);
    nrf_barrier_r();
    return pin_input;
}


static inline nrf_gpio_pin_pull_t nrfy_gpio_pin_pull_get(uint32_t pin_number)
{
    nrf_barrier_rw();
    nrf_gpio_pin_pull_t pin_pull = nrf_gpio_pin_pull_get(pin_number);
    nrf_barrier_r();
    return pin_pull;
}


static inline void nrfy_gpio_port_dir_output_set(NRF_GPIO_Type * p_reg, uint32_t out_mask)
{
    nrf_gpio_port_dir_output_set(p_reg, out_mask);
    nrf_barrier_w();
}


static inline void nrfy_gpio_port_dir_input_set(NRF_GPIO_Type * p_reg, uint32_t in_mask)
{
    nrf_gpio_port_dir_input_set(p_reg, in_mask);
    nrf_barrier_w();
}


static inline void nrfy_gpio_port_dir_write(NRF_GPIO_Type * p_reg, uint32_t dir_mask)
{
    nrf_gpio_port_dir_write(p_reg, dir_mask);
    nrf_barrier_w();
}


static inline uint32_t nrfy_gpio_port_dir_read(NRF_GPIO_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t port_dir = nrf_gpio_port_dir_read(p_reg);
    nrf_barrier_r();
    return port_dir;
}


static inline uint32_t nrfy_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t port_in = nrf_gpio_port_in_read(p_reg);
    nrf_barrier_r();
    return port_in;
}


static inline uint32_t nrfy_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
    nrf_barrier_rw();
    uint32_t port_out = nrf_gpio_port_out_read(p_reg);
    nrf_barrier_r();
    return port_out;
}


static inline void nrfy_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    nrf_gpio_port_out_write(p_reg, value);
    nrf_barrier_w();
}


static inline void nrfy_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    nrf_gpio_port_out_set(p_reg, set_mask);
    nrf_barrier_w();
}


static inline void nrfy_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    nrf_gpio_port_out_clear(p_reg, clr_mask);
    nrf_barrier_w();
}


static inline void nrfy_gpio_ports_read(uint32_t start_port,
                                             uint32_t length,
                                             uint32_t * p_masks)
{
    nrf_barrier_r();
    nrf_gpio_ports_read(start_port, length, p_masks);
    nrf_barrier_r();
}



static inline void nrfy_gpio_latches_read(uint32_t start_port,
                                               uint32_t length,
                                               uint32_t * p_masks)
{
    nrf_barrier_r();
    nrf_gpio_latches_read(start_port, length, p_masks);
    nrf_barrier_r();
}


static inline void nrfy_gpio_latches_read_and_clear(uint32_t start_port,
                                                         uint32_t length,
                                                         uint32_t * p_masks)
{
    nrf_barrier_r();
    nrf_gpio_latches_read_and_clear(start_port, length, p_masks);
    nrf_barrier_rw();
}


static inline uint32_t nrfy_gpio_pin_latch_get(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin_latch = nrf_gpio_pin_latch_get(pin_number);
    nrf_barrier_r();
    return pin_latch;
}


static inline void nrfy_gpio_pin_latch_clear(uint32_t pin_number)
{
    nrf_gpio_pin_latch_clear(pin_number);
    nrf_barrier_w();
}
# 382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h"
static inline 
# 382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h" 3 4
                  _Bool 
# 382 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_gpio.h"
                       nrfy_gpio_pin_present_check(uint32_t pin_number)
{
    return nrf_gpio_pin_present_check(pin_number);
}


static inline uint32_t nrfy_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    return nrf_gpio_pin_port_number_extract(p_pin);
}
# 40 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 2
# 53 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
typedef struct
{
    NRF_SPIM_Type * p_reg;
    uint8_t drv_inst_idx;
} nrfx_spim_t;


enum {

    NRFX_SPIM0_INST_IDX, NRFX_SPIM2_INST_IDX,
    NRFX_SPIM_ENABLED_COUNT
};
# 75 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
typedef struct
{
    uint32_t sck_pin;
    uint32_t mosi_pin;


    uint32_t miso_pin;


    uint32_t ss_pin;
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
    
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 3 4
   _Bool 
# 93 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
                        ss_active_high;
    uint8_t irq_priority;
    uint8_t orc;


    uint32_t frequency;
    nrf_spim_mode_t mode;
    nrf_spim_bit_order_t bit_order;
    nrf_gpio_pin_pull_t miso_pull;

    uint32_t dcx_pin;
    uint8_t rx_delay;




    
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 3 4
   _Bool 
# 109 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
                        use_hw_ss;
    uint8_t ss_duration;





    
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 3 4
   _Bool 
# 116 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
                        skip_gpio_cfg;




    
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 3 4
   _Bool 
# 121 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
                        skip_psel_cfg;
# 132 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
} nrfx_spim_config_t;
# 204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
typedef nrfy_spim_xfer_desc_t nrfx_spim_xfer_desc_t;
# 235 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
typedef enum
{
    NRFX_SPIM_EVENT_DONE,
} nrfx_spim_evt_type_t;


typedef struct
{
    nrfx_spim_evt_type_t type;
    nrfx_spim_xfer_desc_t xfer_desc;
} nrfx_spim_evt_t;


typedef void (* nrfx_spim_evt_handler_t)(nrfx_spim_evt_t const * p_event,
                                         void * p_context);
# 280 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
nrfx_err_t nrfx_spim_init(nrfx_spim_t const * p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t handler,
                          void * p_context);
# 302 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
nrfx_err_t nrfx_spim_reconfigure(nrfx_spim_t const * p_instance,
                                 nrfx_spim_config_t const * p_config);






void nrfx_spim_uninit(nrfx_spim_t const * p_instance);
# 320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"

# 320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h" 3 4
_Bool 
# 320 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
    nrfx_spim_init_check(nrfx_spim_t const * p_instance);
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const * p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t flags);
# 403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
nrfx_err_t nrfx_spim_xfer_dcx(nrfx_spim_t const * p_instance,
                              nrfx_spim_xfer_desc_t const * p_xfer_desc,
                              uint32_t flags,
                              uint8_t cmd_length);
# 419 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
static inline uint32_t nrfx_spim_start_task_address_get(nrfx_spim_t const * p_instance);
# 431 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
static inline uint32_t nrfx_spim_end_event_address_get(nrfx_spim_t const * p_instance);
# 444 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
void nrfx_spim_abort(nrfx_spim_t const * p_instance);
# 456 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
static inline uint32_t nrfx_spim_start_task_address_get(nrfx_spim_t const * p_instance)
{
    return nrfy_spim_task_address_get(p_instance->p_reg, NRF_SPIM_TASK_START);
}

static inline uint32_t nrfx_spim_end_event_address_get(nrfx_spim_t const * p_instance)
{
    return nrfy_spim_event_address_get(p_instance->p_reg, NRF_SPIM_EVENT_END);
}
# 481 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/include/nrfx_spim.h"
void nrfx_spim_0_irq_handler(void); void nrfx_spim_2_irq_handler(void);
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 1
# 212 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
typedef enum
{





    NRF_CLOCK_LFCLK_RC = (0UL),







    NRF_CLOCK_LFCLK_XTAL = (1UL),







    NRF_CLOCK_LFCLK_SYNTH = (2UL),
# 247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
    NRF_CLOCK_LFCLK_XTAL_LOW_SWING = ((1UL) |
        ((1UL) << (17UL))),




    NRF_CLOCK_LFCLK_XTAL_FULL_SWING = ((1UL) |
        ((1UL) << (16UL)) |
        ((1UL) << (17UL))),

} nrf_clock_lfclk_t;





typedef enum
{

    NRF_CLOCK_HFCLK_HIGH_ACCURACY = (1UL),







    NRF_CLOCK_HFCLK_LOW_ACCURACY = (0UL),





} nrf_clock_hfclk_t;


typedef enum
{
    NRF_CLOCK_DOMAIN_LFCLK,
    NRF_CLOCK_DOMAIN_HFCLK,






} nrf_clock_domain_t;
# 317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
typedef enum
{
    NRF_CLOCK_START_TASK_NOT_TRIGGERED = (0UL),
    NRF_CLOCK_START_TASK_TRIGGERED = (1UL)
} nrf_clock_start_task_status_t;


typedef enum
{
    NRF_CLOCK_INT_HF_STARTED_MASK = (0x1UL << (0UL)),
    NRF_CLOCK_INT_LF_STARTED_MASK = (0x1UL << (1UL)),





    NRF_CLOCK_INT_DONE_MASK = (0x1UL << (3UL)),


    NRF_CLOCK_INT_CTTO_MASK = (0x1UL << (4UL)),


    NRF_CLOCK_INT_CTSTARTED_MASK = (0x1UL << (10UL)),
    NRF_CLOCK_INT_CTSTOPPED_MASK = (0x1UL << (11UL))
# 349 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
} nrf_clock_int_mask_t;







typedef enum
{




    NRF_CLOCK_TASK_HFCLKSTART = 
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_HFCLKSTART
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 363 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                              ,
    NRF_CLOCK_TASK_HFCLKSTOP = 
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_HFCLKSTOP
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 364 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                             ,





    NRF_CLOCK_TASK_LFCLKSTART = 
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_LFCLKSTART
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 370 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                              ,
    NRF_CLOCK_TASK_LFCLKSTOP = 
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_LFCLKSTOP
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 371 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                             ,

    NRF_CLOCK_TASK_CAL = 
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_CAL
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                       ,


    NRF_CLOCK_TASK_CTSTART = 
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_CTSTART
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                           ,
    NRF_CLOCK_TASK_CTSTOP = 
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    __builtin_offsetof (
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    NRF_CLOCK_Type
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    , 
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                    TASKS_CTSTOP
# 377 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                    )
# 387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"

# 387 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
} nrf_clock_task_t;


typedef enum
{



    NRF_CLOCK_EVENT_HFCLKSTARTED = 
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_HFCLKSTARTED
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )
# 395 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                                    ,




    NRF_CLOCK_EVENT_LFCLKSTARTED = 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_LFCLKSTARTED
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )
# 400 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                                    ,

    NRF_CLOCK_EVENT_DONE = 
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_DONE
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )
# 402 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                            ,


    NRF_CLOCK_EVENT_CTTO = 
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_CTTO
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )
# 405 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                            ,


    NRF_CLOCK_EVENT_CTSTARTED = 
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_CTSTARTED
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )
# 408 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                                 ,
    NRF_CLOCK_EVENT_CTSTOPPED = 
# 409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       __builtin_offsetof (
# 409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       NRF_CLOCK_Type
# 409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       , 
# 409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                       EVENTS_CTSTOPPED
# 409 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                       )








# 417 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
} nrf_clock_event_t;
# 426 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_int_enable(NRF_CLOCK_Type * p_reg, uint32_t mask);
# 435 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask);
# 446 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline uint32_t nrf_clock_int_enable_check(NRF_CLOCK_Type const * p_reg, uint32_t mask);
# 457 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline uint32_t nrf_clock_task_address_get(NRF_CLOCK_Type const * p_reg,
                                                      nrf_clock_task_t task);







static inline void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task);
# 477 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline uint32_t nrf_clock_event_address_get(NRF_CLOCK_Type const * p_reg,
                                                       nrf_clock_event_t event);







static inline void nrf_clock_event_clear(NRF_CLOCK_Type * p_reg, nrf_clock_event_t event);
# 497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline 
# 497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 497 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event);
# 508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline 
# 508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 508 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_start_task_check(NRF_CLOCK_Type const * p_reg,
                                                  nrf_clock_domain_t domain);
# 524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline 
# 524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 524 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t domain,
                                            void * p_clk_src);
# 536 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source);
# 550 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline nrf_clock_lfclk_t nrf_clock_lf_src_get(NRF_CLOCK_Type const * p_reg);
# 566 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline nrf_clock_lfclk_t nrf_clock_lf_actv_src_get(NRF_CLOCK_Type const * p_reg);
# 581 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg);
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline 
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_lf_is_running(NRF_CLOCK_Type const * p_reg);
# 605 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline
nrf_clock_start_task_status_t nrf_clock_lf_start_task_status_get(NRF_CLOCK_Type const * p_reg);
# 631 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline nrf_clock_hfclk_t nrf_clock_hf_src_get(NRF_CLOCK_Type const * p_reg);
# 644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline 
# 644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_hf_is_running(NRF_CLOCK_Type const * p_reg,
                                               nrf_clock_hfclk_t clk_src);
# 657 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline
nrf_clock_start_task_status_t nrf_clock_hf_start_task_status_get(NRF_CLOCK_Type const * p_reg);
# 699 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_cal_timer_timeout_set(NRF_CLOCK_Type * p_reg, uint32_t interval);
# 846 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_int_enable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
}

static inline void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
}

static inline uint32_t nrf_clock_int_enable_check(NRF_CLOCK_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
}

static inline uint32_t nrf_clock_task_address_get(NRF_CLOCK_Type const * p_reg,
                                                      nrf_clock_task_t task)
{
    return nrf_task_event_address_get(p_reg, task);
}

static inline void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
}

static inline uint32_t nrf_clock_event_address_get(NRF_CLOCK_Type const * p_reg,
                                                       nrf_clock_event_t event)
{
    return nrf_task_event_address_get(p_reg, event);
}

static inline void nrf_clock_event_clear(NRF_CLOCK_Type * p_reg, nrf_clock_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

static inline 
# 884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 884 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return nrf_event_check(p_reg, event);
}

static inline 
# 889 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 889 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_start_task_check(NRF_CLOCK_Type const * p_reg,
                                                  nrf_clock_domain_t domain)
{
    switch (domain)
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            return ((p_reg->LFCLKRUN & (0x1UL << (0UL)))
                    >> (0UL));
        case NRF_CLOCK_DOMAIN_HFCLK:
            return ((p_reg->HFCLKRUN & (0x1UL << (0UL)))
                    >> (0UL));
# 910 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
        default:
            { };
            return 
# 912 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                  0
# 912 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                       ;
    }
}
# 923 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Warray-bounds"


static inline 
# 927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t domain,
                                            void * p_clk_src)
{
    
# 931 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
   _Bool 
# 931 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
        clock_running;
    switch (domain)
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            clock_running = p_reg->LFCLKSTAT & (0x1UL << (16UL));
            if (p_clk_src != 
# 936 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                            ((void *)0)
# 936 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                )
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & (0x3UL << (0UL)))
                                        >> (0UL));
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->HFCLKSTAT & (0x1UL << (16UL));
            if (p_clk_src != 
# 945 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                            ((void *)0)
# 945 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                )
            {






                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & (0x1UL << (0UL)))
                                        >> (0UL));

            }
            break;
# 975 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
        default:
            { };
            return 
# 977 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                  0
# 977 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                       ;
    }
    return clock_running;
}


#pragma GCC diagnostic pop


static inline void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
}

static inline nrf_clock_lfclk_t nrf_clock_lf_src_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
}

static inline nrf_clock_lfclk_t nrf_clock_lf_actv_src_get(NRF_CLOCK_Type const * p_reg)
{
    nrf_clock_lfclk_t clk_src;
    (void)nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_LFCLK, &clk_src);
    return clk_src;
}

static inline nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & (0x3UL << (0UL)))
                                >> (0UL));
}

static inline 
# 1009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 1009 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_lf_is_running(NRF_CLOCK_Type const * p_reg)
{
    return nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_LFCLK, 
# 1011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                                                              ((void *)0)
# 1011 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                                                                  );
}

static inline
nrf_clock_start_task_status_t nrf_clock_lf_start_task_status_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_start_task_status_t)nrf_clock_start_task_check(p_reg,
                                                                     NRF_CLOCK_DOMAIN_LFCLK);
}
# 1028 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline nrf_clock_hfclk_t nrf_clock_hf_src_get(NRF_CLOCK_Type const * p_reg)
{
# 1038 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
    return (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & (0x1UL << (0UL)))
                                >> (0UL));

}

static inline 
# 1043 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
                 _Bool 
# 1043 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
                      nrf_clock_hf_is_running(NRF_CLOCK_Type const * p_reg,
                                               nrf_clock_hfclk_t clk_src)
{
    nrf_clock_hfclk_t active_clk_src;
    
# 1047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h" 3 4
   _Bool 
# 1047 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
        ret = nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_HFCLK, &active_clk_src);
    return (ret && (active_clk_src == clk_src));
}

static inline
nrf_clock_start_task_status_t nrf_clock_hf_start_task_status_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_start_task_status_t)nrf_clock_start_task_check(p_reg,
                                                                     NRF_CLOCK_DOMAIN_HFCLK);
}
# 1113 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_clock.h"
static inline void nrf_clock_cal_timer_timeout_set(NRF_CLOCK_Type * p_reg, uint32_t interval)
{
    p_reg->CTIV = ((interval << (0UL)) & (0x7FUL << (0UL)));
}
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/devicetree_regions.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h"
struct log_source_const_data {
 const char *name;
 uint8_t level;







};


struct log_source_dynamic_data {
 uint32_t filters;
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h"
};
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h" 1
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h"
struct mpsc_pbuf_hdr {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t data: 32 - 2;
};


struct mpsc_pbuf_skip {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t len: 32 - 2;
};


union mpsc_pbuf_generic {
 struct mpsc_pbuf_hdr hdr;
 struct mpsc_pbuf_skip skip;
 uint32_t raw;
};
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 1
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 45 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
struct cbprintf_package_desc {

 uint8_t len;


 uint8_t str_cnt;


 uint8_t ro_str_cnt;


 uint8_t rw_str_cnt;
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
} 
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;





union cbprintf_package_hdr {

 struct cbprintf_package_desc desc;

 void *raw;





} 
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;







struct cbprintf_package_hdr_ext {

 union cbprintf_package_hdr hdr;


 char *fmt;





} 
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2
# 55 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
 for (size_t i = 0; i < len; i++) {
  dst[i] = src[i];
 }
}

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_cxx.h" 1
# 63 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
static inline __attribute__((always_inline)) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 3 4
                    _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
                         ___is_null(void *p)
{
 return p == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 3 4
            ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
                ;
}
# 125 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 145 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
_Static_assert(((((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) != 0) && ((((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) & (((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))-1)) == 0)), "" );
# 280 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_enums.h" 1
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_enums.h"
enum cbprintf_package_arg_type {

 CBPRINTF_PACKAGE_ARG_TYPE_END = 0,

 CBPRINTF_PACKAGE_ARG_TYPE_CHAR,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_CHAR,

 CBPRINTF_PACKAGE_ARG_TYPE_SHORT,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_SHORT,

 CBPRINTF_PACKAGE_ARG_TYPE_INT,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_INT,

 CBPRINTF_PACKAGE_ARG_TYPE_LONG,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_LONG,

 CBPRINTF_PACKAGE_ARG_TYPE_LONG_LONG,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_LONG_LONG,

 CBPRINTF_PACKAGE_ARG_TYPE_FLOAT,
 CBPRINTF_PACKAGE_ARG_TYPE_DOUBLE,
 CBPRINTF_PACKAGE_ARG_TYPE_LONG_DOUBLE,

 CBPRINTF_PACKAGE_ARG_TYPE_PTR_CHAR,

 CBPRINTF_PACKAGE_ARG_TYPE_PTR_VOID,

 CBPRINTF_PACKAGE_ARG_TYPE_MAX,

 CBPRINTF_PACKAGE_ARG_TYPE_COUNT = CBPRINTF_PACKAGE_ARG_TYPE_MAX
};
# 281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 302 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbprintf_cb)( );
# 313 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbprintf_convert_cb)(const void *buf, size_t len, void *ctx);
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbvprintf_external_formatter_func)(cbprintf_cb out, void *ctx,
       const char *fmt, va_list ap);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
__attribute__((format (printf, 4, 5)))
int cbprintf_package(void *packaged,
       size_t len,
       uint32_t flags,
       const char *format,
       ...);
# 471 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbvprintf_package(void *packaged,
        size_t len,
        uint32_t flags,
        const char *format,
        va_list ap);
# 512 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbprintf_package_convert(void *in_packaged,
        size_t in_len,
        cbprintf_convert_cb cb,
        void *ctx,
        uint32_t flags,
        uint16_t *strl,
        size_t strl_len);


struct z_cbprintf_buf_desc {
 void *buf;
 size_t size;
 size_t off;
};


static inline int z_cbprintf_cpy(const void *buf, size_t len, void *ctx)
{
 struct z_cbprintf_buf_desc *desc = (struct z_cbprintf_buf_desc *)ctx;

 if ((desc->size - desc->off) < len) {
  return -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
         28
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
               ;
 }

 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
((__builtin_object_size(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
buf
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
len
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, __builtin_object_size(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 0)) : __memcpy_ichk(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
buf
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
len
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
))
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                                    ;
 desc->off += len;

 return len;
}
# 572 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline int cbprintf_package_copy(void *in_packaged,
     size_t in_len,
     void *packaged,
     size_t len,
     uint32_t flags,
     uint16_t *strl,
     size_t strl_len)
{
 struct z_cbprintf_buf_desc buf_desc = {
  .buf = packaged,
  .size = len,
  .off = 0,
 };

 return cbprintf_package_convert(in_packaged, in_len,
     packaged ? z_cbprintf_cpy : 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
                                ((void *)0)
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                    , &buf_desc,
     flags, strl, strl_len);
}
# 620 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline int cbprintf_fsc_package(void *in_packaged,
           size_t in_len,
           void *packaged,
           size_t len)
{
 return cbprintf_package_copy(in_packaged, in_len, packaged, len,
         (1UL << (0)) |
         (1UL << (1)), 
# 627 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
                                         ((void *)0)
# 627 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                             , 0);
}
# 650 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbpprintf_external(cbprintf_cb out,
         cbvprintf_external_formatter_func formatter,
         void *ctx,
         void *packaged);
# 681 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
__attribute__((format (printf, 3, 4)))
int cbprintf(cbprintf_cb out, void *ctx, const char *format, ...);
# 712 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *format,
       va_list ap, uint32_t flags);
# 741 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
# 777 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline
int cbvprintf_tagged_args(cbprintf_cb out, void *ctx,
     const char *format, va_list ap)
{
 return z_cbvprintf_impl(out, ctx, format, ap,
    (1UL << (0)));
}
# 802 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
# 816 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
 return cbpprintf_external(out, cbvprintf, ctx, packaged);
}
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 36 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
typedef uint32_t log_timestamp_t;
# 56 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg_desc {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
 uint32_t domain:3;
 uint32_t level:3;
 uint32_t package_len:11;
 uint32_t data_len:12;
};

union log_msg_source {
 const struct log_source_const_data *fixed;
 struct log_source_dynamic_data *dynamic;
 void *raw;
};

struct log_msg_hdr {
 struct log_msg_desc desc;







 const void *source;
 log_timestamp_t timestamp;




};
# 95 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg {
 struct log_msg_hdr hdr;



 uint8_t padding[((sizeof(struct log_msg_hdr) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) > 0 ? ((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))) - (sizeof(struct log_msg_hdr) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))) : 0)];
 uint8_t data[];
};




_Static_assert(sizeof(struct log_msg) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))) == 0, "" "Log msg size must aligned")
                                  ;





struct log_msg_generic_hdr {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
};

union log_msg_generic {
 union mpsc_pbuf_generic buf;
 struct log_msg_generic_hdr generic;
 struct log_msg log;
};





enum z_log_msg_mode {



 Z_LOG_MSG_MODE_RUNTIME,




 Z_LOG_MSG_MODE_FROM_STACK,





 Z_LOG_MSG_MODE_ZERO_COPY,
};
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg *z_log_msg_alloc(uint32_t wlen);
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
void z_log_msg_finalize(struct log_msg *msg, const void *source,
    const struct log_msg_desc desc, const void *data);
# 516 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_static_create(const void *source,
     const struct log_msg_desc desc,
     uint8_t *package, const void *data);
# 541 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
       uint8_t level, const void *data,
       size_t dlen, uint32_t package_flags,
       const char *fmt,
       va_list ap);
# 568 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_runtime_create(uint8_t domain_id,
          const void *source,
          uint8_t level, const void *data,
          size_t dlen, uint32_t package_flags,
          const char *fmt, ...)
{
 va_list ap;

 
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
__builtin_va_start(
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
ap
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
,
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
fmt
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
)
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
                 ;
 z_log_msg_runtime_vcreate(domain_id, source, level,
       data, dlen, package_flags, fmt, ap);
 
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
__builtin_va_end(
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
ap
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
)
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
          ;
}

static inline 
# 582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
             _Bool 
# 582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
                  z_log_item_is_msg(const union log_msg_generic *msg)
{
 return msg->generic.type == 0;
}







static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
 return (((((((unsigned long)((
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       __builtin_offsetof (
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       struct log_msg
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       , 
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       data
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       ) 
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       + desc.package_len + (desc.data_len))) + ((unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) - 1)) / (unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))) * (unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))))) + (sizeof(uint32_t)) - 1) / (sizeof(uint32_t)));
}







static inline uint32_t log_msg_generic_get_wlen(const union mpsc_pbuf_generic *item)
{
 const union log_msg_generic *generic_msg = (const union log_msg_generic *)item;

 if (z_log_item_is_msg(generic_msg)) {
  const struct log_msg *msg = (const struct log_msg *)generic_msg;

  return log_msg_get_total_wlen(msg->hdr.desc);
 }

 return 0;
}







static inline uint8_t log_msg_get_domain(struct log_msg *msg)
{
 return msg->hdr.desc.domain;
}







static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
 return msg->hdr.desc.level;
}







static inline const void *log_msg_get_source(struct log_msg *msg)
{
 return msg->hdr.source;
}







static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
 return msg->hdr.timestamp;
}







static inline void *log_msg_get_tid(struct log_msg *msg)
{



 (void)(msg);
 return 
# 673 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       ((void *)0)
# 673 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
           ;

}
# 685 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline uint8_t *log_msg_get_data(struct log_msg *msg, size_t *len)
{
 *len = msg->hdr.desc.data_len;

 return msg->data + msg->hdr.desc.package_len;
}
# 700 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
 *len = msg->hdr.desc.package_len;

 return msg->data;
}





# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
extern void z_impl_z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data);


static inline void z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data)
{
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 3 4
0
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
);
 z_impl_z_log_msg_static_create(source, desc, package, data);
}
# 50 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
extern void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap);


static inline void z_log_msg_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap)
{
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 3 4
0
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
);
 z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
}
# 712 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 2
# 159 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
void z_log_minimal_hexdump_print(int level, const void *data, size_t size);
void z_log_minimal_vprintk(const char *fmt, va_list ap);
void z_log_minimal_printk(const char *fmt, ...);
# 175 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline char z_log_minimal_level_to_char(int level)
{
 switch (level) {
 case 1U:
  return 'E';
 case 2U:
  return 'W';
 case 3U:
  return 'I';
 case 4U:
  return 'D';
 default:
  return '?';
 }
}
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
extern struct log_source_const_data _log_const_list_start[];
extern struct log_source_const_data _log_const_list_end[];
# 427 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline uint32_t log_const_source_id(
    const struct log_source_const_data *data)
{
 return ((const uint8_t *)data - (uint8_t *)_log_const_list_start)/
   sizeof(struct log_source_const_data);
}

extern struct log_source_dynamic_data _log_dynamic_list_start[];
extern struct log_source_dynamic_data _log_dynamic_list_end[];
# 453 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
 return ((uint8_t *)data - (uint8_t *)_log_dynamic_list_start)/
   sizeof(struct log_source_dynamic_data);
}


static inline __attribute__((format (printf, 1, 2)))
void z_log_printf_arg_checker(const char *fmt, ...)
{
 (void)(fmt);
}
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline void log2_generic(uint8_t level, const char *fmt, va_list ap)
{
 z_log_msg_runtime_vcreate(0, 
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 3 4
                                                 ((void *)0)
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
                                                     , level,
       
# 478 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 3 4
      ((void *)0)
# 478 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
          , 0, 0, fmt, ap);
}
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 2
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h"
void z_log_vprintk(const char *fmt, va_list ap);
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2

const 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct log_source_const_data)
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_source_const_data log_const_spi_nrfx_spim __attribute__((section("." "_log_const" "." "static" "." "log_const_spi_nrfx_spim_"))) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= { .name = "spi_nrfx_spim", .level = 3 }; extern const struct log_source_const_data log_const_spi_nrfx_spim; extern struct log_source_dynamic_data log_dynamic_spi_nrfx_spim; static const struct log_source_const_data * __log_current_const_data 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__unused__)) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= 1 ? &log_const_spi_nrfx_spim : 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; static struct log_source_dynamic_data * __log_current_dynamic_data 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__unused__)) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= (1 && 0) ? &log_dynamic_spi_nrfx_spim : 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; static const uint32_t __log_level 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__unused__)) 
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= 3;

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
enum spi_ctx_runtime_op_mode {
 SPI_CTX_RUNTIME_OP_MODE_MASTER = (1UL << (0)),
 SPI_CTX_RUNTIME_OP_MODE_SLAVE = (1UL << (1)),
};

struct spi_context {
 const struct spi_config *config;
 const struct spi_config *owner;
 const struct gpio_dt_spec *cs_gpios;
 size_t num_cs_gpios;

 struct k_sem lock;
 struct k_sem sync;
 int sync_status;






 const struct spi_buf *current_tx;
 size_t tx_count;
 const struct spi_buf *current_rx;
 size_t rx_count;

 const uint8_t *tx_buf;
 size_t tx_len;
 uint8_t *rx_buf;
 size_t rx_len;




};
# 78 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
static inline 
# 78 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
             _Bool 
# 78 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                  spi_context_configured(struct spi_context *ctx,
       const struct spi_config *config)
{
 return !!(ctx->config == config);
}

static inline 
# 84 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
             _Bool 
# 84 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                  spi_context_is_slave(struct spi_context *ctx)
{
 return (ctx->config->operation & (1UL << (0)));
}

static inline void spi_context_lock(struct spi_context *ctx,
        
# 90 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
       _Bool 
# 90 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            asynchronous,
        spi_callback_t callback,
        void *callback_data,
        const struct spi_config *spi_cfg)
{
 if ((spi_cfg->operation & (1UL << (13))) &&
  (k_sem_count_get(&ctx->lock) == 0) &&
  (ctx->owner == spi_cfg)) {
   return;
 }

 k_sem_take(&ctx->lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));
 ctx->owner = spi_cfg;






}

static inline void spi_context_release(struct spi_context *ctx, int status)
{
# 125 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 if (!(ctx->config->operation & (1UL << (13)))) {
  ctx->owner = 
# 126 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
              ((void *)0)
# 126 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                  ;
  k_sem_give(&ctx->lock);
 }

}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx);
static inline size_t spi_context_total_rx_len(struct spi_context *ctx);

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
 int status = 0;
 
# 138 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 138 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
     wait;




 wait = 
# 143 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
       1
# 143 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
           ;


 if (wait) {
  k_timeout_t timeout;





  if (0 && spi_context_is_slave(ctx)) {
   timeout = ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) });
  } else {
   uint32_t tx_len = spi_context_total_tx_len(ctx);
   uint32_t rx_len = spi_context_total_rx_len(ctx);
   uint32_t timeout_ms;

   timeout_ms = (((tx_len) > (rx_len)) ? (tx_len) : (rx_len)) * 8 * 1000 /
         ctx->config->frequency;
   timeout_ms += 200;

   timeout = ((k_timeout_t) { .ticks = ((k_ticks_t)((
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            1
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? ( ((32768) == (1000)) ? (uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) : ((1000) > (32768) && (1000) % (32768) == 0U) ? (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) + ((
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            0
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? ((1000) / (32768)) / 2 : (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            1
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? ((1000) / (32768)) - 1 : 0)) / ((1000) / (32768))) : ((32768) > (1000) && (32768) % (1000) == 0U) ? (uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0)))*((32768) / (1000)) : ((((((365 * 24ULL * 3600ULL * 1000) + (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            (0xffffffffUL)
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) - 1) / (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            (0xffffffffUL)
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            )) * 32768) <= 
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            (0xffffffffUL)
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0)))*(32768) + ((
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            0
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) / 2 : (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            1
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) - 1 : 0)) / (1000)) : (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) / (1000))*(32768) + (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) % (1000))*(32768) + ((
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            0
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) / 2 : (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            1
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) - 1 : 0)) / (1000))) ) : (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) / (1000))*(32768) + (((uint64_t) ((((timeout_ms) > (0)) ? (timeout_ms) : (0))) % (1000))*(32768) + ((
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            0
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) / 2 : (
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
            1
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            ) ? (1000) - 1 : 0)) / (1000)) )) });
  }

  if (k_sem_take(&ctx->sync, timeout)) {
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Timeout waiting for transfer complete" "\n", z_log_minimal_level_to_char(1U)); } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   ;
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   do { ; 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  has_rw_str = ({
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Timeout waiting for transfer complete" == 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { _plen = 0; } else { do {
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _Static_assert(!0 || (0 && !(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ? 0 : 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  (0x7fffffffL)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  )
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  22
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Timeout waiting for transfer complete") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Timeout waiting for transfer complete") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Timeout waiting for transfer complete") + 0))) > (1)) ? (_Generic(("Timeout waiting for transfer complete") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Timeout waiting for transfer complete") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Timeout waiting for transfer complete") + 0; (void)__v; size_t __arg_size = _Generic(("Timeout waiting for transfer complete"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Timeout waiting for transfer complete") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Timeout waiting for transfer complete") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Timeout waiting for transfer complete") + 0; double _d = _Generic(("Timeout waiting for transfer complete") + 0, float : ("Timeout waiting for transfer complete") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Timeout waiting for transfer complete") + 0; (void)__v; size_t __arg_size = _Generic(("Timeout waiting for transfer complete"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Timeout waiting for transfer complete") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Timeout waiting for transfer complete") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Timeout waiting for transfer complete"; } } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  : _total_len; if (_pbuf != 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); }
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   struct log_msg *_msg;
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   long long _ll_buf[((((
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((__builtin_object_size(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , __builtin_object_size(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 0)) : __memset_ichk(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ))
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); if (_plen != 0) { do {
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _Static_assert(!0 || (0 && !(
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  (0x7fffffffL)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  )
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  22
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Timeout waiting for transfer complete") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Timeout waiting for transfer complete") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Timeout waiting for transfer complete") + 0))) > (1)) ? (_Generic(("Timeout waiting for transfer complete") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Timeout waiting for transfer complete") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Timeout waiting for transfer complete") + 0; (void)__v; size_t __arg_size = _Generic(("Timeout waiting for transfer complete"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Timeout waiting for transfer complete") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Timeout waiting for transfer complete") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Timeout waiting for transfer complete") + 0; double _d = _Generic(("Timeout waiting for transfer complete") + 0, float : ("Timeout waiting for transfer complete") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Timeout waiting for transfer complete") + 0; (void)__v; size_t __arg_size = _Generic(("Timeout waiting for transfer complete"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Timeout waiting for transfer complete") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Timeout waiting for transfer complete") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Timeout waiting for transfer complete"; } } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  : _total_len; if (_pbuf != 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); (void)_mode; if (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { z_log_printf_arg_checker("Timeout waiting for transfer complete"); } } while (
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 168 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  );
   return -
# 169 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
          116
# 169 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                   ;
  }
  status = ctx->sync_status;
 }







 return status;
}

static inline void spi_context_complete(struct spi_context *ctx,
     const struct device *dev,
     int status)
{
# 210 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ctx->sync_status = status;
 k_sem_give(&ctx->sync);

}

static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
 int ret;
 const struct gpio_dt_spec *cs_gpio;

 for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
  if (!device_is_ready(cs_gpio->port)) {
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "CS GPIO port %s pin %d is not ready" "\n", z_log_minimal_level_to_char(1U), cs_gpio->port->name, cs_gpio->pin); } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
#pragma GCC diagnostic push
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   ; __auto_type _v1 = (cs_gpio->port->name) + 0 ; __auto_type _v2 = (cs_gpio->pin) + 0;
#pragma GCC diagnostic pop
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   do { ; 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  has_rw_str = ({
#pragma GCC diagnostic push
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
#pragma GCC diagnostic pop
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("CS GPIO port %s pin %d is not ready" == 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { _plen = 0; } else { do {
#pragma GCC diagnostic push
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _Static_assert(!0 || (0 && !(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ? 0 : 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  (0x7fffffffL)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  )
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  22
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("CS GPIO port %s pin %d is not ready") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("CS GPIO port %s pin %d is not ready") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("CS GPIO port %s pin %d is not ready") + 0))) > (1)) ? (_Generic(("CS GPIO port %s pin %d is not ready") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("CS GPIO port %s pin %d is not ready") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("CS GPIO port %s pin %d is not ready") + 0; (void)__v; size_t __arg_size = _Generic(("CS GPIO port %s pin %d is not ready"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("CS GPIO port %s pin %d is not ready") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("CS GPIO port %s pin %d is not ready") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("CS GPIO port %s pin %d is not ready") + 0; double _d = _Generic(("CS GPIO port %s pin %d is not ready") + 0, float : ("CS GPIO port %s pin %d is not ready") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("CS GPIO port %s pin %d is not ready") + 0; (void)__v; size_t __arg_size = _Generic(("CS GPIO port %s pin %d is not ready"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("CS GPIO port %s pin %d is not ready") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("CS GPIO port %s pin %d is not ready") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "CS GPIO port %s pin %d is not ready"; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  : _total_len; if (_pbuf != 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); }
#pragma GCC diagnostic push
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
#pragma GCC diagnostic ignored "-Wshadow"
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   struct log_msg *_msg;
#pragma GCC diagnostic pop
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   long long _ll_buf[((((
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((__builtin_object_size(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , __builtin_object_size(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 0)) : __memset_ichk(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  + _plen + (0))
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ))
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); if (_plen != 0) { do {
#pragma GCC diagnostic push
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   _Static_assert(!0 || (0 && !(
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ) 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  _Bool 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  (0x7fffffffL)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  __builtin_offsetof (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  , 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  data
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  )
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  22
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("CS GPIO port %s pin %d is not ready") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("CS GPIO port %s pin %d is not ready") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("CS GPIO port %s pin %d is not ready") + 0))) > (1)) ? (_Generic(("CS GPIO port %s pin %d is not ready") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("CS GPIO port %s pin %d is not ready") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("CS GPIO port %s pin %d is not ready") + 0; (void)__v; size_t __arg_size = _Generic(("CS GPIO port %s pin %d is not ready"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("CS GPIO port %s pin %d is not ready") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("CS GPIO port %s pin %d is not ready") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("CS GPIO port %s pin %d is not ready") + 0; double _d = _Generic(("CS GPIO port %s pin %d is not ready") + 0, float : ("CS GPIO port %s pin %d is not ready") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("CS GPIO port %s pin %d is not ready") + 0; (void)__v; size_t __arg_size = _Generic(("CS GPIO port %s pin %d is not ready"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("CS GPIO port %s pin %d is not ready") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("CS GPIO port %s pin %d is not ready") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "CS GPIO port %s pin %d is not ready"; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  28 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  : _total_len; if (_pbuf != 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
   } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ); (void)_mode; if (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ) { z_log_printf_arg_checker("CS GPIO port %s pin %d is not ready", cs_gpio->port->name, cs_gpio->pin); } } while (
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
  0
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  )
                                      ;
   return -
# 224 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
          19
# 224 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                ;
  }

  ret = gpio_pin_configure_dt(cs_gpio, ((1U << 17) | (1U << 18) | (1U << 20)));
  if (ret < 0) {
   return ret;
  }
 }

 return 0;
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
        
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
       _Bool 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
            on, 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                _Bool 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                     force_off)
{
 if (ctx->config && spi_cs_is_gpio(ctx->config)) {
  if (on) {
   gpio_pin_set_dt(&ctx->config->cs.gpio, 1);
   k_busy_wait(ctx->config->cs.delay);
  } else {
   if (!force_off &&
       ctx->config->operation & (1UL << (12))) {
    return;
   }

   k_busy_wait(ctx->config->cs.delay);
   gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
  }
 }
}

static inline void spi_context_cs_control(struct spi_context *ctx, 
# 255 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                                                                  _Bool 
# 255 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                                                       on)
{
 _spi_context_cs_control(ctx, on, 
# 257 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                                 0
# 257 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                      );
}

static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{

 _spi_context_cs_control(ctx, 
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                             0
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                  , 
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                                    1
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                        );

 if (!k_sem_count_get(&ctx->lock)) {
  ctx->owner = 
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
              ((void *)0)
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                  ;
  k_sem_give(&ctx->lock);
 }
}

static inline void *spi_context_get_next_buf(const struct spi_buf **current,
          size_t *count,
          size_t *buf_len,
          uint8_t dfs)
{

 while (*count) {
  if (((*current)->len / dfs) != 0) {
   *buf_len = (*current)->len / dfs;
   return (*current)->buf;
  }
  ++(*current);
  --(*count);
 }

 *buf_len = 0;
 return 
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
       ((void *)0)
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
           ;
}

static inline
void spi_context_buffers_setup(struct spi_context *ctx,
          const struct spi_buf_set *tx_bufs,
          const struct spi_buf_set *rx_bufs,
          uint8_t dfs)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "tx_bufs %p - rx_bufs %p - %u" "\n", z_log_minimal_level_to_char(4U), tx_bufs, rx_bufs, dfs); } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (tx_bufs) + 0 ; __auto_type _v3 = (rx_bufs) + 0 ; __auto_type _v4 = (dfs) + 0;
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 do { ; 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
has_rw_str = ({
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "tx_bufs %p - rx_bufs %p - %u" == 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { _plen = 0; } else { do {
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ? 0 : 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0))) > (1)) ? (_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; double _d = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "tx_bufs %p - rx_bufs %p - %u"; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); }
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg *_msg;
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 long long _ll_buf[((((
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((__builtin_object_size(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, __builtin_object_size(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0)) : __memset_ichk(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
))
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); if (_plen != 0) { do {
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0))) > (1)) ? (_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; double _d = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "tx_bufs %p - rx_bufs %p - %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "tx_bufs %p - rx_bufs %p - %u"; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); (void)_mode; if (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { z_log_printf_arg_checker("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs); } } while (
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
);

 ctx->current_tx = tx_bufs ? tx_bufs->buffers : 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                                               ((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                                   ;
 ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 ctx->tx_buf = (const uint8_t *)
  spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
      &ctx->tx_len, dfs);

 ctx->current_rx = rx_bufs ? rx_bufs->buffers : 
# 304 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
                                               ((void *)0)
# 304 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
                                                   ;
 ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 ctx->rx_buf = (uint8_t *)
  spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
      &ctx->rx_len, dfs);

 ctx->sync_status = 0;





 do { if (!(1 && ((4U <= 0) || ((0 == 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu" "\n", z_log_minimal_level_to_char(4U), ctx->current_tx, ctx->tx_count, ctx->current_rx, ctx->rx_count, (void *)ctx->tx_buf, ctx->tx_len, (void *)ctx->rx_buf, ctx->rx_len); } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {




#pragma GCC diagnostic push
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (ctx->current_tx) + 0 ; __auto_type _v3 = (ctx->tx_count) + 0 ; __auto_type _v4 = (ctx->current_rx) + 0 ; __auto_type _v5 = (ctx->rx_count) + 0 ; __auto_type _v6 = ((void *)ctx->tx_buf) + 0 ; __auto_type _v7 = (ctx->tx_len) + 0 ; __auto_type _v8 = ((void *)ctx->rx_buf) + 0 ; __auto_type _v9 = (ctx->rx_len) + 0;




#pragma GCC diagnostic pop
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 do { ; 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
has_rw_str = ({




#pragma GCC diagnostic push
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (4 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (5 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (6 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (7 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (8 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }




#pragma GCC diagnostic pop
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu" == 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { _plen = 0; } else { do {




#pragma GCC diagnostic push
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (4 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (5 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (6 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (7 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (8 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (5 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (6 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (7 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (8 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ? 0 : 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v5) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v5) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v5) + 0))) > (1)) ? (_Generic((_v5) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v5) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v5) + 0; (void)__v; size_t __arg_size = _Generic((_v5), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (5 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v5) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((5 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 5 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 5 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v5) + 0; double _d = _Generic((_v5) + 0, float : (_v5) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v5) + 0; (void)__v; size_t __arg_size = _Generic((_v5), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v5) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v5) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v5; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v6) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v6) + 0))) > (1)) ? (_Generic((_v6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v6) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v6) + 0; (void)__v; size_t __arg_size = _Generic((_v6), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (6 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v6) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((6 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 6 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 6 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v6) + 0; double _d = _Generic((_v6) + 0, float : (_v6) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v6) + 0; (void)__v; size_t __arg_size = _Generic((_v6), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v6) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v6) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v6; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v7) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v7) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v7) + 0))) > (1)) ? (_Generic((_v7) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v7) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v7) + 0; (void)__v; size_t __arg_size = _Generic((_v7), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (7 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v7) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((7 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 7 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 7 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v7) + 0; double _d = _Generic((_v7) + 0, float : (_v7) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v7) + 0; (void)__v; size_t __arg_size = _Generic((_v7), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v7) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v7) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v7; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v8) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v8) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v8) + 0))) > (1)) ? (_Generic((_v8) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v8) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v8) + 0; (void)__v; size_t __arg_size = _Generic((_v8), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (8 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v8) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((8 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 8 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 8 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v8) + 0; double _d = _Generic((_v8) + 0, float : (_v8) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v8) + 0; (void)__v; size_t __arg_size = _Generic((_v8), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v8) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v8) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v8; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v9) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v9) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v9) + 0))) > (1)) ? (_Generic((_v9) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v9) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v9) + 0; (void)__v; size_t __arg_size = _Generic((_v9), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (9 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v9) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((9 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 9 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 9 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v9) + 0; double _d = _Generic((_v9) + 0, float : (_v9) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v9) + 0; (void)__v; size_t __arg_size = _Generic((_v9), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v9) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v9) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v9; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }




#pragma GCC diagnostic pop
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); }




#pragma GCC diagnostic push
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"





#pragma GCC diagnostic ignored "-Wshadow"
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg *_msg;




#pragma GCC diagnostic pop
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 long long _ll_buf[((((
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((__builtin_object_size(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, __builtin_object_size(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0)) : __memset_ichk(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
))
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); if (_plen != 0) { do {




#pragma GCC diagnostic push
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (4 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (5 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (6 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (7 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (8 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (5 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (6 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (7 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (8 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu"; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v5) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v5) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v5) + 0))) > (1)) ? (_Generic((_v5) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v5) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v5) + 0; (void)__v; size_t __arg_size = _Generic((_v5), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (5 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v5) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((5 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v5) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 5 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 5 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v5) + 0; double _d = _Generic((_v5) + 0, float : (_v5) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v5) + 0; (void)__v; size_t __arg_size = _Generic((_v5), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v5) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v5) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v5; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v6) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v6) + 0))) > (1)) ? (_Generic((_v6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v6) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v6) + 0; (void)__v; size_t __arg_size = _Generic((_v6), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (6 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v6) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((6 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v6) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 6 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 6 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v6) + 0; double _d = _Generic((_v6) + 0, float : (_v6) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v6) + 0; (void)__v; size_t __arg_size = _Generic((_v6), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v6) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v6) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v6; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v7) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v7) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v7) + 0))) > (1)) ? (_Generic((_v7) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v7) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v7) + 0; (void)__v; size_t __arg_size = _Generic((_v7), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (7 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v7) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((7 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v7) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 7 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 7 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v7) + 0; double _d = _Generic((_v7) + 0, float : (_v7) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v7) + 0; (void)__v; size_t __arg_size = _Generic((_v7), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v7) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v7) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v7; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v8) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v8) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v8) + 0))) > (1)) ? (_Generic((_v8) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v8) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v8) + 0; (void)__v; size_t __arg_size = _Generic((_v8), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (8 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v8) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((8 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v8) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 8 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 8 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v8) + 0; double _d = _Generic((_v8) + 0, float : (_v8) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v8) + 0; (void)__v; size_t __arg_size = _Generic((_v8), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v8) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v8) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v8; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v9) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v9) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v9) + 0))) > (1)) ? (_Generic((_v9) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v9) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v9) + 0; (void)__v; size_t __arg_size = _Generic((_v9), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (9 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v9) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((9 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v9) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 9 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 9 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v9) + 0; double _d = _Generic((_v9) + 0, float : (_v9) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v9) + 0; (void)__v; size_t __arg_size = _Generic((_v9), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v9) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v9) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v9; } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }




#pragma GCC diagnostic pop
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); (void)_mode; if (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { z_log_printf_arg_checker("current_tx %p (%zu), current_rx %p (%zu)," " tx buf/len %p/%zu, rx buf/len %p/%zu", ctx->current_tx, ctx->tx_count, ctx->current_rx, ctx->rx_count, (void *)ctx->tx_buf, ctx->tx_len, (void *)ctx->rx_buf, ctx->rx_len); } } while (
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
)




                                   ;
}

static inline __attribute__((always_inline))
void spi_context_update_tx(struct spi_context *ctx, uint8_t dfs, uint32_t len)
{
 if (!ctx->tx_len) {
  return;
 }

 if (len > ctx->tx_len) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Update exceeds current buffer" "\n", z_log_minimal_level_to_char(1U)); } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ;
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  do { ; 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 has_rw_str = ({
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Update exceeds current buffer" == 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { _plen = 0; } else { do {
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _Static_assert(!0 || (0 && !(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) ? 0 : 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 (0x7fffffffL)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 )
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 22
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Update exceeds current buffer") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) > (1)) ? (_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Update exceeds current buffer") + 0; double _d = _Generic(("Update exceeds current buffer") + 0, float : ("Update exceeds current buffer") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Update exceeds current buffer") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Update exceeds current buffer") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Update exceeds current buffer"; } } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 : _total_len; if (_pbuf != 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); }
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg *_msg;
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  long long _ll_buf[((((
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((__builtin_object_size(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , __builtin_object_size(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 0)) : __memset_ichk(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ))
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); if (_plen != 0) { do {
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _Static_assert(!0 || (0 && !(
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 (0x7fffffffL)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 )
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 22
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Update exceeds current buffer") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) > (1)) ? (_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Update exceeds current buffer") + 0; double _d = _Generic(("Update exceeds current buffer") + 0, float : ("Update exceeds current buffer") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Update exceeds current buffer") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Update exceeds current buffer") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Update exceeds current buffer"; } } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 : _total_len; if (_pbuf != 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); (void)_mode; if (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { z_log_printf_arg_checker("Update exceeds current buffer"); } } while (
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 );
  return;
 }

 ctx->tx_len -= len;
 if (!ctx->tx_len) {

  ++ctx->current_tx;
  --ctx->tx_count;
  ctx->tx_buf = (const uint8_t *)
   spi_context_get_next_buf(&ctx->current_tx,
       &ctx->tx_count,
       &ctx->tx_len, dfs);
 } else if (ctx->tx_buf) {
  ctx->tx_buf += dfs * len;
 }

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "tx buf/len %p/%zu" "\n", z_log_minimal_level_to_char(4U), (void *)ctx->tx_buf, ctx->tx_len); } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = ((void *)ctx->tx_buf) + 0 ; __auto_type _v3 = (ctx->tx_len) + 0;
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 do { ; 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
has_rw_str = ({
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "tx buf/len %p/%zu" == 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { _plen = 0; } else { do {
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ? 0 : 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "tx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "tx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "tx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "tx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "tx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "tx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "tx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "tx buf/len %p/%zu") + 0, float : ("%s: " "tx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "tx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "tx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "tx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "tx buf/len %p/%zu"; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); }
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg *_msg;
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 long long _ll_buf[((((
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((__builtin_object_size(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, __builtin_object_size(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0)) : __memset_ichk(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
))
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); if (_plen != 0) { do {
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "tx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "tx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "tx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "tx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "tx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "tx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "tx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "tx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "tx buf/len %p/%zu") + 0, float : ("%s: " "tx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "tx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "tx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "tx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "tx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "tx buf/len %p/%zu"; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); (void)_mode; if (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { z_log_printf_arg_checker("tx buf/len %p/%zu", (void *)ctx->tx_buf, ctx->tx_len); } } while (
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
);
}

static inline __attribute__((always_inline))

# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
    spi_context_tx_on(struct spi_context *ctx)
{
 return !!(ctx->tx_len);
}

static inline __attribute__((always_inline))

# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
    spi_context_tx_buf_on(struct spi_context *ctx)
{
 return !!(ctx->tx_buf && ctx->tx_len);
}

static inline __attribute__((always_inline))
void spi_context_update_rx(struct spi_context *ctx, uint8_t dfs, uint32_t len)
{







 if (!ctx->rx_len) {
  return;
 }

 if (len > ctx->rx_len) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Update exceeds current buffer" "\n", z_log_minimal_level_to_char(1U)); } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  ;
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  do { ; 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 has_rw_str = ({
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Update exceeds current buffer" == 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { _plen = 0; } else { do {
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _Static_assert(!0 || (0 && !(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) ? 0 : 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 (0x7fffffffL)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 )
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 22
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Update exceeds current buffer") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) > (1)) ? (_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Update exceeds current buffer") + 0; double _d = _Generic(("Update exceeds current buffer") + 0, float : ("Update exceeds current buffer") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Update exceeds current buffer") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Update exceeds current buffer") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Update exceeds current buffer"; } } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 : _total_len; if (_pbuf != 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); }
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  struct log_msg *_msg;
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  long long _ll_buf[((((
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((__builtin_object_size(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , __builtin_object_size(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 0)) : __memset_ichk(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 + _plen + (0))
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ))
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); if (_plen != 0) { do {
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  _Static_assert(!0 || (0 && !(
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ) 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 (0x7fffffffL)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 __builtin_offsetof (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 , 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 data
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 )
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 22
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Update exceeds current buffer") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) > (1)) ? (_Generic(("Update exceeds current buffer") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Update exceeds current buffer") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Update exceeds current buffer") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Update exceeds current buffer") + 0; double _d = _Generic(("Update exceeds current buffer") + 0, float : ("Update exceeds current buffer") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Update exceeds current buffer") + 0; (void)__v; size_t __arg_size = _Generic(("Update exceeds current buffer"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Update exceeds current buffer") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Update exceeds current buffer") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Update exceeds current buffer"; } } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 28 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 : _total_len; if (_pbuf != 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
  } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 ((void *)0)
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ); (void)_mode; if (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ) { z_log_printf_arg_checker("Update exceeds current buffer"); } } while (
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
 0
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 );
  return;
 }

 ctx->rx_len -= len;
 if (!ctx->rx_len) {

  ++ctx->current_rx;
  --ctx->rx_count;
  ctx->rx_buf = (uint8_t *)
   spi_context_get_next_buf(&ctx->current_rx,
       &ctx->rx_count,
       &ctx->rx_len, dfs);
 } else if (ctx->rx_buf) {
  ctx->rx_buf += dfs * len;
 }

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "rx buf/len %p/%zu" "\n", z_log_minimal_level_to_char(4U), (void *)ctx->rx_buf, ctx->rx_len); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = ((void *)ctx->rx_buf) + 0 ; __auto_type _v3 = (ctx->rx_len) + 0;
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 do { ; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
has_rw_str = ({
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "rx buf/len %p/%zu" == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { _plen = 0; } else { do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ? 0 : 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "rx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "rx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "rx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "rx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "rx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "rx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "rx buf/len %p/%zu") + 0, float : ("%s: " "rx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "rx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "rx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "rx buf/len %p/%zu"; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wshadow"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 struct log_msg *_msg;
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 long long _ll_buf[((((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((__builtin_object_size(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, __builtin_object_size(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 0)) : __memset_ichk(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
+ _plen + (0))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); if (_plen != 0) { do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"

# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 _Static_assert(!0 || (0 && !(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
(0x7fffffffL)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
__builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
22
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "rx buf/len %p/%zu") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "rx buf/len %p/%zu") + 0))) > (1)) ? (_Generic(("%s: " "rx buf/len %p/%zu") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "rx buf/len %p/%zu") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "rx buf/len %p/%zu") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "rx buf/len %p/%zu") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "rx buf/len %p/%zu") + 0; double _d = _Generic(("%s: " "rx buf/len %p/%zu") + 0, float : ("%s: " "rx buf/len %p/%zu") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "rx buf/len %p/%zu") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "rx buf/len %p/%zu"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "rx buf/len %p/%zu") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "rx buf/len %p/%zu") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "rx buf/len %p/%zu"; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
28 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
: _total_len; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
 } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
); (void)_mode; if (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
) { z_log_printf_arg_checker("rx buf/len %p/%zu", (void *)ctx->rx_buf, ctx->rx_len); } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
);
}

static inline __attribute__((always_inline))

# 400 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 400 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
    spi_context_rx_on(struct spi_context *ctx)
{
 return !!(ctx->rx_len);
}

static inline __attribute__((always_inline))

# 406 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h" 3 4
_Bool 
# 406 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_context.h"
    spi_context_rx_buf_on(struct spi_context *ctx)
{
 return !!(ctx->rx_buf && ctx->rx_len);
}






static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
 if (!ctx->tx_len) {
  return ctx->rx_len;
 } else if (!ctx->rx_len) {
  return ctx->tx_len;
 }

 return (((ctx->tx_len) < (ctx->rx_len)) ? (ctx->tx_len) : (ctx->rx_len));
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
 return ctx->tx_len > ctx->rx_len ? ctx->tx_len : ctx->rx_len;
}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
 size_t n;
 size_t total_len = 0;

 for (n = 0; n < ctx->tx_count; ++n) {
  total_len += ctx->current_tx[n].len;
 }

 return total_len;
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
 size_t n;
 size_t total_len = 0;

 for (n = 0; n < ctx->rx_count; ++n) {
  total_len += ctx->current_rx[n].len;
 }

 return total_len;
}
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_common.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_common.h"
int spi_nrfx_wake_init(uint32_t wake_pin);
int spi_nrfx_wake_request(uint32_t wake_pin);
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 2
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct spi_nrfx_data {
 struct spi_context ctx;
 const struct device *dev;
 size_t chunk_len;
 
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
        busy;
 
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
        initialized;

 uint8_t *buffer;






};

struct spi_nrfx_config {
 nrfx_spim_t spim;
 uint32_t max_freq;
 nrfx_spim_config_t def_config;
 void (*irq_connect)(void);
 uint16_t max_chunk_len;
 const struct pinctrl_dev_config *pcfg;



 uint32_t wake_pin;
};

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context);

static inline uint32_t get_nrf_spim_frequency(uint32_t frequency)
{


 if (frequency >= (((32) * 1000) * 1000) && 1) {
  return (((32) * 1000) * 1000);
 } else if (frequency >= (((16) * 1000) * 1000) && 1) {
  return (((16) * 1000) * 1000);
 } else if (frequency >= (((8) * 1000) * 1000)) {
  return (((8) * 1000) * 1000);
 } else if (frequency >= (((4) * 1000) * 1000)) {
  return (((4) * 1000) * 1000);
 } else if (frequency >= (((2) * 1000) * 1000)) {
  return (((2) * 1000) * 1000);
 } else if (frequency >= (((1) * 1000) * 1000)) {
  return (((1) * 1000) * 1000);
 } else if (frequency >= ((500) * 1000)) {
  return ((500) * 1000);
 } else if (frequency >= ((250) * 1000)) {
  return ((250) * 1000);
 } else {
  return ((125) * 1000);
 }
}

static inline nrf_spim_mode_t get_nrf_spim_mode(uint16_t operation)
{
 if (((operation) & (0xEU)) & (1UL << (1))) {
  if (((operation) & (0xEU)) & (1UL << (2))) {
   return NRF_SPIM_MODE_3;
  } else {
   return NRF_SPIM_MODE_2;
  }
 } else {
  if (((operation) & (0xEU)) & (1UL << (2))) {
   return NRF_SPIM_MODE_1;
  } else {
   return NRF_SPIM_MODE_0;
  }
 }
}

static inline nrf_spim_bit_order_t get_nrf_spim_bit_order(uint16_t operation)
{
 if (operation & (1UL << (4))) {
  return NRF_SPIM_BIT_ORDER_LSB_FIRST;
 } else {
  return NRF_SPIM_BIT_ORDER_MSB_FIRST;
 }
}

static int configure(const struct device *dev,
       const struct spi_config *spi_cfg)
{
 struct spi_nrfx_data *dev_data = dev->data;
 const struct spi_nrfx_config *dev_config = dev->config;
 struct spi_context *ctx = &dev_data->ctx;
 uint32_t max_freq = dev_config->max_freq;
 nrfx_spim_config_t config;
 int32_t nrfy_sck_pin;
 nrfx_err_t result;

 if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {

  return 0;
 }

 if (spi_cfg->operation & (1U << 11)) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Half-duplex not supported" "\n", z_log_minimal_level_to_char(1U)); } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ;
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Half-duplex not supported" == 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Half-duplex not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Half-duplex not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Half-duplex not supported") + 0))) > (1)) ? (_Generic(("Half-duplex not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Half-duplex not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Half-duplex not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Half-duplex not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Half-duplex not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Half-duplex not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Half-duplex not supported") + 0; double _d = _Generic(("Half-duplex not supported") + 0, float : ("Half-duplex not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Half-duplex not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Half-duplex not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Half-duplex not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Half-duplex not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Half-duplex not supported"; } } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Half-duplex not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Half-duplex not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Half-duplex not supported") + 0))) > (1)) ? (_Generic(("Half-duplex not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Half-duplex not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Half-duplex not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Half-duplex not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Half-duplex not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Half-duplex not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Half-duplex not supported") + 0; double _d = _Generic(("Half-duplex not supported") + 0, float : ("Half-duplex not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Half-duplex not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Half-duplex not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Half-duplex not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Half-duplex not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Half-duplex not supported"; } } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Half-duplex not supported"); } } while (
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 137 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         134
# 137 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                ;
 }

 if (((spi_cfg->operation) & 0x1U) != 0U) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Slave mode is not supported on %s" "\n", z_log_minimal_level_to_char(1U), dev->name); } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; __auto_type _v1 = (dev->name) + 0;
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Slave mode is not supported on %s" == 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Slave mode is not supported on %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Slave mode is not supported on %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Slave mode is not supported on %s") + 0))) > (1)) ? (_Generic(("Slave mode is not supported on %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Slave mode is not supported on %s") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Slave mode is not supported on %s") + 0; (void)__v; size_t __arg_size = _Generic(("Slave mode is not supported on %s"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Slave mode is not supported on %s") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Slave mode is not supported on %s") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Slave mode is not supported on %s") + 0; double _d = _Generic(("Slave mode is not supported on %s") + 0, float : ("Slave mode is not supported on %s") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Slave mode is not supported on %s") + 0; (void)__v; size_t __arg_size = _Generic(("Slave mode is not supported on %s"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Slave mode is not supported on %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Slave mode is not supported on %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Slave mode is not supported on %s"; } } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Slave mode is not supported on %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Slave mode is not supported on %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Slave mode is not supported on %s") + 0))) > (1)) ? (_Generic(("Slave mode is not supported on %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Slave mode is not supported on %s") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Slave mode is not supported on %s") + 0; (void)__v; size_t __arg_size = _Generic(("Slave mode is not supported on %s"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Slave mode is not supported on %s") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Slave mode is not supported on %s") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Slave mode is not supported on %s") + 0; double _d = _Generic(("Slave mode is not supported on %s") + 0, float : ("Slave mode is not supported on %s") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Slave mode is not supported on %s") + 0; (void)__v; size_t __arg_size = _Generic(("Slave mode is not supported on %s"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Slave mode is not supported on %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Slave mode is not supported on %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Slave mode is not supported on %s"; } } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Slave mode is not supported on %s", dev->name); } } while (
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 142 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 142 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 if (spi_cfg->operation & (1UL << (3))) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Loopback mode is not supported" "\n", z_log_minimal_level_to_char(1U)); } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ;
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Loopback mode is not supported" == 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Loopback mode is not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Loopback mode is not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Loopback mode is not supported") + 0))) > (1)) ? (_Generic(("Loopback mode is not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Loopback mode is not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Loopback mode is not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Loopback mode is not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Loopback mode is not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Loopback mode is not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Loopback mode is not supported") + 0; double _d = _Generic(("Loopback mode is not supported") + 0, float : ("Loopback mode is not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Loopback mode is not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Loopback mode is not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Loopback mode is not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Loopback mode is not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Loopback mode is not supported"; } } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Loopback mode is not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Loopback mode is not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Loopback mode is not supported") + 0))) > (1)) ? (_Generic(("Loopback mode is not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Loopback mode is not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Loopback mode is not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Loopback mode is not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Loopback mode is not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Loopback mode is not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Loopback mode is not supported") + 0; double _d = _Generic(("Loopback mode is not supported") + 0, float : ("Loopback mode is not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Loopback mode is not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Loopback mode is not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Loopback mode is not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Loopback mode is not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Loopback mode is not supported"; } } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Loopback mode is not supported"); } } while (
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 147 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 147 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 if (0 &&
     (spi_cfg->operation & (0x3U << 16)) != (0U << 16)) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Only single line mode is supported" "\n", z_log_minimal_level_to_char(1U)); } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ;
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Only single line mode is supported" == 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Only single line mode is supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Only single line mode is supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Only single line mode is supported") + 0))) > (1)) ? (_Generic(("Only single line mode is supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Only single line mode is supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Only single line mode is supported") + 0; (void)__v; size_t __arg_size = _Generic(("Only single line mode is supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Only single line mode is supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Only single line mode is supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Only single line mode is supported") + 0; double _d = _Generic(("Only single line mode is supported") + 0, float : ("Only single line mode is supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Only single line mode is supported") + 0; (void)__v; size_t __arg_size = _Generic(("Only single line mode is supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Only single line mode is supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Only single line mode is supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Only single line mode is supported"; } } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Only single line mode is supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Only single line mode is supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Only single line mode is supported") + 0))) > (1)) ? (_Generic(("Only single line mode is supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Only single line mode is supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Only single line mode is supported") + 0; (void)__v; size_t __arg_size = _Generic(("Only single line mode is supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Only single line mode is supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Only single line mode is supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Only single line mode is supported") + 0; double _d = _Generic(("Only single line mode is supported") + 0, float : ("Only single line mode is supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Only single line mode is supported") + 0; (void)__v; size_t __arg_size = _Generic(("Only single line mode is supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Only single line mode is supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Only single line mode is supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Only single line mode is supported"; } } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Only single line mode is supported"); } } while (
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 if ((((spi_cfg->operation) & (0x3FU << (5U))) >> (5U)) != 8) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Word sizes other than 8 bits are not supported" "\n", z_log_minimal_level_to_char(1U)); } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ;
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Word sizes other than 8 bits are not supported" == 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Word sizes other than 8 bits are not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Word sizes other than 8 bits are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Word sizes other than 8 bits are not supported") + 0))) > (1)) ? (_Generic(("Word sizes other than 8 bits are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Word sizes other than 8 bits are not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Word sizes other than 8 bits are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Word sizes other than 8 bits are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Word sizes other than 8 bits are not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Word sizes other than 8 bits are not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Word sizes other than 8 bits are not supported") + 0; double _d = _Generic(("Word sizes other than 8 bits are not supported") + 0, float : ("Word sizes other than 8 bits are not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Word sizes other than 8 bits are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Word sizes other than 8 bits are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Word sizes other than 8 bits are not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Word sizes other than 8 bits are not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Word sizes other than 8 bits are not supported"; } } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Word sizes other than 8 bits are not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Word sizes other than 8 bits are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Word sizes other than 8 bits are not supported") + 0))) > (1)) ? (_Generic(("Word sizes other than 8 bits are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Word sizes other than 8 bits are not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Word sizes other than 8 bits are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Word sizes other than 8 bits are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Word sizes other than 8 bits are not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Word sizes other than 8 bits are not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Word sizes other than 8 bits are not supported") + 0; double _d = _Generic(("Word sizes other than 8 bits are not supported") + 0, float : ("Word sizes other than 8 bits are not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Word sizes other than 8 bits are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Word sizes other than 8 bits are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Word sizes other than 8 bits are not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Word sizes other than 8 bits are not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Word sizes other than 8 bits are not supported"; } } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Word sizes other than 8 bits are not supported"); } } while (
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 157 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 158 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 158 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 if (spi_cfg->frequency < 125000) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Frequencies lower than 125 kHz are not supported" "\n", z_log_minimal_level_to_char(1U)); } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ;
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Frequencies lower than 125 kHz are not supported" == 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Frequencies lower than 125 kHz are not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Frequencies lower than 125 kHz are not supported") + 0))) > (1)) ? (_Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Frequencies lower than 125 kHz are not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Frequencies lower than 125 kHz are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Frequencies lower than 125 kHz are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Frequencies lower than 125 kHz are not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Frequencies lower than 125 kHz are not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Frequencies lower than 125 kHz are not supported") + 0; double _d = _Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : ("Frequencies lower than 125 kHz are not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Frequencies lower than 125 kHz are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Frequencies lower than 125 kHz are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Frequencies lower than 125 kHz are not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Frequencies lower than 125 kHz are not supported"; } } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Frequencies lower than 125 kHz are not supported") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Frequencies lower than 125 kHz are not supported") + 0))) > (1)) ? (_Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Frequencies lower than 125 kHz are not supported") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Frequencies lower than 125 kHz are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Frequencies lower than 125 kHz are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Frequencies lower than 125 kHz are not supported") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Frequencies lower than 125 kHz are not supported") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Frequencies lower than 125 kHz are not supported") + 0; double _d = _Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : ("Frequencies lower than 125 kHz are not supported") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Frequencies lower than 125 kHz are not supported") + 0; (void)__v; size_t __arg_size = _Generic(("Frequencies lower than 125 kHz are not supported"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Frequencies lower than 125 kHz are not supported") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Frequencies lower than 125 kHz are not supported") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Frequencies lower than 125 kHz are not supported"; } } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Frequencies lower than 125 kHz are not supported"); } } while (
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 162 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 163 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 163 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }
# 177 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 config = dev_config->def_config;


 config.frequency = get_nrf_spim_frequency((((spi_cfg->frequency) < (max_freq)) ? (spi_cfg->frequency) : (max_freq))
                     );
 config.mode = get_nrf_spim_mode(spi_cfg->operation);
 config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);

 nrfy_sck_pin = nrfy_spim_sck_pin_get(dev_config->spim.p_reg);
 if (nrfy_sck_pin >= 0) {
  nrfy_gpio_pin_write(nrfy_sck_pin,
        spi_cfg->operation & (1UL << (1)) ? 1 : 0);
 }

 if (dev_data->initialized) {
  nrfx_spim_uninit(&dev_config->spim);
  dev_data->initialized = 
# 193 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                         0
# 193 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                              ;
 }

 result = nrfx_spim_init(&dev_config->spim, &config,
    event_handler, dev_data);
 if (result != NRFX_SUCCESS) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Failed to initialize nrfx driver: %08x" "\n", z_log_minimal_level_to_char(1U), result); } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; __auto_type _v1 = (result) + 0;
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  do { ; 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 has_rw_str = ({
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Failed to initialize nrfx driver: %08x" == 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { _plen = 0; } else { do {
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ? 0 : 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to initialize nrfx driver: %08x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to initialize nrfx driver: %08x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to initialize nrfx driver: %08x") + 0))) > (1)) ? (_Generic(("Failed to initialize nrfx driver: %08x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to initialize nrfx driver: %08x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to initialize nrfx driver: %08x") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to initialize nrfx driver: %08x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to initialize nrfx driver: %08x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to initialize nrfx driver: %08x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to initialize nrfx driver: %08x") + 0; double _d = _Generic(("Failed to initialize nrfx driver: %08x") + 0, float : ("Failed to initialize nrfx driver: %08x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to initialize nrfx driver: %08x") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to initialize nrfx driver: %08x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to initialize nrfx driver: %08x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to initialize nrfx driver: %08x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to initialize nrfx driver: %08x"; } } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); }
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg *_msg;
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  long long _ll_buf[((((
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((__builtin_object_size(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , __builtin_object_size(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 0)) : __memset_ichk(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 + _plen + (0))
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ))
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); if (_plen != 0) { do {
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _Static_assert(!0 || (0 && !(
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ) 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 _Bool 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 (0x7fffffffL)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 __builtin_offsetof (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 , 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 data
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 )
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 22
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to initialize nrfx driver: %08x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to initialize nrfx driver: %08x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to initialize nrfx driver: %08x") + 0))) > (1)) ? (_Generic(("Failed to initialize nrfx driver: %08x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to initialize nrfx driver: %08x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to initialize nrfx driver: %08x") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to initialize nrfx driver: %08x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to initialize nrfx driver: %08x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to initialize nrfx driver: %08x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to initialize nrfx driver: %08x") + 0; double _d = _Generic(("Failed to initialize nrfx driver: %08x") + 0, float : ("Failed to initialize nrfx driver: %08x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to initialize nrfx driver: %08x") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to initialize nrfx driver: %08x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to initialize nrfx driver: %08x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to initialize nrfx driver: %08x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to initialize nrfx driver: %08x"; } } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 28 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 : _total_len; if (_pbuf != 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 ((void *)0)
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ); (void)_mode; if (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ) { z_log_printf_arg_checker("Failed to initialize nrfx driver: %08x", result); } } while (
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
 0
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 );
  return -
# 200 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         5
# 200 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
            ;
 }

 dev_data->initialized = 
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                        1
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                            ;

 ctx->config = spi_cfg;

 return 0;
}
# 291 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
static void finish_transaction(const struct device *dev, int error)
{
 struct spi_nrfx_data *dev_data = dev->data;
 struct spi_context *ctx = &dev_data->ctx;

 spi_context_cs_control(ctx, 
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                            0
# 296 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                 );

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Transaction finished with status %d" "\n", z_log_minimal_level_to_char(4U), error); } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"

# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (error) + 0;
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 do { ; 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
has_rw_str = ({
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"

# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Transaction finished with status %d" == 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { _plen = 0; } else { do {
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"

# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _Static_assert(!0 || (0 && !(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) ? 0 : 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
(0x7fffffffL)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
22
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
28
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Transaction finished with status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Transaction finished with status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Transaction finished with status %d") + 0))) > (1)) ? (_Generic(("%s: " "Transaction finished with status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Transaction finished with status %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Transaction finished with status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Transaction finished with status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Transaction finished with status %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Transaction finished with status %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Transaction finished with status %d") + 0; double _d = _Generic(("%s: " "Transaction finished with status %d") + 0, float : ("%s: " "Transaction finished with status %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Transaction finished with status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Transaction finished with status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Transaction finished with status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Transaction finished with status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Transaction finished with status %d"; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
28 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
: _total_len; if (_pbuf != 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); }
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"

# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 struct log_msg *_msg;
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 long long _ll_buf[((((
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((__builtin_object_size(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
+ _plen + (0))
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, __builtin_object_size(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 0)) : __memset_ichk(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
+ _plen + (0))
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); if (_plen != 0) { do {
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"

# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 _Static_assert(!0 || (0 && !(
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
) 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
_Bool 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
(0x7fffffffL)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__builtin_offsetof (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct log_msg
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
data
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
22
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
28
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Transaction finished with status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Transaction finished with status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Transaction finished with status %d") + 0))) > (1)) ? (_Generic(("%s: " "Transaction finished with status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Transaction finished with status %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Transaction finished with status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Transaction finished with status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Transaction finished with status %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Transaction finished with status %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Transaction finished with status %d") + 0; double _d = _Generic(("%s: " "Transaction finished with status %d") + 0, float : ("%s: " "Transaction finished with status %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Transaction finished with status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Transaction finished with status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Transaction finished with status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Transaction finished with status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Transaction finished with status %d"; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
28 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
: _total_len; if (_pbuf != 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
 } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
); (void)_mode; if (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
) { z_log_printf_arg_checker("Transaction finished with status %d", error); } } while (
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 298 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
);

 spi_context_complete(ctx, dev, error);
 dev_data->busy = 
# 301 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                 0
# 301 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                      ;
}

static void transfer_next_chunk(const struct device *dev)
{
 struct spi_nrfx_data *dev_data = dev->data;
 const struct spi_nrfx_config *dev_config = dev->config;
 struct spi_context *ctx = &dev_data->ctx;
 int error = 0;

 size_t chunk_len = spi_context_max_continuous_chunk(ctx);

 if (chunk_len > 0) {
  nrfx_spim_xfer_desc_t xfer;
  nrfx_err_t result;
  const uint8_t *tx_buf = ctx->tx_buf;

  if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   if (chunk_len > 8) {
    chunk_len = 8;
   }

   
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((__builtin_object_size(
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  dev_data->buffer
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  dev_data->buffer
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  tx_buf
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  chunk_len
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , __builtin_object_size(
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  dev_data->buffer
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0)) : __memcpy_ichk(
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  dev_data->buffer
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  tx_buf
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  chunk_len
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ))
# 323 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                             ;
   tx_buf = dev_data->buffer;
  }

  if (chunk_len > dev_config->max_chunk_len) {
   chunk_len = dev_config->max_chunk_len;
  }

  dev_data->chunk_len = chunk_len;

  xfer.p_tx_buffer = tx_buf;
  xfer.tx_length = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
  xfer.p_rx_buffer = ctx->rx_buf;
  xfer.rx_length = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  if (error == 0) {
   result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   if (result == NRFX_SUCCESS) {
    return;
   }
   error = -
# 354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
           5
# 354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
              ;



  }
 }

 finish_transaction(dev, error);
}

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context)
{
 struct spi_nrfx_data *dev_data = p_context;

 if (p_event->type == NRFX_SPIM_EVENT_DONE) {



  if (dev_data->chunk_len == 0) {
   finish_transaction(dev_data->dev, -
# 373 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                                     116
# 373 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                              );
   return;
  }




  spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
  spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);

  transfer_next_chunk(dev_data->dev);
 }
}

static int transceive(const struct device *dev,
        const struct spi_config *spi_cfg,
        const struct spi_buf_set *tx_bufs,
        const struct spi_buf_set *rx_bufs,
        
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
       _Bool 
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
            asynchronous,
        spi_callback_t cb,
        void *userdata)
{
 struct spi_nrfx_data *dev_data = dev->data;
 const struct spi_nrfx_config *dev_config = dev->config;
 int error;

 spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);

 error = configure(dev, spi_cfg);
 if (error == 0) {
  dev_data->busy = 
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                  1
# 403 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                      ;

  if (dev_config->wake_pin != 
# 405 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                             (0xffffffffUL)
# 405 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                              ) {
   error = spi_nrfx_wake_request(dev_config->wake_pin);
   if (error == -
# 407 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                116
# 407 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                         ) {
    do { if (!(1 && ((2U <= 0) || ((0 == 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Waiting for WAKE acknowledgment timed out" "\n", z_log_minimal_level_to_char(2U)); } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    ;
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    do { ; 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   has_rw_str = ({
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Waiting for WAKE acknowledgment timed out" == 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { _plen = 0; } else { do {
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    _Static_assert(!0 || (0 && !(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _ros_pos_en = (_flags) & (1UL << (1)); 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _rws_pos_en = (_flags) & (1UL << (2)); 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) ? 0 : 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   (0x7fffffffL)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   )
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   22
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   28
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Waiting for WAKE acknowledgment timed out") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Waiting for WAKE acknowledgment timed out") + 0))) > (1)) ? (_Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Waiting for WAKE acknowledgment timed out") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Waiting for WAKE acknowledgment timed out") + 0; (void)__v; size_t __arg_size = _Generic(("Waiting for WAKE acknowledgment timed out"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Waiting for WAKE acknowledgment timed out") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Waiting for WAKE acknowledgment timed out") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Waiting for WAKE acknowledgment timed out") + 0; double _d = _Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : ("Waiting for WAKE acknowledgment timed out") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Waiting for WAKE acknowledgment timed out") + 0; (void)__v; size_t __arg_size = _Generic(("Waiting for WAKE acknowledgment timed out"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Waiting for WAKE acknowledgment timed out") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Waiting for WAKE acknowledgment timed out"; } } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   28 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   : _total_len; if (_pbuf != 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); }
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    struct log_msg *_msg;
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    long long _ll_buf[((((
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((__builtin_object_size(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 0) != (size_t)-1) ? __builtin___memset_chk(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   + _plen + (0))
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , __builtin_object_size(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 0)) : __memset_ichk(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   + _plen + (0))
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ))
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); if (_plen != 0) { do {
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    _Static_assert(!0 || (0 && !(
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ) 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _ros_pos_en = (_flags) & (1UL << (1)); 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _rws_pos_en = (_flags) & (1UL << (2)); 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   _Bool 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   (0x7fffffffL)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   __builtin_offsetof (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   , 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   data
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   )
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   22
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   28
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Waiting for WAKE acknowledgment timed out") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Waiting for WAKE acknowledgment timed out") + 0))) > (1)) ? (_Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Waiting for WAKE acknowledgment timed out") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Waiting for WAKE acknowledgment timed out") + 0; (void)__v; size_t __arg_size = _Generic(("Waiting for WAKE acknowledgment timed out"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Waiting for WAKE acknowledgment timed out") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Waiting for WAKE acknowledgment timed out") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Waiting for WAKE acknowledgment timed out") + 0; double _d = _Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : ("Waiting for WAKE acknowledgment timed out") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Waiting for WAKE acknowledgment timed out") + 0; (void)__v; size_t __arg_size = _Generic(("Waiting for WAKE acknowledgment timed out"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Waiting for WAKE acknowledgment timed out") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Waiting for WAKE acknowledgment timed out") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Waiting for WAKE acknowledgment timed out"; } } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   28 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   : _total_len; if (_pbuf != 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
    } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   ((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ); (void)_mode; if (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ) { z_log_printf_arg_checker("Waiting for WAKE acknowledgment timed out"); } } while (
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
   0
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   );





   }
  }

  spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
  spi_context_cs_control(&dev_data->ctx, 
# 418 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                                        1
# 418 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                            );

  transfer_next_chunk(dev);

  error = spi_context_wait_for_completion(&dev_data->ctx);
  if (error == -
# 423 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
               116
# 423 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                        ) {




   dev_data->chunk_len = 0;



   nrfx_spim_uninit(&dev_config->spim);
   dev_data->initialized = 
# 433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                          0
# 433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                               ;





   finish_transaction(dev, -
# 439 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                           116
# 439 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                    );


   k_sem_reset(&dev_data->ctx.sync);



  }
 }

 spi_context_release(&dev_data->ctx, error);

 return error;
}

static int spi_nrfx_transceive(const struct device *dev,
          const struct spi_config *spi_cfg,
          const struct spi_buf_set *tx_bufs,
          const struct spi_buf_set *rx_bufs)
{
 return transceive(dev, spi_cfg, tx_bufs, rx_bufs, 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                                                  0
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                                       , 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                                                         ((void *)0)
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                                             , 
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                                                               ((void *)0)
# 459 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                                                   );
}
# 474 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
static int spi_nrfx_release(const struct device *dev,
       const struct spi_config *spi_cfg)
{
 struct spi_nrfx_data *dev_data = dev->data;

 if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
  return -
# 480 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         22
# 480 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 if (dev_data->busy) {
  return -
# 484 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
         16
# 484 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
              ;
 }

 spi_context_unlock_unconditionally(&dev_data->ctx);

 return 0;
}

static const struct spi_driver_api spi_nrfx_driver_api = {
 .transceive = spi_nrfx_transceive,



 .release = spi_nrfx_release,
};


static int spim_nrfx_pm_action(const struct device *dev,
          enum pm_device_action action)
{
 int ret = 0;
 struct spi_nrfx_data *dev_data = dev->data;
 const struct spi_nrfx_config *dev_config = dev->config;

 switch (action) {
 case PM_DEVICE_ACTION_RESUME:
  ret = pinctrl_apply_state(dev_config->pcfg,
       0U);
  if (ret < 0) {
   return ret;
  }



  break;

 case PM_DEVICE_ACTION_SUSPEND:
  if (dev_data->initialized) {
   nrfx_spim_uninit(&dev_config->spim);
   dev_data->initialized = 
# 523 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                          0
# 523 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                               ;
  }

  ret = pinctrl_apply_state(dev_config->pcfg,
       1U);
  if (ret < 0) {
   return ret;
  }
  break;

 default:
  ret = -
# 534 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
        134
# 534 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
               ;
 }

 return ret;
}



static int spi_nrfx_init(const struct device *dev)
{
 const struct spi_nrfx_config *dev_config = dev->config;
 struct spi_nrfx_data *dev_data = dev->data;
 int err;

 err = pinctrl_apply_state(dev_config->pcfg, 0U);
 if (err < 0) {
  return err;
 }

 if (dev_config->wake_pin != 
# 553 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
                            (0xffffffffUL)
# 553 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                                             ) {
  err = spi_nrfx_wake_init(dev_config->wake_pin);
  if (err == -
# 555 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
             19
# 555 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                   ) {
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Failed to allocate GPIOTE channel for WAKE" "\n", z_log_minimal_level_to_char(1U)); } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ;
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   do { ; 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  has_rw_str = ({
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Failed to allocate GPIOTE channel for WAKE" == 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { _plen = 0; } else { do {
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _Static_assert(!0 || (0 && !(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) ? 0 : 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  (0x7fffffffL)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  )
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  22
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to allocate GPIOTE channel for WAKE") + 0))) > (1)) ? (_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to allocate GPIOTE channel for WAKE") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to allocate GPIOTE channel for WAKE") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to allocate GPIOTE channel for WAKE"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to allocate GPIOTE channel for WAKE") + 0; double _d = _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : ("Failed to allocate GPIOTE channel for WAKE") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to allocate GPIOTE channel for WAKE") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to allocate GPIOTE channel for WAKE"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to allocate GPIOTE channel for WAKE"; } } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  : _total_len; if (_pbuf != 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); }
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg *_msg;
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   long long _ll_buf[((((
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((__builtin_object_size(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , __builtin_object_size(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0)) : __memset_ichk(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ))
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); if (_plen != 0) { do {
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _Static_assert(!0 || (0 && !(
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  (0x7fffffffL)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  )
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  22
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to allocate GPIOTE channel for WAKE") + 0))) > (1)) ? (_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to allocate GPIOTE channel for WAKE") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to allocate GPIOTE channel for WAKE") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to allocate GPIOTE channel for WAKE"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to allocate GPIOTE channel for WAKE") + 0; double _d = _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : ("Failed to allocate GPIOTE channel for WAKE") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to allocate GPIOTE channel for WAKE") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to allocate GPIOTE channel for WAKE"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to allocate GPIOTE channel for WAKE") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to allocate GPIOTE channel for WAKE"; } } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  : _total_len; if (_pbuf != 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); (void)_mode; if (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { z_log_printf_arg_checker("Failed to allocate GPIOTE channel for WAKE"); } } while (
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 556 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  );
   return err;
  }
  if (err == -
# 559 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
             5
# 559 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
                ) {
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Failed to configure WAKE pin" "\n", z_log_minimal_level_to_char(1U)); } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   ;
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   do { ; 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  has_rw_str = ({
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Failed to configure WAKE pin" == 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { _plen = 0; } else { do {
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _Static_assert(!0 || (0 && !(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) ? 0 : 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  (0x7fffffffL)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  )
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  22
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to configure WAKE pin") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to configure WAKE pin") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to configure WAKE pin") + 0))) > (1)) ? (_Generic(("Failed to configure WAKE pin") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to configure WAKE pin") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to configure WAKE pin") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to configure WAKE pin"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to configure WAKE pin") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to configure WAKE pin") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to configure WAKE pin") + 0; double _d = _Generic(("Failed to configure WAKE pin") + 0, float : ("Failed to configure WAKE pin") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to configure WAKE pin") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to configure WAKE pin"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to configure WAKE pin") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to configure WAKE pin") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to configure WAKE pin"; } } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  : _total_len; if (_pbuf != 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); }
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   struct log_msg *_msg;
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   long long _ll_buf[((((
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((__builtin_object_size(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , __builtin_object_size(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 0)) : __memset_ichk(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  + _plen + (0))
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ))
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); if (_plen != 0) { do {
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic push
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   _Static_assert(!0 || (0 && !(
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ) 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  _Bool 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  (0x7fffffffL)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  __builtin_offsetof (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  struct log_msg
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  , 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  data
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  )
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  22
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Failed to configure WAKE pin") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Failed to configure WAKE pin") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to configure WAKE pin") + 0))) > (1)) ? (_Generic(("Failed to configure WAKE pin") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Failed to configure WAKE pin") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Failed to configure WAKE pin") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to configure WAKE pin"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Failed to configure WAKE pin") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Failed to configure WAKE pin") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Failed to configure WAKE pin") + 0; double _d = _Generic(("Failed to configure WAKE pin") + 0, float : ("Failed to configure WAKE pin") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Failed to configure WAKE pin") + 0; (void)__v; size_t __arg_size = _Generic(("Failed to configure WAKE pin"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Failed to configure WAKE pin") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Failed to configure WAKE pin") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Failed to configure WAKE pin"; } } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  28 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  : _total_len; if (_pbuf != 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
#pragma GCC diagnostic pop
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
   } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ); (void)_mode; if (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  ) { z_log_printf_arg_checker("Failed to configure WAKE pin"); } } while (
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
  0
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
  );
   return err;
  }
 }

 dev_config->irq_connect();

 err = spi_context_cs_configure_all(&dev_data->ctx);
 if (err < 0) {
  return err;
 }

 spi_context_unlock_unconditionally(&dev_data->ctx);




 return 0;

}
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
_Static_assert(!1 || 1, "" "/soc/spi@40003000" " defined without sleep state"); static void irq_connect0(void) { { _Static_assert(0 || !(0 & (1UL << (0))), "" "ZLI interrupt registered but feature is disabled"); _Static_assert(((0 & (1UL << (0))) && ((1 == 1) || (1 < 1))) || (1 <= ((1UL << (3)) - ((1 + 0)) - 1)), "" "Invalid interrupt priority. Values must not exceed IRQ_PRIO_LOWEST"); static 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct _isr_list)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct _isr_list __attribute__((section(".intList"))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__isr_nrfx_isr_irq_0 = {3, 0, (void *)&nrfx_isr, (const void *)nrfx_spim_0_irq_handler}; z_arm_irq_priority_set(3, 1, 0); }; } static uint8_t spim_0_buffer [8] ; static struct spi_nrfx_data spi_0_data = { .ctx.lock = { .wait_q = { { {(&(&spi_0_data.ctx.lock.wait_q)->waitq)}, {(&(&spi_0_data.ctx.lock.wait_q)->waitq)} } }, .count = 0, .limit = 1, .poll_events = { {(&spi_0_data.ctx.lock.poll_events)}, {(&spi_0_data.ctx.lock.poll_events)} }, }, .ctx.sync = { .wait_q = { { {(&(&spi_0_data.ctx.sync.wait_q)->waitq)}, {(&(&spi_0_data.ctx.sync.wait_q)->waitq)} } }, .count = 0, .limit = 1, .poll_events = { {(&spi_0_data.ctx.sync.poll_events)}, {(&spi_0_data.ctx.sync.poll_events)} }, }, .ctx.cs_gpios = (const struct gpio_dt_spec []) { { .port = (&__device_dts_ord_15), .pin = 29, .dt_flags = 1, }, { .port = (&__device_dts_ord_19), .pin = 11, .dt_flags = 1, }, }, .ctx.num_cs_gpios = 2, .buffer = spim_0_buffer, .dev = (&__device_dts_ord_21), .busy = 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; static const pinctrl_soc_pin_t __pinctrl_state_pins_0__device_dts_ord_21[] = {(262149 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ), (327684 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ), (393220 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ),} ; static const pinctrl_soc_pin_t __pinctrl_state_pins_1__device_dts_ord_21[] = {(262149 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ), (327684 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ), (393220 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ),}; static const struct pinctrl_state __pinctrl_states__device_dts_ord_21[] = { { .id = 0U, .pins = __pinctrl_state_pins_0__device_dts_ord_21, .pin_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_state_pins_0__device_dts_ord_21), __typeof__(&(__pinctrl_state_pins_0__device_dts_ord_21)[0])))]) - 1) + (sizeof(__pinctrl_state_pins_0__device_dts_ord_21) / sizeof((__pinctrl_state_pins_0__device_dts_ord_21)[0])))) } , { .id = 1U, .pins = __pinctrl_state_pins_1__device_dts_ord_21, .pin_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_state_pins_1__device_dts_ord_21), __typeof__(&(__pinctrl_state_pins_1__device_dts_ord_21)[0])))]) - 1) + (sizeof(__pinctrl_state_pins_1__device_dts_ord_21) / sizeof((__pinctrl_state_pins_1__device_dts_ord_21)[0])))) } }; struct pinctrl_dev_config __pinctrl_dev_config__device_dts_ord_21 = { .reg = 1073754112, .states = __pinctrl_states__device_dts_ord_21, .state_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_states__device_dts_ord_21), __typeof__(&(__pinctrl_states__device_dts_ord_21)[0])))]) - 1) + (sizeof(__pinctrl_states__device_dts_ord_21) / sizeof((__pinctrl_states__device_dts_ord_21)[0])))), }; static const struct spi_nrfx_config spi_0z_config = { .spim = { .p_reg = (NRF_SPIM_Type *)1073754112, .drv_inst_idx = NRFX_SPIM0_INST_IDX, }, .max_freq = 8000000, .def_config = { .skip_gpio_cfg = 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
1
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, .skip_psel_cfg = 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
1
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, .ss_pin = 0xFFFFFFFF, .orc = 255, .dcx_pin = 0xFFFFFFFF, }, .irq_connect = irq_connect0, .pcfg = &__pinctrl_dev_config__device_dts_ord_21, .max_chunk_len = ((1UL << (16)) - 1UL), .wake_pin = 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
(0xffffffffUL)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; _Static_assert(!0 || !(0 & (1 << 0)), "" "WAKE line must be configured as active high"); static const 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device __pm_slot_dts_ord_21 __attribute__((section("." "_pm_device_slots" "." "static" "." "__pm_slot_dts_ord_21_"))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; static struct pm_device __pm_device_dts_ord_21 = { .action_cb = spim_nrfx_pm_action, .state = PM_DEVICE_STATE_ACTIVE, .flags = (((0 << PM_DEVICE_FLAG_WS_CAPABLE) | (0 << PM_DEVICE_FLAG_RUNTIME_AUTO) | (0 << PM_DEVICE_FLAG_PD))), .domain = 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; static 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device_state)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device_state __devstate_dts_ord_21 __attribute__((__section__(".z_devstate"))); _Static_assert(sizeof("\"spi@40003000\"") <= 48U, "" "DEVICE_NAME_GET(\"spi@40003000\")" " too long"); const 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device __device_dts_ord_21 __attribute__((section("." "_device" "." "static" "." "3_70_"))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= { .name = "spi@40003000", .config = (&spi_0z_config), .api = (&spi_nrfx_driver_api), .state = (&__devstate_dts_ord_21), .data = (&spi_0_data), .pm = ((&__pm_device_dts_ord_21)), }; static const 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct init_entry)
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct init_entry 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 661 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__attribute__((__section__( ".z_init_" "POST_KERNEL" "70""_" "00021""_"))) __init___device_dts_ord_21 = { .init_fn = {.dev = (spi_nrfx_init)}, .dev = &__device_dts_ord_21, };







_Static_assert(!1 || 1, "" "/soc/spi@40023000" " defined without sleep state"); static void irq_connect2(void) { { _Static_assert(0 || !(0 & (1UL << (0))), "" "ZLI interrupt registered but feature is disabled"); _Static_assert(((0 & (1UL << (0))) && ((1 == 1) || (1 < 1))) || (1 <= ((1UL << (3)) - ((1 + 0)) - 1)), "" "Invalid interrupt priority. Values must not exceed IRQ_PRIO_LOWEST"); static 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct _isr_list)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct _isr_list __attribute__((section(".intList"))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__isr_nrfx_isr_irq_1 = {35, 0, (void *)&nrfx_isr, (const void *)nrfx_spim_2_irq_handler}; z_arm_irq_priority_set(35, 1, 0); }; } static uint8_t spim_2_buffer [8] ; static struct spi_nrfx_data spi_2_data = { .ctx.lock = { .wait_q = { { {(&(&spi_2_data.ctx.lock.wait_q)->waitq)}, {(&(&spi_2_data.ctx.lock.wait_q)->waitq)} } }, .count = 0, .limit = 1, .poll_events = { {(&spi_2_data.ctx.lock.poll_events)}, {(&spi_2_data.ctx.lock.poll_events)} }, }, .ctx.sync = { .wait_q = { { {(&(&spi_2_data.ctx.sync.wait_q)->waitq)}, {(&(&spi_2_data.ctx.sync.wait_q)->waitq)} } }, .count = 0, .limit = 1, .poll_events = { {(&spi_2_data.ctx.sync.poll_events)}, {(&spi_2_data.ctx.sync.poll_events)} }, }, .ctx.cs_gpios = (const struct gpio_dt_spec []) { { .port = (&__device_dts_ord_19), .pin = 15, .dt_flags = 1, }, }, .ctx.num_cs_gpios = 1, .buffer = spim_2_buffer, .dev = (&__device_dts_ord_36), .busy = 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
0
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; static const pinctrl_soc_pin_t __pinctrl_state_pins_0__device_dts_ord_36[] = {(262149 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ), (327684 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ), (393244 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 0) << 13U) | (0 << 14U) ),} ; static const pinctrl_soc_pin_t __pinctrl_state_pins_1__device_dts_ord_36[] = {(262149 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ), (327684 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ), (393244 | ((1U * 0) << 7U) | ((3U * 0) << 7U) | (0 << 9U) | ((1U * 1) << 13U) | (0 << 14U) ),}; static const struct pinctrl_state __pinctrl_states__device_dts_ord_36[] = { { .id = 0U, .pins = __pinctrl_state_pins_0__device_dts_ord_36, .pin_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_state_pins_0__device_dts_ord_36), __typeof__(&(__pinctrl_state_pins_0__device_dts_ord_36)[0])))]) - 1) + (sizeof(__pinctrl_state_pins_0__device_dts_ord_36) / sizeof((__pinctrl_state_pins_0__device_dts_ord_36)[0])))) } , { .id = 1U, .pins = __pinctrl_state_pins_1__device_dts_ord_36, .pin_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_state_pins_1__device_dts_ord_36), __typeof__(&(__pinctrl_state_pins_1__device_dts_ord_36)[0])))]) - 1) + (sizeof(__pinctrl_state_pins_1__device_dts_ord_36) / sizeof((__pinctrl_state_pins_1__device_dts_ord_36)[0])))) } }; struct pinctrl_dev_config __pinctrl_dev_config__device_dts_ord_36 = { .reg = 1073885184, .states = __pinctrl_states__device_dts_ord_36, .state_cnt = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(__pinctrl_states__device_dts_ord_36), __typeof__(&(__pinctrl_states__device_dts_ord_36)[0])))]) - 1) + (sizeof(__pinctrl_states__device_dts_ord_36) / sizeof((__pinctrl_states__device_dts_ord_36)[0])))), }; static const struct spi_nrfx_config spi_2z_config = { .spim = { .p_reg = (NRF_SPIM_Type *)1073885184, .drv_inst_idx = NRFX_SPIM2_INST_IDX, }, .max_freq = 8000000, .def_config = { .skip_gpio_cfg = 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
1
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, .skip_psel_cfg = 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
1
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, .ss_pin = 0xFFFFFFFF, .orc = 255, .dcx_pin = 0xFFFFFFFF, }, .irq_connect = irq_connect2, .pcfg = &__pinctrl_dev_config__device_dts_ord_36, .max_chunk_len = ((1UL << (16)) - 1UL), .wake_pin = 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
(0xffffffffUL)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; _Static_assert(!0 || !(0 & (1 << 0)), "" "WAKE line must be configured as active high"); static const 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device __pm_slot_dts_ord_36 __attribute__((section("." "_pm_device_slots" "." "static" "." "__pm_slot_dts_ord_36_"))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
; static struct pm_device __pm_device_dts_ord_36 = { .action_cb = spim_nrfx_pm_action, .state = PM_DEVICE_STATE_ACTIVE, .flags = (((0 << PM_DEVICE_FLAG_WS_CAPABLE) | (0 << PM_DEVICE_FLAG_RUNTIME_AUTO) | (0 << PM_DEVICE_FLAG_PD))), .domain = 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
((void *)0)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
, }; static 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device_state)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device_state __devstate_dts_ord_36 __attribute__((__section__(".z_devstate"))); _Static_assert(sizeof("\"spi@40023000\"") <= 48U, "" "DEVICE_NAME_GET(\"spi@40023000\")" " too long"); const 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct device)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct device __device_dts_ord_36 __attribute__((section("." "_device" "." "static" "." "3_70_"))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
= { .name = "spi@40023000", .config = (&spi_2z_config), .api = (&spi_nrfx_driver_api), .state = (&__devstate_dts_ord_36), .data = (&spi_2_data), .pm = ((&__pm_device_dts_ord_36)), }; static const 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__aligned__(
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__alignof(struct init_entry)
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
))) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
struct init_entry 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c" 3 4
__attribute__((__used__)) 
# 669 "/home/g/mise-work/zmk-firmware/zmk/zephyr/drivers/spi/spi_nrfx_spim.c"
__attribute__((__section__( ".z_init_" "POST_KERNEL" "70""_" "00036""_"))) __init___device_dts_ord_36 = { .init_fn = {.dev = (spi_nrfx_init)}, .dev = &__device_dts_ord_36, };
