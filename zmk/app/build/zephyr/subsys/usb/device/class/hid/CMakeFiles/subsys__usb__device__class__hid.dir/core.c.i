# 0 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/autoconf.h" 1
# 0 "<command-line>" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/zephyr_stdint.h" 1
# 0 "<command-line>" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 145 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4

# 145 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 214 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 329 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 1 3 4
# 12 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 1 3 4







# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 1 3 4
# 28 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/picolibc.h" 1 3 4





       
# 29 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/features.h" 2 3 4
# 9 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 2 3 4
# 41 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       int 
# 77 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                      __int32_t;

typedef 
# 79 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned int 
# 79 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __uint32_t;
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long long int 
# 103 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                      __int64_t;

typedef 
# 105 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned long long int 
# 105 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __uint64_t;
# 134 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       int 
# 182 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                            __int_least32_t;

typedef 
# 184 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned int 
# 184 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                             __uint_least32_t;
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef 
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long long int 
# 200 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                            __int_least64_t;

typedef 
# 202 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       unsigned long long int 
# 202 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                             __uint_least64_t;
# 214 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef 
# 230 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long int 
# 230 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                       __intptr_t;

typedef 
# 232 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h"
       long unsigned int 
# 232 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/_default_types.h" 3 4
                        __uintptr_t;
# 13 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 190 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 14 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_stdint.h" 1 3 4
# 20 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 15 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef 
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         int 
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                             int_fast32_t;
  typedef 
# 72 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         unsigned int 
# 72 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                              uint_fast32_t;
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
  typedef 
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         long long int 
# 81 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                             int_fast64_t;
  typedef 
# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h"
         unsigned long long int 
# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdint.h" 3 4
                              uint_fast64_t;
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h" 2
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"

# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/types.h"
typedef union {
 long long thelonglong;
 long double thelongdouble;
 uintmax_t theuintmax_t;
 size_t thesize_t;
 uintptr_t theuintptr_t;
 void *thepvoid;
 void (*thepfunc)(void);
} z_max_align_t;
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/iterable_sections.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/iterable_sections.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdbool.h" 1 3 4
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h" 1
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h" 1
# 98 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/common.h" 1
# 99 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain/gcc.h" 2
# 51 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/toolchain.h" 2
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h" 2
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/__assert.h"
void __attribute__((format (printf, 1, 2))) assert_print(const char *fmt, ...);
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/iterable_sections.h" 2
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h" 2






struct log_source_const_data {
 const char *name;
 uint8_t level;







};


struct log_source_dynamic_data {
 uint32_t filters;
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_instance.h"
};
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 44 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 1 3 4
# 32 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/ieeefp.h" 1 3 4
# 33 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/float.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 36 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/config.h" 2 3 4
# 45 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/_ansi.h" 2 3 4
# 44 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 1 3 4
# 47 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 48 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/cdefs.h" 2 3 4
# 45 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4




# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 50 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 1 3 4






# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 8 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 2 3 4



# 10 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/_locale.h" 3 4
struct __locale_t;
typedef struct __locale_t *locale_t;
# 53 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4








void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *restrict, const void *restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);






void * memccpy (void *restrict, const void *restrict, int, size_t);
# 108 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);






void free (void *) __attribute__ ((__nothrow__));
char *strdup (const char *) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__));


char *strndup (const char *, size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__));
# 131 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (int, int, int *);






size_t strnlen (const char *, size_t);
# 165 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
char *strsignal (int __signo);
# 210 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/string.h" 1 3 4
# 211 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4




# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 1 3 4
# 35 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/ssp.h" 1 3 4
# 71 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/ssp.h" 3 4

void __stack_chk_fail(void) __attribute__((__noreturn__));
void __chk_fail(void) __attribute__((__noreturn__));
void set_fortify_handler (void (*handler) (int sig));

# 36 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 2 3 4


void *__memcpy_chk(void *, const void *, size_t, size_t);
void *__memmove_chk(void *, const void *, size_t, size_t);
void *__mempcpy_chk(void *, const void *, size_t, size_t);
void *__memset_chk(void *, int, size_t, size_t);
char *__stpcpy_chk(char *, const char *, size_t);
char *__strcat_chk(char *, const char *, size_t);
char *__strcpy_chk(char *, const char *, size_t);
char *__strncat_chk(char *, const char *, size_t, size_t);
char *__strncpy_chk(char *, const char *, size_t, size_t);

# 82 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/string.h" 3 4

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___memcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void *, const void *, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void * dst, const void * src, size_t len) { return __builtin___memmove_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___mempcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void *, int, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void * dst, int src, size_t len) { return __builtin___memset_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___stpcpy_chk(dst, src, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___stpncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcpy_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcat_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncat_chk(dst, src, len, __builtin_object_size(dst, 0)); }

# 216 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/string.h" 2 3 4
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h" 2
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h"

# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mpsc_packet.h"
struct mpsc_pbuf_hdr {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t data: 32 - 2;
};


struct mpsc_pbuf_skip {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t len: 32 - 2;
};


union mpsc_pbuf_generic {
 struct mpsc_pbuf_hdr hdr;
 struct mpsc_pbuf_skip skip;
 uint32_t raw;
};
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 1 3 4
# 40 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4

# 40 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 45 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"

# 45 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
struct cbprintf_package_desc {

 uint8_t len;


 uint8_t str_cnt;


 uint8_t ro_str_cnt;


 uint8_t rw_str_cnt;
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
} 
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 72 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;





union cbprintf_package_hdr {

 struct cbprintf_package_desc desc;

 void *raw;





} 
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;







struct cbprintf_package_hdr_ext {

 union cbprintf_package_hdr hdr;


 char *fmt;





} 
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
 __attribute__((__packed__))
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
         ;
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 1 3 4
# 38 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 3 4

# 38 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 3 4
typedef int error_t;



# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 3 4
extern const char * const _sys_errlist[];
extern int _sys_nerr;
# 62 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/errno.h" 3 4
extern __thread int errno;
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/errno.h" 2 3 4
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h" 1
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h" 1
# 1083 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_listify.h" 1
# 1084 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_loops.h" 2
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_is_eq.h" 1
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 184 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_inc.h" 1
# 185 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_dec.h" 1
# 188 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal_util_x2.h" 1
# 191 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_internal.h" 2
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util_macro.h" 2
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"

# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 3 4
             _Bool 
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
                  is_power_of_two(unsigned int x)
{
 return (((x) != 0U) && (((x) & ((x) - 1U)) == 0U));
}
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline int64_t arithmetic_shift_right(int64_t value, uint8_t shift)
{
 int64_t sign_ext;

 if (shift == 0U) {
  return value;
 }


 sign_ext = (value >> 63) & 1;


 sign_ext = -sign_ext;


 return (value >> shift) | (sign_ext << (64 - shift));
}
# 418 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline void bytecpy(void *dst, const void *src, size_t size)
{
 size_t i;

 for (i = 0; i < size; ++i) {
  ((volatile uint8_t *)dst)[i] = ((volatile const uint8_t *)src)[i];
 }
}
# 437 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline void byteswp(void *a, void *b, size_t size)
{
 uint8_t t;
 uint8_t *aa = (uint8_t *)a;
 uint8_t *bb = (uint8_t *)b;

 for (; size > 0; --size) {
  t = *aa;
  *aa++ = *bb;
  *bb++ = t;
 }
}
# 458 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
int char2hex(char c, uint8_t *x);
# 468 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
int hex2char(uint8_t x, char *c);
# 480 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen);
# 492 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen);
# 501 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline uint8_t bcd2bin(uint8_t bcd)
{
 return ((10 * (bcd >> 4)) + (bcd & 0x0F));
}
# 513 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
static inline uint8_t bin2bcd(uint8_t bin)
{
 return (((bin / 10) << 4) | (bin % 10));
}
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value);
# 557 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
char *utf8_trunc(char *utf8_str);
# 573 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
char *utf8_lcpy(char *dst, const char *src, size_t n);
# 640 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h" 1
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/time_units.h" 2
# 641 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/util.h" 2
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 1
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 1
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h"
typedef void (*irq_offload_routine_t)(const void *parameter);
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq_offload.h"
void irq_offload(irq_offload_routine_t routine, const void *parameter);
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2






struct k_thread;
struct k_mem_domain;

typedef struct z_thread_stack_element k_thread_stack_t;

typedef void (*k_thread_entry_t)(void *p1, void *p2, void *p3);
# 68 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline uint32_t arch_k_cycle_get_32(void);
# 82 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline uint64_t arch_k_cycle_get_64(void);
# 183 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_cpu_idle(void);
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_cpu_atomic_idle(unsigned int key);
# 218 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
typedef __attribute__((__noreturn__)) void (*arch_cpustart_t)(void *data);
# 240 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_start_cpu(int cpu_num, k_thread_stack_t *stack, int sz,
      arch_cpustart_t fn, void *arg);







# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
_Bool 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
    arch_cpu_active(int cpu_num);
# 263 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline unsigned int arch_irq_lock(void);






static inline void arch_irq_unlock(unsigned int key);
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline 
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
             _Bool 
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
                  arch_irq_unlocked(unsigned int key);
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_irq_disable(unsigned int irq);






void arch_irq_enable(unsigned int irq);






int arch_irq_is_enabled(unsigned int irq);
# 322 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
        void (*routine)(const void *parameter),
        const void *parameter, uint32_t flags);
# 340 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
int arch_irq_disconnect_dynamic(unsigned int irq, unsigned int priority,
    void (*routine)(const void *parameter),
    const void *parameter, uint32_t flags);
# 398 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
unsigned int arch_irq_allocate(void);
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_irq_set_used(unsigned int irq);
# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"

# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
_Bool 
# 417 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
    arch_irq_is_used(unsigned int irq);
# 507 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline unsigned int arch_num_cpus(void);
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline 
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
             _Bool 
# 866 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
                  arch_mem_coherent(void *ptr)
{
 (void)(ptr);
 return 
# 869 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 3 4
       1
# 869 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
           ;
}
# 914 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
static inline void arch_cohere_stacks(struct k_thread *old_thread,
          void *old_switch_handle,
          struct k_thread *new_thread)
{
 (void)(old_thread);
 (void)(old_switch_handle);
 (void)(new_thread);
}
# 1221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h"
void arch_spin_relax(void);





# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch_inlines.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch_inlines.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 1
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 2
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
typedef long atomic_t;
typedef atomic_t atomic_val_t;
typedef void *atomic_ptr_t;
typedef atomic_ptr_t atomic_ptr_val_t;
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 1
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline 
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
             _Bool 
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                  atomic_cas(atomic_t *target, atomic_val_t old_value,
     atomic_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline 
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
             _Bool 
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                  atomic_ptr_cas(atomic_ptr_t *target, atomic_ptr_val_t old_value,
      atomic_ptr_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_add(target, value, 5);
}
# 105 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_sub(target, value, 5);
}
# 123 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_inc(atomic_t *target)
{
 return atomic_add(target, 1);
}
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_dec(atomic_t *target)
{
 return atomic_sub(target, 1);
}
# 159 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_get(const atomic_t *target)
{
 return __atomic_load_n(target, 5);
}
# 177 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_get(const atomic_ptr_t *target)
{
 return __atomic_load_n(target, 5);
}
# 197 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{




 return __atomic_exchange_n(target, value, 5);
}
# 221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
 return __atomic_exchange_n(target, value, 5);
}
# 240 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_clear(atomic_t *target)
{
 return atomic_set(target, 0);
}
# 259 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_clear(atomic_ptr_t *target)
{
 return atomic_ptr_set(target, 
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h" 3 4
                              ((void *)0)
# 261 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
                                  );
}
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_or(target, value, 5);
}
# 299 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_xor(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_xor(target, value, 5);
}
# 319 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_and(target, value, 5);
}
# 339 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic_builtin.h"
static inline atomic_val_t atomic_nand(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_nand(target, value, 5);
}
# 44 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 2
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 131 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_bit(const atomic_t *target, int bit)
{
 atomic_val_t val = atomic_get(((target) + ((bit) / (sizeof(atomic_val_t) * 8))));

 return (1 & (val >> (bit & ((sizeof(atomic_val_t) * 8) - 1)))) != 0;
}
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_and_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);

 return (old & mask) != 0;
}
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
             _Bool 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                  atomic_test_and_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);

 return (old & mask) != 0;
}
# 198 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
}
# 217 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
}
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
static inline void atomic_set_bit_to(atomic_t *target, int bit, 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h" 3 4
                                                               _Bool 
# 237 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/atomic.h"
                                                                    val)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 if (val) {
  (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
 } else {
  (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
 }
}
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 1
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 2
# 37 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
struct _dnode {
 union {
  struct _dnode *head;
  struct _dnode *next;
 };
 union {
  struct _dnode *tail;
  struct _dnode *prev;
 };
};




typedef struct _dnode sys_dlist_t;



typedef struct _dnode sys_dnode_t;
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_init(sys_dlist_t *list)
{
 list->head = (sys_dnode_t *)list;
 list->tail = (sys_dnode_t *)list;
}
# 220 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dnode_init(sys_dnode_t *node)
{
 node->next = 
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             ((void *)0)
# 222 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                 ;
 node->prev = 
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             ((void *)0)
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                 ;
}
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 234 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dnode_is_linked(const sys_dnode_t *node)
{
 return node->next != 
# 236 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                     ((void *)0)
# 236 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                         ;
}
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_head(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->head == node;
}
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 262 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->tail == node;
}
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 275 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_is_empty(sys_dlist_t *list)
{
 return list->head == list;
}
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline 
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
             _Bool 
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                  sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
 return list->head != list->tail;
}
# 303 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                  ((void *)0) 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                       : list->head;
}
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
 return list->head;
}
# 334 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->tail) ? 
# 337 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                              ((void *)0) 
# 337 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                   : node->next;
}
# 350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) ? sys_dlist_peek_next_no_check(list, node) : 
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                                                       ;
}
# 368 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->head) ? 
# 371 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                              ((void *)0) 
# 371 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                   : node->prev;
}
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) ? sys_dlist_peek_prev_no_check(list, node) : 
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 388 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                                                       ;
}
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_tail(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 401 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                                  ((void *)0) 
# 401 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                                       : list->tail;
}
# 413 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const tail = list->tail;

 node->next = list;
 node->prev = tail;

 tail->next = node;
 list->tail = node;
}
# 433 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const head = list->head;

 node->next = head;
 node->prev = list;

 head->prev = node;
 list->head = node;
}
# 452 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
 sys_dnode_t *const prev = successor->prev;

 node->prev = prev;
 node->next = successor;
 prev->next = node;
 successor->prev = node;
}
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
 int (*cond)(sys_dnode_t *node, void *data), void *data)
{
 if (sys_dlist_is_empty(list)) {
  sys_dlist_append(list, node);
 } else {
  sys_dnode_t *pos = sys_dlist_peek_head(list);

  while ((pos != 
# 485 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                ((void *)0)
# 485 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                    ) && (cond(pos, data) == 0)) {
   pos = sys_dlist_peek_next(list, pos);
  }
  if (pos != 
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
            ((void *)0)
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                ) {
   sys_dlist_insert(pos, node);
  } else {
   sys_dlist_append(list, node);
  }
 }
}
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline void sys_dlist_remove(sys_dnode_t *node)
{
 sys_dnode_t *const prev = node->prev;
 sys_dnode_t *const next = node->next;

 prev->next = next;
 next->prev = prev;
 sys_dnode_init(node);
}
# 525 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
 sys_dnode_t *node = 
# 527 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                    ((void *)0)
# 527 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                        ;

 if (!sys_dlist_is_empty(list)) {
  node = list->head;
  sys_dlist_remove(node);
 }

 return node;
}
# 544 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
static inline size_t sys_dlist_len(sys_dlist_t *list)
{
 size_t len = 0;
 sys_dnode_t *node = 
# 547 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
                    ((void *)0)
# 547 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
                        ;

 for (node = sys_dlist_peek_head(list); node != 
# 549 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h" 3 4
((void *)0)
# 549 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/dlist.h"
; node = sys_dlist_peek_next(list, node)) {
  len++;
 }
 return len;
}
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 1
# 58 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
struct rbnode {

 struct rbnode *children[2];

};
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
typedef 
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 3 4
       _Bool 
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
            (*rb_lessthan_t)(struct rbnode *a, struct rbnode *b);




struct rbtree {

 struct rbnode *root;

 rb_lessthan_t lessthan_fn;

 int max_depth;





};






typedef void (*rb_visit_t)(struct rbnode *node, void *cookie);

struct rbnode *z_rb_child(struct rbnode *node, uint8_t side);
int z_rb_is_black(struct rbnode *node);

void z_rb_walk(struct rbnode *node, rb_visit_t visit_fn, void *cookie);

struct rbnode *z_rb_get_minmax(struct rbtree *tree, uint8_t side);




void rb_insert(struct rbtree *tree, struct rbnode *node);




void rb_remove(struct rbtree *tree, struct rbnode *node);




static inline struct rbnode *rb_get_min(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 0U);
}




static inline struct rbnode *rb_get_max(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 1U);
}
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"

# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h" 3 4
_Bool 
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
    rb_contains(struct rbtree *tree, struct rbnode *node);
# 165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
static inline void rb_walk(struct rbtree *tree, rb_visit_t visit_fn,
      void *cookie)
{
 z_rb_walk(tree->root, visit_fn, cookie);
}


struct _rb_foreach {
 struct rbnode **stack;
 uint8_t *is_left;
 int32_t top;
};
# 193 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/rb.h"
struct rbnode *z_rb_foreach_next(struct rbtree *tree, struct _rb_foreach *f);
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h" 2
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
struct k_thread;

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq);
void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread);

struct _priq_rb {
 struct rbtree tree;
 int next_order_key;
};

void z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread);
void z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread);
struct k_thread *z_priq_rb_best(struct _priq_rb *pq);
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/internal/sched_priq.h"
struct _priq_mq {
 sys_dlist_t queues[32];
 unsigned int bitmask;
};

struct k_thread *z_priq_mq_best(struct _priq_mq *pq);
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 1
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_stats.h" 2



struct sys_memory_stats {
 size_t free_bytes;
 size_t allocated_bytes;
 size_t max_allocated_bytes;
};
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 2
# 56 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
struct sys_heap {
 struct z_heap *heap;
 void *init_mem;
 size_t init_bytes;
};

struct z_heap_stress_result {
 uint32_t total_allocs;
 uint32_t successful_allocs;
 uint32_t total_frees;
 uint64_t accumulated_in_use_bytes;
};
# 102 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes);
# 121 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_alloc(struct sys_heap *heap, size_t bytes);
# 136 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes);
# 151 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_free(struct sys_heap *heap, void *mem);
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void *sys_heap_aligned_realloc(struct sys_heap *heap, void *ptr,
          size_t align, size_t bytes);
# 196 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
size_t sys_heap_usable_size(struct sys_heap *heap, void *mem);
# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"

# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 3 4
_Bool 
# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
    sys_heap_validate(struct sys_heap *heap);
# 242 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_stress(void *(*alloc_fn)(void *arg, size_t bytes),
       void (*free_fn)(void *arg, void *p),
       void *arg, size_t total_bytes,
       uint32_t op_count,
       void *scratch_mem, size_t scratch_bytes,
       int target_percent,
       struct z_heap_stress_result *result);
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
void sys_heap_print_info(struct sys_heap *heap, 
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h" 3 4
                                               _Bool 
# 258 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_heap.h"
                                                    dump_chunks);
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/structs.h" 1
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/structs.h"
struct _cpu_arch {






};




typedef struct _cpu_arch _cpu_arch_t;
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
struct k_cycle_stats {
 uint64_t total;
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
 
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h" 3 4
_Bool 
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/stats.h"
          track_usage;
};
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/list_gen.h" 2
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 2







struct _snode {
 struct _snode *next;
};



typedef struct _snode sys_snode_t;


struct _slist {
 sys_snode_t *head;
 sys_snode_t *tail;
};



typedef struct _slist sys_slist_t;
# 199 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_init(sys_slist_t *list)
{
 list->head = 
# 201 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             ((void *)0)
# 201 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                 ;
 list->tail = 
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             ((void *)0)
# 202 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                 ;
}







static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
 return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
 parent->next = child;
}

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
 list->head = node;
}

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
 list->tail = node;
}
# 238 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
 return list->head;
}
# 250 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
 return list->tail;
}
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline 
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             _Bool 
# 266 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                  sys_slist_is_empty(sys_slist_t *list);

static inline 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
_Bool 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
sys_slist_is_empty(sys_slist_t *list) { return (sys_slist_peek_head(list) == 
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); }
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next_no_check(sys_snode_t *node) { return z_snode_next_peek(node); }
# 290 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next(sys_snode_t *node) { return node != 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
? sys_slist_peek_next_no_check(node) : 
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 292 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; }
# 302 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_prepend(sys_slist_t *list,
         sys_snode_t *node);

static inline void sys_slist_prepend(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, sys_slist_peek_head(list)); z_slist_head_set(list, node); if (sys_slist_peek_tail(list) == 
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 305 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_tail_set(list, sys_slist_peek_head(list)); } }
# 315 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_append(sys_slist_t *list,
        sys_snode_t *node);

static inline void sys_slist_append(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, 
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); if (sys_slist_peek_tail(list) == 
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_tail_set(list, node); z_slist_head_set(list, node); } else { z_snode_next_set( sys_slist_peek_tail(list), node); z_slist_tail_set(list, node); } }
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_append_list(sys_slist_t *list,
      void *head, void *tail);

static inline void sys_slist_append_list(sys_slist_t *list, void *head, void *tail) { if (head != 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
&& tail != 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { if (sys_slist_peek_tail(list) == 
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_head_set(list, (sys_snode_t *)head); } else { z_snode_next_set( sys_slist_peek_tail(list), (sys_snode_t *)head); } z_slist_tail_set(list, (sys_snode_t *)tail); } }
# 347 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_merge_slist(sys_slist_t *list,
      sys_slist_t *list_to_append);

static inline void sys_slist_merge_slist ( sys_slist_t *list, sys_slist_t *list_to_append) { sys_snode_t *head, *tail; head = sys_slist_peek_head(list_to_append); tail = sys_slist_peek_tail(list_to_append); sys_slist_append_list(list, head, tail); sys_slist_init(list_to_append); }
# 361 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_insert(sys_slist_t *list,
        sys_snode_t *prev,
        sys_snode_t *node);

static inline void sys_slist_insert(sys_slist_t *list, sys_snode_t *prev, sys_snode_t *node) { if (prev == 
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { sys_slist_prepend(list, node); } else if (z_snode_next_peek(prev) == 
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 365 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { sys_slist_append(list, node); } else { z_snode_next_set(node, z_snode_next_peek(prev)); z_snode_next_set(prev, node); } }
# 377 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get_not_empty(sys_slist_t *list) { sys_snode_t *node = sys_slist_peek_head(list); z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } return node; }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get(sys_slist_t *list) { return sys_slist_is_empty(list) ? 
# 392 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0) 
# 392 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
: sys_slist_get_not_empty(list); }
# 404 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline void sys_slist_remove(sys_slist_t *list,
        sys_snode_t *prev_node,
        sys_snode_t *node);

static inline void sys_slist_remove(sys_slist_t *list, sys_snode_t *prev_node, sys_snode_t *node) { if (prev_node == 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
) { z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } } else { z_snode_next_set(prev_node, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, prev_node); } } z_snode_next_set(node, 
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
); }
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline 
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
             _Bool 
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
                  sys_slist_find_and_remove(sys_slist_t *list,
          sys_snode_t *node);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
static inline size_t sys_slist_len(sys_slist_t *list);

static inline size_t sys_slist_len(sys_slist_t * list) { size_t len = 0; static sys_snode_t * node; for (node = sys_slist_peek_head(list); node != 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; node = sys_slist_peek_next(node)) { len++; } return len; }


static inline 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
_Bool 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
sys_slist_find_and_remove(sys_slist_t *list, sys_snode_t *node) { sys_snode_t *prev = 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; sys_snode_t *test; for (test = sys_slist_peek_head(list); test != 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
((void *)0)
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; test = sys_slist_peek_next(test)) { if (test == node) { sys_slist_remove(list, prev, node); return 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
1
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; } prev = test; } return 
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h" 3 4
0
# 435 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/slist.h"
; }
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h" 2
# 63 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type;
struct k_obj_core;
# 89 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
extern sys_slist_t z_obj_type_list;


struct k_obj_core_stats_desc {
 size_t raw_size;
 size_t query_size;


 int (*raw)(struct k_obj_core *obj_core, void *stats);

 int (*query)(struct k_obj_core *obj_core, void *stats);

 int (*reset)(struct k_obj_core *obj_core);

 int (*disable)(struct k_obj_core *obj_core);

 int (*enable)(struct k_obj_core *obj_core);
};


struct k_obj_type {
 sys_snode_t node;
 sys_slist_t list;
 uint32_t id;
 size_t obj_core_offset;




};


struct k_obj_core {
 sys_snode_t node;
 struct k_obj_type *type;



};
# 141 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type *z_obj_type_init(struct k_obj_type *type,
       uint32_t id, size_t off);
# 155 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
struct k_obj_type *k_obj_type_find(uint32_t type_id);
# 174 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_type_walk_locked(struct k_obj_type *type,
      int (*func)(struct k_obj_core *, void *),
      void *data);
# 196 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_type_walk_unlocked(struct k_obj_type *type,
        int (*func)(struct k_obj_core *, void *),
        void *data);
# 209 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_init(struct k_obj_core *obj_core, struct k_obj_type *type);
# 221 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_link(struct k_obj_core *obj_core);
# 232 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_init_and_link(struct k_obj_core *obj_core,
         struct k_obj_type *type);
# 244 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
void k_obj_core_unlink(struct k_obj_core *obj_core);
# 299 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_register(struct k_obj_core *obj_core, void *stats,
         size_t stats_len);
# 314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_deregister(struct k_obj_core *obj_core);
# 331 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_raw(struct k_obj_core *obj_core, void *stats,
    size_t stats_len);
# 350 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_query(struct k_obj_core *obj_core, void *stats,
      size_t stats_len);
# 364 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_reset(struct k_obj_core *obj_core);
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_disable(struct k_obj_core *obj_core);
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel/obj_core.h"
int k_obj_core_stats_enable(struct k_obj_core *obj_core);
# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h" 2
# 84 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
struct _ready_q {


 struct k_thread *cache;



 sys_dlist_t runq;





};

typedef struct _ready_q _ready_q_t;

struct _cpu {

 uint32_t nested;


 char *irq_stack;


 struct k_thread *current;


 struct k_thread *idle_thread;
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 uint8_t id;


 void *fp_ctx;
# 154 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct _cpu_arch arch;
};

typedef struct _cpu _cpu_t;

struct z_kernel {
 struct _cpu cpus[1];
# 171 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct _ready_q ready_q;
# 185 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
 struct k_thread *current_fp;
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
};

typedef struct z_kernel _kernel_t;

extern struct z_kernel _kernel;

extern atomic_t _cpus_active;
# 241 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/kernel_structs.h"
typedef struct {
 sys_dlist_t waitq;
} _wait_q_t;







struct _timeout;
typedef void (*_timeout_func_t)(struct _timeout *t);

struct _timeout {
 sys_dnode_t node;
 _timeout_func_t fn;


 int64_t dticks;



};

typedef void (*k_thread_timeslice_fn_t)(struct k_thread *thread, void *data);
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch_inlines.h" 2


static inline __attribute__((always_inline)) _cpu_t *arch_curr_cpu(void)
{

 return &_kernel.cpus[0];
}


static inline __attribute__((always_inline)) uint32_t arch_proc_id(void)
{




 return arch_curr_cpu()->id;
}

static inline __attribute__((always_inline)) unsigned int arch_num_cpus(void)
{
 return 1;
}
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arch_inlines.h" 2
# 1228 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/arch_interface.h" 2
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 2






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/devicetree_generated.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 4306 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/io-channels.h" 1
# 4307 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/clocks.h" 1
# 4308 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/gpio.h" 1
# 4309 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/spi.h" 1
# 4310 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/dma.h" 1
# 4311 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/pwms.h" 1
# 4312 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/fixed-partitions.h" 1
# 4313 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/ordinals.h" 1
# 4314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/pinctrl.h" 1
# 4315 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/can.h" 1
# 4316 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/reset.h" 1
# 4317 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree/mbox.h" 1
# 4318 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/devicetree.h" 2
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2




# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h" 1
# 25 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
struct _callee_saved {
 uint32_t v1;
 uint32_t v2;
 uint32_t v3;
 uint32_t v4;
 uint32_t v5;
 uint32_t v6;
 uint32_t v7;
 uint32_t v8;
 uint32_t psp;
};

typedef struct _callee_saved _callee_saved_t;


struct _preempt_float {
 float s16;
 float s17;
 float s18;
 float s19;
 float s20;
 float s21;
 float s22;
 float s23;
 float s24;
 float s25;
 float s26;
 float s27;
 float s28;
 float s29;
 float s30;
 float s31;
};


struct _thread_arch {


 uint32_t basepri;


 uint32_t swap_return_value;







 struct _preempt_float preempt_float;
# 110 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
 union {
  uint32_t mode;


  struct {
   uint8_t mode_bits;
   uint8_t mode_exc_return;
   uint16_t mode_reserved2;
  };

 };
# 130 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/thread.h"
};




typedef struct _thread_arch _thread_arch_t;
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/nvic.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h" 2
# 77 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
struct __fpu_sf {
 uint32_t s[16];



 uint32_t fpscr;
 uint32_t undefined;
};
# 101 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/exc.h"
struct __esf {
 struct __basic_sf {
  union { uint32_t a1, r0; };
  union { uint32_t a2, r1; };
  union { uint32_t a3, r2; };
  union { uint32_t a4, r3; };
  union { uint32_t ip, r12; };
  union { uint32_t lr, r14; };
  union { uint32_t pc, r15; };
  uint32_t xpsr;
 } basic;

 struct __fpu_sf fpu;




};

extern uint32_t z_arm_coredump_fault_sp;

typedef struct __esf z_arch_esf_t;

extern void z_arm_exc_exit(void);
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/exc.h" 2
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h" 1
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
extern void _isr_wrapper(void);


extern void z_irq_spurious(const void *unused);






struct _isr_table_entry {
 const void *arg;
 void (*isr)(const void *);
};




extern struct _isr_table_entry _sw_isr_table[];
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
struct _isr_list {

 int32_t irq;

 int32_t flags;

 void *func;

 const void *param;
};
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sw_isr_table.h"
unsigned int z_get_sw_isr_table_idx(unsigned int irq);
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h" 2
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void arch_irq_enable(unsigned int irq);
extern void arch_irq_disable(unsigned int irq);
extern int arch_irq_is_enabled(unsigned int irq);


extern void z_arm_irq_priority_set(unsigned int irq, unsigned int prio,
       uint32_t flags);
# 74 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void z_arm_int_exit(void);

extern void z_arm_interrupt_init(void);
# 153 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/irq.h"
extern void z_arm_int_exit(void);






static inline void arch_isr_direct_header(void)
{



}

static inline void arch_isr_direct_footer(int maybe_swap)
{



 if (maybe_swap != 0) {
  z_arm_int_exit();
 }
}
# 28 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/error.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/error.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/syscall.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/error.h" 2
# 29 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/misc.h" 1
# 22 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/misc.h"
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
 return sys_clock_cycle_get_32();
}

extern uint64_t sys_clock_cycle_get_64(void);

static inline uint64_t arch_k_cycle_get_64(void)
{
 return sys_clock_cycle_get_64();
}

static inline __attribute__((always_inline)) void arch_nop(void)
{
 __asm__ volatile("nop");
}
# 30 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/addr_types.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/addr_types.h"
typedef uintptr_t paddr_t;
typedef void *vaddr_t;
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h" 1
# 31 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_msb_set(uint32_t op)
{
 if (op == 0) {
  return 0;
 }

 return 32 - __builtin_clz(op);
}
# 53 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_lsb_set(uint32_t op)
{

 return __builtin_ffs(op);
# 81 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/ffs.h"
}
# 32 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/nmi.h" 1
# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
static inline __attribute__((always_inline)) unsigned int arch_irq_lock(void)
{
 unsigned int key;
# 57 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 unsigned int tmp;

 __asm__ volatile(
  "mov %1, %2;"
  "mrs %0, BASEPRI;"
  "msr BASEPRI_MAX, %1;"
  "isb;"
  : "=r"(key),






  "=r"(tmp)

  : "i"(((((1 + 0)) << (8 - 3)) & 0xff))
  : "memory");
# 88 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 return key;
}






static inline __attribute__((always_inline)) void arch_irq_unlock(unsigned int key)
{
# 107 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
 __asm__ volatile(
  "msr BASEPRI, %0;"
  "isb;"
  : : "r"(key) : "memory");
# 122 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
}

static inline __attribute__((always_inline)) 
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h" 3 4
                    _Bool 
# 124 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline_gcc.h"
                         arch_irq_unlocked(unsigned int key)
{

 return key == 0U;
}
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/asm_inline.h" 2
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_bitops.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_bitops.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/sys_io.h" 2





typedef uint32_t io_port_t;
typedef uintptr_t mm_reg_t;
typedef uintptr_t mem_addr_t;
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_bitops.h" 2





static inline __attribute__((always_inline)) void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | (1 << bit);
}

static inline __attribute__((always_inline)) void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~(1 << bit);
}

static inline __attribute__((always_inline)) int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 return temp & (1 << bit);
}

static inline __attribute__((always_inline)) void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | mask;
}

static inline __attribute__((always_inline)) void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~mask;
}

static inline __attribute__((always_inline))
 void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{



 sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 void sys_bitfield_clear_bit(mem_addr_t addr, unsigned int bit)
{
 sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
 return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_clear_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_clear_bit(addr, bit);

 return ret;
}
# 35 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2


# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/cpu.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/cortex_m/memory_map.h" 1
# 39 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_io.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/common/sys_io.h"
static inline __attribute__((always_inline)) uint8_t sys_read8(mem_addr_t addr)
{
 return *(volatile uint8_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write8(uint8_t data, mem_addr_t addr)
{
 *(volatile uint8_t *)addr = data;
}

static inline __attribute__((always_inline)) uint16_t sys_read16(mem_addr_t addr)
{
 return *(volatile uint16_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write16(uint16_t data, mem_addr_t addr)
{
 *(volatile uint16_t *)addr = data;
}

static inline __attribute__((always_inline)) uint32_t sys_read32(mem_addr_t addr)
{
 return *(volatile uint32_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write32(uint32_t data, mem_addr_t addr)
{
 *(volatile uint32_t *)addr = data;
}

static inline __attribute__((always_inline)) uint64_t sys_read64(mem_addr_t addr)
{
 return *(volatile uint64_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write64(uint64_t data, mem_addr_t addr)
{
 *(volatile uint64_t *)addr = data;
}
# 40 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 57 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal_types.h" 1
# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/fatal_types.h"
enum k_fatal_error_reason {

 K_ERR_CPU_EXCEPTION,


 K_ERR_SPURIOUS_IRQ,


 K_ERR_STACK_CHK_FAIL,


 K_ERR_KERNEL_OOPS,


 K_ERR_KERNEL_PANIC,


 K_ERR_ARCH_START = 16
};
# 58 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2

enum k_fatal_error_reason_arch {

 K_ERR_ARM_MEM_GENERIC = K_ERR_ARCH_START,
 K_ERR_ARM_MEM_STACKING,
 K_ERR_ARM_MEM_UNSTACKING,
 K_ERR_ARM_MEM_DATA_ACCESS,
 K_ERR_ARM_MEM_INSTRUCTION_ACCESS,
 K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION,


 K_ERR_ARM_BUS_GENERIC,
 K_ERR_ARM_BUS_STACKING,
 K_ERR_ARM_BUS_UNSTACKING,
 K_ERR_ARM_BUS_PRECISE_DATA_BUS,
 K_ERR_ARM_BUS_IMPRECISE_DATA_BUS,
 K_ERR_ARM_BUS_INSTRUCTION_BUS,
 K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION,


 K_ERR_ARM_USAGE_GENERIC,
 K_ERR_ARM_USAGE_DIV_0,
 K_ERR_ARM_USAGE_UNALIGNED_ACCESS,
 K_ERR_ARM_USAGE_STACK_OVERFLOW,
 K_ERR_ARM_USAGE_NO_COPROCESSOR,
 K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN,
 K_ERR_ARM_USAGE_ILLEGAL_EPSR,
 K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION,


 K_ERR_ARM_SECURE_GENERIC,
 K_ERR_ARM_SECURE_ENTRY_POINT,
 K_ERR_ARM_SECURE_INTEGRITY_SIGNATURE,
 K_ERR_ARM_SECURE_EXCEPTION_RETURN,
 K_ERR_ARM_SECURE_ATTRIBUTION_UNIT,
 K_ERR_ARM_SECURE_TRANSITION,
 K_ERR_ARM_SECURE_LAZY_STATE_PRESERVATION,
 K_ERR_ARM_SECURE_LAZY_STATE_ERROR,


 K_ERR_ARM_UNDEFINED_INSTRUCTION,
 K_ERR_ARM_ALIGNMENT_FAULT,
 K_ERR_ARM_BACKGROUND_FAULT,
 K_ERR_ARM_PERMISSION_FAULT,
 K_ERR_ARM_SYNC_EXTERNAL_ABORT,
 K_ERR_ARM_ASYNC_EXTERNAL_ABORT,
 K_ERR_ARM_SYNC_PARITY_ERROR,
 K_ERR_ARM_ASYNC_PARITY_ERROR,
 K_ERR_ARM_DEBUG_EVENT,
 K_ERR_ARM_TRANSLATION_FAULT,
 K_ERR_ARM_UNSUPPORTED_EXCLUSIVE_ACCESS_FAULT
};
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h" 1
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 1
# 19 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 1
# 37 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 1
# 515 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config_common.h" 1
# 516 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 2
# 531 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config_nrf52840.h" 1
# 532 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_config.h" 2
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 1 3 4




# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 6 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/sys/syslimits.h" 1 3 4
# 8 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 138 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include-fixed/limits.h" 1 3 4
# 139 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/limits.h" 2 3 4
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 1
# 193 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 1
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef enum {

  Reset_IRQn = -15,
  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,

  BusFault_IRQn = -11,

  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  POWER_CLOCK_IRQn = 0,
  RADIO_IRQn = 1,
  UARTE0_UART0_IRQn = 2,
  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn= 3,
  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn= 4,
  NFCT_IRQn = 5,
  GPIOTE_IRQn = 6,
  SAADC_IRQn = 7,
  TIMER0_IRQn = 8,
  TIMER1_IRQn = 9,
  TIMER2_IRQn = 10,
  RTC0_IRQn = 11,
  TEMP_IRQn = 12,
  RNG_IRQn = 13,
  ECB_IRQn = 14,
  CCM_AAR_IRQn = 15,
  WDT_IRQn = 16,
  RTC1_IRQn = 17,
  QDEC_IRQn = 18,
  COMP_LPCOMP_IRQn = 19,
  SWI0_EGU0_IRQn = 20,
  SWI1_EGU1_IRQn = 21,
  SWI2_EGU2_IRQn = 22,
  SWI3_EGU3_IRQn = 23,
  SWI4_EGU4_IRQn = 24,
  SWI5_EGU5_IRQn = 25,
  TIMER3_IRQn = 26,
  TIMER4_IRQn = 27,
  PWM0_IRQn = 28,
  PDM_IRQn = 29,
  MWU_IRQn = 32,
  PWM1_IRQn = 33,
  PWM2_IRQn = 34,
  SPIM2_SPIS2_SPI2_IRQn = 35,
  RTC2_IRQn = 36,
  I2S_IRQn = 37,
  FPU_IRQn = 38,
  USBD_IRQn = 39,
  UARTE1_IRQn = 40,
  QSPI_IRQn = 41,
  CRYPTOCELL_IRQn = 42,
  PWM3_IRQn = 45,
  SPIM3_IRQn = 47
} IRQn_Type;
# 150 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 63 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_version.h" 1
# 64 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 162 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 1
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h" 1
# 29 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 292 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 311 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 326 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 346 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 393 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  return result;
}
# 403 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __CLZ(uint32_t value)
{
# 414 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
# 432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 454 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 476 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 493 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 510 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 527 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 593 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 608 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 630 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 652 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 667 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 679 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 691 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 949 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 1001 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
  __ISB();
}
# 1027 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 1099 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 1123 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 1153 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 1204 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 1234 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 1261 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 1313 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 1338 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 1379 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 1588 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{






  return __builtin_arm_get_fpscr();
# 1606 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{






  __builtin_arm_set_fpscr(fpscr);






}
# 1643 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
  }
  return result;
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
  } else {
    result = __SXTAB16(op1, __ROR(op2, rotate));
  }
  return result;
}


__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 55 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 2
# 163 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 264 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 303 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 321 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 376 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 411 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 445 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
# 724 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 764 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 816 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 904 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
# 1051 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1213 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1309 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1421 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1684 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __asm volatile("":::"memory");
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __asm volatile("":::"memory");
  }
}
# 1703 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1722 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1741 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1760 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1775 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1792 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1814 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
}
# 1836 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 3)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
  }
}
# 1861 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1888 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1911 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;

}
# 1927 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 1
# 183 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DMB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

  __DSB();
  __ISB();
}



static inline void ARM_MPU_Disable(void)
{
  __DMB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
  __DSB();
  __ISB();
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* 
# 251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 3 4
                                                                                  restrict 
# 251 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
                                                                                             src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1961 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 1981 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2022 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2052 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
# 2064 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2085 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2105 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 151 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/system_nrf52840.h" 1
# 35 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/system_nrf52840.h"
typedef void(*VECTOR_TABLE_Type)(void);




extern uint32_t SystemCoreClock;





extern void SystemInit (void);






extern void SystemCoreClockUpdate (void);
# 152 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h" 2
# 202 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t PART;
  volatile const uint32_t VARIANT;
  volatile const uint32_t PACKAGE;
  volatile const uint32_t RAM;
  volatile const uint32_t FLASH;
} FICR_INFO_Type;





typedef struct {
  volatile const uint32_t A0;
  volatile const uint32_t A1;
  volatile const uint32_t A2;
  volatile const uint32_t A3;
  volatile const uint32_t A4;
  volatile const uint32_t A5;
  volatile const uint32_t B0;
  volatile const uint32_t B1;
  volatile const uint32_t B2;
  volatile const uint32_t B3;
  volatile const uint32_t B4;
  volatile const uint32_t B5;
  volatile const uint32_t T0;
  volatile const uint32_t T1;
  volatile const uint32_t T2;
  volatile const uint32_t T3;
  volatile const uint32_t T4;
} FICR_TEMP_Type;





typedef struct {
  volatile const uint32_t TAGHEADER0;


  volatile const uint32_t TAGHEADER1;


  volatile const uint32_t TAGHEADER2;


  volatile const uint32_t TAGHEADER3;


} FICR_NFC_Type;





typedef struct {
  volatile const uint32_t BYTES;
  volatile const uint32_t RCCUTOFF;
  volatile const uint32_t APCUTOFF;
  volatile const uint32_t STARTUP;
  volatile const uint32_t ROSC1;
  volatile const uint32_t ROSC2;
  volatile const uint32_t ROSC3;
  volatile const uint32_t ROSC4;
} FICR_TRNG90B_Type;





typedef struct {
  volatile uint32_t POWER;
  volatile uint32_t POWERSET;
  volatile uint32_t POWERCLR;

  volatile const uint32_t RESERVED;
} POWER_RAM_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UART_PSEL_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UARTE_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_TXD_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
} SPI_PSEL_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
  volatile uint32_t CSN;
} SPIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_TXD_Type;





typedef struct {
  volatile uint32_t RXDELAY;
  volatile uint32_t CSNDUR;


} SPIM_IFTIMING_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MISO;
  volatile uint32_t MOSI;
  volatile uint32_t CSN;
} SPIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWI_PSEL_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_TXD_Type;





typedef struct {
  volatile uint32_t RX;
} NFCT_FRAMESTATUS_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile uint32_t AMOUNT;
} NFCT_TXD_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile const uint32_t AMOUNT;
} NFCT_RXD_Type;





typedef struct {
  volatile uint32_t LIMITH;

  volatile uint32_t LIMITL;

} SAADC_EVENTS_CH_Type;





typedef struct {
  volatile uint32_t PSELP;

  volatile uint32_t PSELN;

  volatile uint32_t CONFIG;

  volatile uint32_t LIMIT;

} SAADC_CH_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

} SAADC_RESULT_Type;





typedef struct {
  volatile uint32_t LED;
  volatile uint32_t A;
  volatile uint32_t B;
} QDEC_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t CNT;

  volatile uint32_t REFRESH;


  volatile uint32_t ENDDELAY;
  volatile const uint32_t RESERVED[4];
} PWM_SEQ_Type;





typedef struct {
  volatile uint32_t OUT[4];

} PWM_PSEL_Type;





typedef struct {
  volatile uint32_t CLK;
  volatile uint32_t DIN;
} PDM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t MAXCNT;

} PDM_SAMPLE_Type;





typedef struct {
  volatile uint32_t ADDR;

  volatile uint32_t SIZE;


  volatile uint32_t PERM;


  volatile const uint32_t RESERVED;
} ACL_ACL_Type;





typedef struct {
  volatile uint32_t EN;
  volatile uint32_t DIS;
} PPI_TASKS_CHG_Type;





typedef struct {
  volatile uint32_t EEP;
  volatile uint32_t TEP;
} PPI_CH_Type;





typedef struct {
  volatile uint32_t TEP;
} PPI_FORK_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_REGION_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_PREGION_Type;





typedef struct {
  volatile uint32_t SUBSTATWA;



  volatile uint32_t SUBSTATRA;



} MWU_PERREGION_Type;





typedef struct {
  volatile uint32_t START;

  volatile uint32_t END;
  volatile const uint32_t RESERVED[2];
} MWU_REGION_Type;





typedef struct {
  volatile const uint32_t START;
  volatile const uint32_t END;
  volatile uint32_t SUBS;
  volatile const uint32_t RESERVED;
} MWU_PREGION_Type;





typedef struct {
  volatile uint32_t MODE;
  volatile uint32_t RXEN;
  volatile uint32_t TXEN;
  volatile uint32_t MCKEN;
  volatile uint32_t MCKFREQ;
  volatile uint32_t RATIO;
  volatile uint32_t SWIDTH;
  volatile uint32_t ALIGN;
  volatile uint32_t FORMAT;
  volatile uint32_t CHANNELS;
} I2S_CONFIG_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_TXD_Type;





typedef struct {
  volatile uint32_t MAXCNT;
} I2S_RXTXD_Type;





typedef struct {
  volatile uint32_t MCK;
  volatile uint32_t SCK;
  volatile uint32_t LRCK;
  volatile uint32_t SDIN;
  volatile uint32_t SDOUT;
} I2S_PSEL_Type;





typedef struct {
  volatile const uint32_t EPIN[8];


  volatile const uint32_t RESERVED;
  volatile const uint32_t EPOUT[8];


} USBD_HALTED_Type;





typedef struct {
  volatile uint32_t EPOUT[8];

  volatile const uint32_t ISOOUT;

} USBD_SIZE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPOUT_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOOUT_Type;





typedef struct {
  volatile uint32_t SRC;
  volatile uint32_t DST;
  volatile uint32_t CNT;
} QSPI_READ_Type;





typedef struct {
  volatile uint32_t DST;
  volatile uint32_t SRC;
  volatile uint32_t CNT;
} QSPI_WRITE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t LEN;
} QSPI_ERASE_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t CSN;
  volatile const uint32_t RESERVED;
  volatile uint32_t IO0;
  volatile uint32_t IO1;
  volatile uint32_t IO2;
  volatile uint32_t IO3;
} QSPI_PSEL_Type;
# 891 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile const uint32_t CODEPAGESIZE;
  volatile const uint32_t CODESIZE;
  volatile const uint32_t RESERVED1[18];
  volatile const uint32_t DEVICEID[2];
  volatile const uint32_t RESERVED2[6];
  volatile const uint32_t ER[4];

  volatile const uint32_t IR[4];
  volatile const uint32_t DEVICEADDRTYPE;
  volatile const uint32_t DEVICEADDR[2];
  volatile const uint32_t RESERVED3[21];
  volatile const FICR_INFO_Type INFO;
  volatile const uint32_t RESERVED4[143];
  volatile const uint32_t PRODTEST[3];

  volatile const uint32_t RESERVED5[42];
  volatile const FICR_TEMP_Type TEMP;

  volatile const uint32_t RESERVED6[2];
  volatile FICR_NFC_Type NFC;
  volatile const uint32_t RESERVED7[488];
  volatile FICR_TRNG90B_Type TRNG90B;
} NRF_FICR_Type;
# 928 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t NRFFW[13];

  volatile const uint32_t RESERVED1[2];
  volatile uint32_t NRFHW[12];

  volatile uint32_t CUSTOMER[32];
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t PSELRESET[2];

  volatile uint32_t APPROTECT;
  volatile uint32_t NFCPINS;

  volatile uint32_t DEBUGCTRL;
  volatile const uint32_t RESERVED3[60];
  volatile uint32_t REGOUT0;


} NRF_UICR_Type;
# 960 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[340];
  volatile uint32_t FORCEPROTECT;

  volatile const uint32_t RESERVED1;
  volatile uint32_t DISABLE;
} NRF_APPROTECT_Type;
# 979 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_HFCLKSTART;
  volatile uint32_t TASKS_HFCLKSTOP;
  volatile uint32_t TASKS_LFCLKSTART;
  volatile uint32_t TASKS_LFCLKSTOP;
  volatile uint32_t TASKS_CAL;
  volatile uint32_t TASKS_CTSTART;
  volatile uint32_t TASKS_CTSTOP;
  volatile const uint32_t RESERVED[57];
  volatile uint32_t EVENTS_HFCLKSTARTED;
  volatile uint32_t EVENTS_LFCLKSTARTED;
  volatile const uint32_t RESERVED1;
  volatile uint32_t EVENTS_DONE;
  volatile uint32_t EVENTS_CTTO;
  volatile const uint32_t RESERVED2[5];
  volatile uint32_t EVENTS_CTSTARTED;

  volatile uint32_t EVENTS_CTSTOPPED;

  volatile const uint32_t RESERVED3[117];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[63];
  volatile const uint32_t HFCLKRUN;

  volatile const uint32_t HFCLKSTAT;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t LFCLKRUN;

  volatile const uint32_t LFCLKSTAT;
  volatile const uint32_t LFCLKSRCCOPY;

  volatile const uint32_t RESERVED6[62];
  volatile uint32_t LFCLKSRC;
  volatile const uint32_t RESERVED7[3];
  volatile uint32_t HFXODEBOUNCE;

  volatile const uint32_t RESERVED8[3];
  volatile uint32_t CTIV;
  volatile const uint32_t RESERVED9[8];
  volatile uint32_t TRACECONFIG;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t LFRCMODE;
} NRF_CLOCK_Type;
# 1035 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[30];
  volatile uint32_t TASKS_CONSTLAT;
  volatile uint32_t TASKS_LOWPWR;
  volatile const uint32_t RESERVED1[34];
  volatile uint32_t EVENTS_POFWARN;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_SLEEPENTER;
  volatile uint32_t EVENTS_SLEEPEXIT;
  volatile uint32_t EVENTS_USBDETECTED;
  volatile uint32_t EVENTS_USBREMOVED;
  volatile uint32_t EVENTS_USBPWRRDY;
  volatile const uint32_t RESERVED3[119];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t RESETREAS;
  volatile const uint32_t RESERVED5[9];
  volatile const uint32_t RAMSTATUS;
  volatile const uint32_t RESERVED6[3];
  volatile const uint32_t USBREGSTATUS;
  volatile const uint32_t RESERVED7[49];
  volatile uint32_t SYSTEMOFF;
  volatile const uint32_t RESERVED8[3];
  volatile uint32_t POFCON;
  volatile const uint32_t RESERVED9[2];
  volatile uint32_t GPREGRET;
  volatile uint32_t GPREGRET2;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t DCDCEN;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DCDCEN0;
  volatile const uint32_t RESERVED12[47];
  volatile const uint32_t MAINREGSTATUS;
  volatile const uint32_t RESERVED13[175];
  volatile POWER_RAM_Type RAM[9];
} NRF_POWER_Type;
# 1084 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[321];
  volatile uint32_t OUT;
  volatile uint32_t OUTSET;
  volatile uint32_t OUTCLR;
  volatile const uint32_t IN;
  volatile uint32_t DIR;
  volatile uint32_t DIRSET;
  volatile uint32_t DIRCLR;
  volatile uint32_t LATCH;


  volatile uint32_t DETECTMODE;

  volatile const uint32_t RESERVED1[118];
  volatile uint32_t PIN_CNF[32];

} NRF_GPIO_Type;
# 1114 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TXEN;
  volatile uint32_t TASKS_RXEN;
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_RSSISTART;

  volatile uint32_t TASKS_RSSISTOP;
  volatile uint32_t TASKS_BCSTART;
  volatile uint32_t TASKS_BCSTOP;
  volatile uint32_t TASKS_EDSTART;

  volatile uint32_t TASKS_EDSTOP;
  volatile uint32_t TASKS_CCASTART;

  volatile uint32_t TASKS_CCASTOP;
  volatile const uint32_t RESERVED[51];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_ADDRESS;
  volatile uint32_t EVENTS_PAYLOAD;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DISABLED;
  volatile uint32_t EVENTS_DEVMATCH;

  volatile uint32_t EVENTS_DEVMISS;

  volatile uint32_t EVENTS_RSSIEND;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_BCMATCH;
  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_CRCOK;
  volatile uint32_t EVENTS_CRCERROR;
  volatile uint32_t EVENTS_FRAMESTART;
  volatile uint32_t EVENTS_EDEND;


  volatile uint32_t EVENTS_EDSTOPPED;
  volatile uint32_t EVENTS_CCAIDLE;
  volatile uint32_t EVENTS_CCABUSY;
  volatile uint32_t EVENTS_CCASTOPPED;
  volatile uint32_t EVENTS_RATEBOOST;

  volatile uint32_t EVENTS_TXREADY;

  volatile uint32_t EVENTS_RXREADY;

  volatile uint32_t EVENTS_MHRMATCH;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_SYNC;
  volatile uint32_t EVENTS_PHYEND;


  volatile const uint32_t RESERVED4[36];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t CRCSTATUS;
  volatile const uint32_t RESERVED7;
  volatile const uint32_t RXMATCH;
  volatile const uint32_t RXCRC;
  volatile const uint32_t DAI;
  volatile const uint32_t PDUSTAT;
  volatile const uint32_t RESERVED8[59];
  volatile uint32_t PACKETPTR;
  volatile uint32_t FREQUENCY;
  volatile uint32_t TXPOWER;
  volatile uint32_t MODE;
  volatile uint32_t PCNF0;
  volatile uint32_t PCNF1;
  volatile uint32_t BASE0;
  volatile uint32_t BASE1;
  volatile uint32_t PREFIX0;
  volatile uint32_t PREFIX1;
  volatile uint32_t TXADDRESS;
  volatile uint32_t RXADDRESSES;
  volatile uint32_t CRCCNF;
  volatile uint32_t CRCPOLY;
  volatile uint32_t CRCINIT;
  volatile const uint32_t RESERVED9;
  volatile uint32_t TIFS;
  volatile const uint32_t RSSISAMPLE;
  volatile const uint32_t RESERVED10;
  volatile const uint32_t STATE;
  volatile uint32_t DATAWHITEIV;
  volatile const uint32_t RESERVED11[2];
  volatile uint32_t BCC;
  volatile const uint32_t RESERVED12[39];
  volatile uint32_t DAB[8];

  volatile uint32_t DAP[8];

  volatile uint32_t DACNF;
  volatile uint32_t MHRMATCHCONF;
  volatile uint32_t MHRMATCHMAS;
  volatile const uint32_t RESERVED13;
  volatile uint32_t MODECNF0;
  volatile const uint32_t RESERVED14[3];
  volatile uint32_t SFD;
  volatile uint32_t EDCNT;
  volatile uint32_t EDSAMPLE;
  volatile uint32_t CCACTRL;
  volatile const uint32_t RESERVED15[611];
  volatile uint32_t POWER;
} NRF_RADIO_Type;
# 1233 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_SUSPEND;
  volatile const uint32_t RESERVED1[56];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;
  volatile const uint32_t RESERVED2[4];
  volatile uint32_t EVENTS_TXDRDY;
  volatile const uint32_t RESERVED3;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5[46];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED6[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED7[93];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED8[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile UART_PSEL_Type PSEL;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED10;
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED11[17];
  volatile uint32_t CONFIG;
} NRF_UART_Type;
# 1281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[7];
  volatile uint32_t TASKS_FLUSHRX;
  volatile const uint32_t RESERVED1[52];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;

  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_TXDRDY;
  volatile uint32_t EVENTS_ENDTX;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EVENTS_TXSTOPPED;
  volatile const uint32_t RESERVED7[41];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[93];
  volatile uint32_t ERRORSRC;

  volatile const uint32_t RESERVED10[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile UARTE_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED13[3];
  volatile UARTE_RXD_Type RXD;
  volatile const uint32_t RESERVED14;
  volatile UARTE_TXD_Type TXD;
  volatile const uint32_t RESERVED15[7];
  volatile uint32_t CONFIG;
} NRF_UARTE_Type;
# 1341 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[66];
  volatile uint32_t EVENTS_READY;
  volatile const uint32_t RESERVED1[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED3;
  volatile SPI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED5;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CONFIG;
} NRF_SPI_Type;
# 1372 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ENDTX;
  volatile const uint32_t RESERVED6[10];
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED7[44];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[61];
  volatile uint32_t STALLSTAT;



  volatile const uint32_t RESERVED10[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile SPIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile SPIM_RXD_Type RXD;
  volatile SPIM_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED14[2];
  volatile SPIM_IFTIMING_Type IFTIMING;
  volatile uint32_t CSNPOL;
  volatile uint32_t PSELDCX;
  volatile uint32_t DCXCNT;
  volatile const uint32_t RESERVED15[19];
  volatile uint32_t ORC;


} NRF_SPIM_Type;
# 1432 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[9];
  volatile uint32_t TASKS_ACQUIRE;
  volatile uint32_t TASKS_RELEASE;

  volatile const uint32_t RESERVED1[54];
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t EVENTS_ACQUIRED;
  volatile const uint32_t RESERVED4[53];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t SEMSTAT;
  volatile const uint32_t RESERVED7[15];
  volatile uint32_t STATUS;
  volatile const uint32_t RESERVED8[47];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile SPIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED10[7];
  volatile SPIS_RXD_Type RXD;
  volatile SPIS_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DEF;

  volatile const uint32_t RESERVED12[24];
  volatile uint32_t ORC;
} NRF_SPIS_Type;
# 1478 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_RXDREADY;
  volatile const uint32_t RESERVED4[4];
  volatile uint32_t EVENTS_TXDSENT;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_BB;

  volatile const uint32_t RESERVED7[3];
  volatile uint32_t EVENTS_SUSPENDED;
  volatile const uint32_t RESERVED8[45];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED9[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED10[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED11[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED12;
  volatile TWI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED13[2];
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED14;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED15[24];
  volatile uint32_t ADDRESS;
} NRF_TWI_Type;
# 1531 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;

  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t EVENTS_SUSPENDED;

  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[2];
  volatile uint32_t EVENTS_LASTRX;
  volatile uint32_t EVENTS_LASTTX;

  volatile const uint32_t RESERVED7[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED10[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[5];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile TWIM_RXD_Type RXD;
  volatile TWIM_TXD_Type TXD;
  volatile const uint32_t RESERVED14[13];
  volatile uint32_t ADDRESS;
} NRF_TWIM_Type;
# 1587 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[3];
  volatile uint32_t TASKS_PREPARERX;
  volatile uint32_t TASKS_PREPARETX;
  volatile const uint32_t RESERVED3[51];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[9];
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_WRITE;
  volatile uint32_t EVENTS_READ;
  volatile const uint32_t RESERVED7[37];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[113];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t MATCH;

  volatile const uint32_t RESERVED10[10];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[9];
  volatile TWIS_RXD_Type RXD;
  volatile TWIS_TXD_Type TXD;
  volatile const uint32_t RESERVED13[13];
  volatile uint32_t ADDRESS[2];
  volatile const uint32_t RESERVED14;
  volatile uint32_t CONFIG;

  volatile const uint32_t RESERVED15[10];
  volatile uint32_t ORC;

} NRF_TWIS_Type;
# 1644 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;

  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_SENSE;

  volatile uint32_t TASKS_STARTTX;

  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_ENABLERXDATA;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_GOIDLE;
  volatile uint32_t TASKS_GOSLEEP;
  volatile const uint32_t RESERVED2[53];
  volatile uint32_t EVENTS_READY;

  volatile uint32_t EVENTS_FIELDDETECTED;
  volatile uint32_t EVENTS_FIELDLOST;
  volatile uint32_t EVENTS_TXFRAMESTART;

  volatile uint32_t EVENTS_TXFRAMEEND;

  volatile uint32_t EVENTS_RXFRAMESTART;

  volatile uint32_t EVENTS_RXFRAMEEND;


  volatile uint32_t EVENTS_ERROR;

  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_RXERROR;


  volatile uint32_t EVENTS_ENDRX;

  volatile uint32_t EVENTS_ENDTX;

  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_AUTOCOLRESSTARTED;
  volatile const uint32_t RESERVED5[3];
  volatile uint32_t EVENTS_COLLISION;
  volatile uint32_t EVENTS_SELECTED;
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED6[43];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED7[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED8[62];
  volatile uint32_t ERRORSTATUS;
  volatile const uint32_t RESERVED9;
  volatile NFCT_FRAMESTATUS_Type FRAMESTATUS;
  volatile const uint32_t NFCTAGSTATE;
  volatile const uint32_t RESERVED10[3];
  volatile const uint32_t SLEEPSTATE;
  volatile const uint32_t RESERVED11[6];
  volatile const uint32_t FIELDPRESENT;
  volatile const uint32_t RESERVED12[49];
  volatile uint32_t FRAMEDELAYMIN;
  volatile uint32_t FRAMEDELAYMAX;
  volatile uint32_t FRAMEDELAYMODE;
  volatile uint32_t PACKETPTR;

  volatile uint32_t MAXLEN;

  volatile NFCT_TXD_Type TXD;
  volatile NFCT_RXD_Type RXD;
  volatile const uint32_t RESERVED13[26];
  volatile uint32_t NFCID1_LAST;
  volatile uint32_t NFCID1_2ND_LAST;
  volatile uint32_t NFCID1_3RD_LAST;
  volatile uint32_t AUTOCOLRESCONFIG;


  volatile uint32_t SENSRES;
  volatile uint32_t SELRES;
} NRF_NFCT_Type;
# 1734 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_OUT[8];


  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_SET[8];


  volatile const uint32_t RESERVED1[4];
  volatile uint32_t TASKS_CLR[8];


  volatile const uint32_t RESERVED2[32];
  volatile uint32_t EVENTS_IN[8];

  volatile const uint32_t RESERVED3[23];
  volatile uint32_t EVENTS_PORT;

  volatile const uint32_t RESERVED4[97];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED5[129];
  volatile uint32_t CONFIG[8];

} NRF_GPIOTE_Type;
# 1771 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_SAMPLE;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CALIBRATEOFFSET;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DONE;



  volatile uint32_t EVENTS_RESULTDONE;
  volatile uint32_t EVENTS_CALIBRATEDONE;
  volatile uint32_t EVENTS_STOPPED;
  volatile SAADC_EVENTS_CH_Type EVENTS_CH[8];
  volatile const uint32_t RESERVED1[106];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED4[3];
  volatile SAADC_CH_Type CH[8];
  volatile const uint32_t RESERVED5[24];
  volatile uint32_t RESOLUTION;
  volatile uint32_t OVERSAMPLE;



  volatile uint32_t SAMPLERATE;
  volatile const uint32_t RESERVED6[12];
  volatile SAADC_RESULT_Type RESULT;
} NRF_SAADC_Type;
# 1820 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_COUNT;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_SHUTDOWN;
  volatile const uint32_t RESERVED[11];
  volatile uint32_t TASKS_CAPTURE[6];

  volatile const uint32_t RESERVED1[58];
  volatile uint32_t EVENTS_COMPARE[6];

  volatile const uint32_t RESERVED2[42];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[126];
  volatile uint32_t MODE;
  volatile uint32_t BITMODE;
  volatile const uint32_t RESERVED5;
  volatile uint32_t PRESCALER;
  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CC[6];

} NRF_TIMER_Type;
# 1858 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_TRIGOVRFLW;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_TICK;
  volatile uint32_t EVENTS_OVRFLW;
  volatile const uint32_t RESERVED1[14];
  volatile uint32_t EVENTS_COMPARE[4];

  volatile const uint32_t RESERVED2[109];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[13];
  volatile uint32_t EVTEN;
  volatile uint32_t EVTENSET;
  volatile uint32_t EVTENCLR;
  volatile const uint32_t RESERVED4[110];
  volatile const uint32_t COUNTER;
  volatile uint32_t PRESCALER;

  volatile const uint32_t RESERVED5[13];
  volatile uint32_t CC[4];
} NRF_RTC_Type;
# 1895 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_DATARDY;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[127];
  volatile const int32_t TEMP;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t A0;
  volatile uint32_t A1;
  volatile uint32_t A2;
  volatile uint32_t A3;
  volatile uint32_t A4;
  volatile uint32_t A5;
  volatile const uint32_t RESERVED4[2];
  volatile uint32_t B0;
  volatile uint32_t B1;
  volatile uint32_t B2;
  volatile uint32_t B3;
  volatile uint32_t B4;
  volatile uint32_t B5;
  volatile const uint32_t RESERVED5[2];
  volatile uint32_t T0;
  volatile uint32_t T1;
  volatile uint32_t T2;
  volatile uint32_t T3;
  volatile uint32_t T4;
} NRF_TEMP_Type;
# 1938 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_VALRDY;

  volatile const uint32_t RESERVED1[63];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[126];
  volatile uint32_t CONFIG;
  volatile const uint32_t VALUE;
} NRF_RNG_Type;
# 1965 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTECB;
  volatile uint32_t TASKS_STOPECB;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_ENDECB;
  volatile uint32_t EVENTS_ERRORECB;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t ECBDATAPTR;
} NRF_ECB_Type;
# 1990 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_RESOLVED;
  volatile uint32_t EVENTS_NOTRESOLVED;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t NIRK;
  volatile uint32_t IRKPTR;
  volatile const uint32_t RESERVED5;
  volatile uint32_t ADDRPTR;
  volatile uint32_t SCRATCHPTR;
} NRF_AAR_Type;
# 2024 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_KSGEN;

  volatile uint32_t TASKS_CRYPT;

  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_RATEOVERRIDE;


  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_ENDKSGEN;
  volatile uint32_t EVENTS_ENDCRYPT;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t MICSTATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t CNFPTR;

  volatile uint32_t INPTR;
  volatile uint32_t OUTPTR;
  volatile uint32_t SCRATCHPTR;
  volatile uint32_t MAXPACKETSIZE;

  volatile uint32_t RATEOVERRIDE;
} NRF_CCM_Type;
# 2068 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_TIMEOUT;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t RUNSTATUS;
  volatile const uint32_t REQSTATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t CRV;
  volatile uint32_t RREN;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED4[60];
  volatile uint32_t RR[8];
} NRF_WDT_Type;
# 2097 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_READCLRACC;
  volatile uint32_t TASKS_RDCLRACC;
  volatile uint32_t TASKS_RDCLRDBL;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_SAMPLERDY;

  volatile uint32_t EVENTS_REPORTRDY;
  volatile uint32_t EVENTS_ACCOF;
  volatile uint32_t EVENTS_DBLRDY;
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[59];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile uint32_t LEDPOL;
  volatile uint32_t SAMPLEPER;
  volatile const int32_t SAMPLE;
  volatile uint32_t REPORTPER;

  volatile const int32_t ACC;
  volatile const int32_t ACCREAD;

  volatile QDEC_PSEL_Type PSEL;
  volatile uint32_t DBFEN;
  volatile const uint32_t RESERVED4[5];
  volatile uint32_t LEDPRE;
  volatile const uint32_t ACCDBL;

  volatile const uint32_t ACCDBLREAD;

} NRF_QDEC_Type;
# 2146 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t TH;
  volatile uint32_t MODE;
  volatile uint32_t HYST;
} NRF_COMP_Type;
# 2185 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[4];
  volatile uint32_t ANADETECT;
  volatile const uint32_t RESERVED6[5];
  volatile uint32_t HYST;
} NRF_LPCOMP_Type;
# 2223 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TRIGGER[16];

  volatile const uint32_t RESERVED[48];
  volatile uint32_t EVENTS_TRIGGERED[16];


  volatile const uint32_t RESERVED1[112];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
} NRF_EGU_Type;
# 2247 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_SWI_Type;
# 2262 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;


  volatile uint32_t TASKS_SEQSTART[2];




  volatile uint32_t TASKS_NEXTSTEP;



  volatile const uint32_t RESERVED1[60];
  volatile uint32_t EVENTS_STOPPED;

  volatile uint32_t EVENTS_SEQSTARTED[2];

  volatile uint32_t EVENTS_SEQEND[2];


  volatile uint32_t EVENTS_PWMPERIODEND;
  volatile uint32_t EVENTS_LOOPSDONE;

  volatile const uint32_t RESERVED2[56];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[125];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t COUNTERTOP;

  volatile uint32_t PRESCALER;
  volatile uint32_t DECODER;
  volatile uint32_t LOOP;
  volatile const uint32_t RESERVED5[2];
  volatile PWM_SEQ_Type SEQ[2];
  volatile PWM_PSEL_Type PSEL;
} NRF_PWM_Type;
# 2317 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_END;


  volatile const uint32_t RESERVED1[125];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile uint32_t PDMCLKCTRL;
  volatile uint32_t MODE;

  volatile const uint32_t RESERVED3[3];
  volatile uint32_t GAINL;
  volatile uint32_t GAINR;
  volatile uint32_t RATIO;

  volatile const uint32_t RESERVED4[7];
  volatile PDM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED5[6];
  volatile PDM_SAMPLE_Type SAMPLE;
} NRF_PDM_Type;
# 2357 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[512];
  volatile ACL_ACL_Type ACL[8];
} NRF_ACL_Type;
# 2373 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[256];
  volatile const uint32_t READY;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t READYNEXT;
  volatile const uint32_t RESERVED2[62];
  volatile uint32_t CONFIG;

  union {
    volatile uint32_t ERASEPAGE;
    volatile uint32_t ERASEPCR1;

  };
  volatile uint32_t ERASEALL;
  volatile uint32_t ERASEPCR0;

  volatile uint32_t ERASEUICR;

  volatile uint32_t ERASEPAGEPARTIAL;

  volatile uint32_t ERASEPAGEPARTIALCFG;
  volatile const uint32_t RESERVED3[8];
  volatile uint32_t ICACHECNF;
  volatile const uint32_t RESERVED4;
  volatile uint32_t IHIT;
  volatile uint32_t IMISS;
} NRF_NVMC_Type;
# 2412 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile PPI_TASKS_CHG_Type TASKS_CHG[6];
  volatile const uint32_t RESERVED[308];
  volatile uint32_t CHEN;
  volatile uint32_t CHENSET;
  volatile uint32_t CHENCLR;
  volatile const uint32_t RESERVED1;
  volatile PPI_CH_Type CH[20];
  volatile const uint32_t RESERVED2[148];
  volatile uint32_t CHG[6];
  volatile const uint32_t RESERVED3[62];
  volatile PPI_FORK_Type FORK[32];
} NRF_PPI_Type;
# 2437 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[64];
  volatile MWU_EVENTS_REGION_Type EVENTS_REGION[4];
  volatile const uint32_t RESERVED1[16];
  volatile MWU_EVENTS_PREGION_Type EVENTS_PREGION[2];
  volatile const uint32_t RESERVED2[100];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t NMIEN;
  volatile uint32_t NMIENSET;
  volatile uint32_t NMIENCLR;
  volatile const uint32_t RESERVED4[53];
  volatile MWU_PERREGION_Type PERREGION[2];
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t REGIONEN;
  volatile uint32_t REGIONENSET;
  volatile uint32_t REGIONENCLR;
  volatile const uint32_t RESERVED6[57];
  volatile MWU_REGION_Type REGION[4];
  volatile const uint32_t RESERVED7[32];
  volatile MWU_PREGION_Type PREGION[2];
} NRF_MWU_Type;
# 2473 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_STOP;


  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_RXPTRUPD;




  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_TXPTRUPD;




  volatile const uint32_t RESERVED2[122];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile I2S_CONFIG_Type CONFIG;
  volatile const uint32_t RESERVED4[3];
  volatile I2S_RXD_Type RXD;
  volatile const uint32_t RESERVED5;
  volatile I2S_TXD_Type TXD;
  volatile const uint32_t RESERVED6[3];
  volatile I2S_RXTXD_Type RXTXD;
  volatile const uint32_t RESERVED7[3];
  volatile I2S_PSEL_Type PSEL;
} NRF_I2S_Type;
# 2520 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_FPU_Type;
# 2535 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTEPIN[8];



  volatile uint32_t TASKS_STARTISOIN;


  volatile uint32_t TASKS_STARTEPOUT[8];



  volatile uint32_t TASKS_STARTISOOUT;


  volatile uint32_t TASKS_EP0RCVOUT;
  volatile uint32_t TASKS_EP0STATUS;
  volatile uint32_t TASKS_EP0STALL;

  volatile uint32_t TASKS_DPDMDRIVE;

  volatile uint32_t TASKS_DPDMNODRIVE;

  volatile const uint32_t RESERVED1[40];
  volatile uint32_t EVENTS_USBRESET;

  volatile uint32_t EVENTS_STARTED;



  volatile uint32_t EVENTS_ENDEPIN[8];


  volatile uint32_t EVENTS_EP0DATADONE;

  volatile uint32_t EVENTS_ENDISOIN;

  volatile uint32_t EVENTS_ENDEPOUT[8];


  volatile uint32_t EVENTS_ENDISOOUT;

  volatile uint32_t EVENTS_SOF;

  volatile uint32_t EVENTS_USBEVENT;


  volatile uint32_t EVENTS_EP0SETUP;

  volatile uint32_t EVENTS_EPDATA;

  volatile const uint32_t RESERVED2[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t EVENTCAUSE;
  volatile const uint32_t RESERVED5[7];
  volatile USBD_HALTED_Type HALTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EPSTATUS;

  volatile uint32_t EPDATASTATUS;


  volatile const uint32_t USBADDR;
  volatile const uint32_t RESERVED7[3];
  volatile const uint32_t BMREQUESTTYPE;
  volatile const uint32_t BREQUEST;
  volatile const uint32_t WVALUEL;
  volatile const uint32_t WVALUEH;
  volatile const uint32_t WINDEXL;
  volatile const uint32_t WINDEXH;
  volatile const uint32_t WLENGTHL;
  volatile const uint32_t WLENGTHH;
  volatile USBD_SIZE_Type SIZE;
  volatile const uint32_t RESERVED8[15];
  volatile uint32_t ENABLE;
  volatile uint32_t USBPULLUP;
  volatile uint32_t DPDMVALUE;



  volatile uint32_t DTOGGLE;
  volatile uint32_t EPINEN;
  volatile uint32_t EPOUTEN;
  volatile uint32_t EPSTALL;
  volatile uint32_t ISOSPLIT;
  volatile const uint32_t FRAMECNTR;

  volatile const uint32_t RESERVED9[2];
  volatile uint32_t LOWPOWER;

  volatile uint32_t ISOINCONFIG;


  volatile const uint32_t RESERVED10[51];
  volatile USBD_EPIN_Type EPIN[8];
  volatile USBD_ISOIN_Type ISOIN;
  volatile const uint32_t RESERVED11[21];
  volatile USBD_EPOUT_Type EPOUT[8];
  volatile USBD_ISOOUT_Type ISOOUT;
} NRF_USBD_Type;
# 2653 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;
  volatile uint32_t TASKS_READSTART;

  volatile uint32_t TASKS_WRITESTART;

  volatile uint32_t TASKS_ERASESTART;
  volatile uint32_t TASKS_DEACTIVATE;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_READY;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;

  volatile QSPI_READ_Type READ;
  volatile QSPI_WRITE_Type WRITE;
  volatile QSPI_ERASE_Type ERASE;
  volatile QSPI_PSEL_Type PSEL;
  volatile uint32_t XIPOFFSET;

  volatile uint32_t IFCONFIG0;
  volatile const uint32_t RESERVED3[46];
  volatile uint32_t IFCONFIG1;
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t DPMDUR;

  volatile const uint32_t RESERVED5[3];
  volatile uint32_t ADDRCONF;
  volatile const uint32_t RESERVED6[3];
  volatile uint32_t CINSTRCONF;
  volatile uint32_t CINSTRDAT0;
  volatile uint32_t CINSTRDAT1;
  volatile uint32_t IFTIMING;
} NRF_QSPI_Type;
# 2704 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[1678];
  volatile uint32_t HOST_CRYPTOKEY_SEL;
  volatile const uint32_t RESERVED1[4];
  volatile uint32_t HOST_IOT_KPRTL_LOCK;




  volatile uint32_t HOST_IOT_KDR0;




  volatile uint32_t HOST_IOT_KDR1;


  volatile uint32_t HOST_IOT_KDR2;


  volatile uint32_t HOST_IOT_KDR3;


  volatile uint32_t HOST_IOT_LCS;

} NRF_CC_HOST_RGF_Type;
# 2742 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[320];
  volatile uint32_t ENABLE;
} NRF_CRYPTOCELL_Type;
# 194 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_bitfields.h" 1
# 195 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf51_to_nrf52840.h" 1
# 196 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52_to_nrf52840.h" 1
# 197 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 271 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/compiler_abstraction.h" 1
# 352 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/compiler_abstraction.h"
    static inline unsigned int gcc_current_sp(void)
    {
        unsigned int stack_pointer = 0;
        __asm__ __volatile__ ("mov %0, sp" : "=r"(stack_pointer));
        return stack_pointer;
    }
# 272 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf.h" 2
# 44 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h" 1
# 37 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils_internal.h" 1
# 38 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_utils.h" 2
# 45 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h" 1
# 56 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_peripherals.h" 1
# 57 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_peripherals.h" 2
# 46 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h" 1
# 69 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf52840_xxaa_memory.h" 1
# 70 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/mdk/nrf_mem.h" 2
# 47 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_ext.h" 1
# 48 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 2
# 573 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
typedef void (* nrfx_irq_handler_t)(void);


typedef enum
{
    NRFX_DRV_STATE_UNINITIALIZED,
    NRFX_DRV_STATE_INITIALIZED,
    NRFX_DRV_STATE_POWERED_ON,
} nrfx_drv_state_t;
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline 
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 595 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_in_ram(void const * p_object);
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 609 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_word_aligned(void const * p_object);
# 618 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline IRQn_Type nrfx_get_irq_number(void const * p_reg);
# 634 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_bitpos_to_event(uint32_t bit);
# 650 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_event_to_bitpos(uint32_t event);



static inline 
# 654 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 654 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
}

static inline 
# 659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h" 3 4
                 _Bool 
# 659 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_common.h"
                      nrfx_is_word_aligned(void const * p_object)
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

static inline IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)(uint16_t)(((uint32_t)(p_reg) >> 12) & 0x000001FF);
}

static inline uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
}

static inline uint32_t nrfx_event_to_bitpos(uint32_t event)
{
    static const uint32_t event_reg_offset = 0x100u;
    return (event - event_reg_offset) / sizeof(uint32_t);
}
# 39 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h" 1
# 64 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
      void (*routine)(const void *parameter),
      const void *parameter, uint32_t flags)
{
 return arch_irq_connect_dynamic(irq, priority, routine, parameter,
     flags);
}
# 89 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline int
irq_disconnect_dynamic(unsigned int irq, unsigned int priority,
         void (*routine)(const void *parameter),
         const void *parameter, uint32_t flags)
{
 return arch_irq_disconnect_dynamic(irq, priority, routine,
        parameter, flags);
}
# 291 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/irq.h"
static inline unsigned int irq_get_level(unsigned int irq)
{
 const uint32_t mask2 = ((1UL << (8)) - 1UL) <<
  8;
 const uint32_t mask3 = ((1UL << (8)) - 1UL) <<
  (8 + 8);

 if (0 && (irq & mask3) != 0) {
  return 3;
 }

 if (0 && (irq & mask2) != 0) {
  return 2;
 }

 return 1;
}
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 2
# 127 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
void nrfx_busy_wait(uint32_t usec_to_wait);
# 324 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 1






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_resources.h" 1
# 8 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_fem.h" 1
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_fem.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/dt-bindings/gpio/gpio.h" 1
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_fem.h" 2
# 9 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2




# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/../radio/radio_nrf5_ppi_resources.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/bluetooth/controller/ll_sw/nordic/hal/nrf5/nrfx_glue/bt_ctlr_used_resources.h" 2
# 325 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h" 2
# 389 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/hal_nordic/nrfx/./nrfx_glue.h"
void nrfx_isr(const void *irq_handler);
# 40 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 1
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
static inline 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 172 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_dma_accessible_check(void const * p_reg, void const * p_object);

static inline void nrf_barrier_w(void);

static inline void nrf_barrier_r(void);

static inline void nrf_barrier_rw(void);

static inline 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 180 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_event_check(void const * p_reg, uint32_t event);

static inline uint32_t nrf_task_event_address_get(void const * p_reg, uint32_t task_event);



static inline void nrf_event_readback(void * p_event_reg)
{

    (void)*((volatile uint32_t *)(p_event_reg));



}

static inline void nrf_barrier_w(void)
{



}

static inline void nrf_barrier_r(void)
{



}

static inline void nrf_barrier_rw(void)
{



}
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
static inline 
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 258 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_dma_accessible_check(void const * p_reg, void const * p_object)
{
# 276 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
    (void)p_reg;
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);

}

static inline 
# 281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
                 _Bool 
# 281 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
                      nrf_event_check(void const * p_reg, uint32_t event)
{
    return (
# 283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h" 3 4
           _Bool
# 283 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/hal/nrf_common.h"
               )*(volatile const uint32_t *)((const uint8_t *)p_reg + (uint32_t)event);
}

static inline uint32_t nrf_task_event_address_get(void const * p_reg, uint32_t task_event)
{
    return (uint32_t)((const uint8_t *)p_reg + task_event);
}
# 41 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/haly/nrfy_common.h" 1
# 42 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_errors.h" 1
# 54 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/drivers/nrfx_errors.h"
typedef enum {
    NRFX_SUCCESS = (0x0BAD0000 + 0),
    NRFX_ERROR_INTERNAL = (0x0BAD0000 + 1),
    NRFX_ERROR_NO_MEM = (0x0BAD0000 + 2),
    NRFX_ERROR_NOT_SUPPORTED = (0x0BAD0000 + 3),
    NRFX_ERROR_INVALID_PARAM = (0x0BAD0000 + 4),
    NRFX_ERROR_INVALID_STATE = (0x0BAD0000 + 5),
    NRFX_ERROR_INVALID_LENGTH = (0x0BAD0000 + 6),
    NRFX_ERROR_TIMEOUT = (0x0BAD0000 + 7),
    NRFX_ERROR_FORBIDDEN = (0x0BAD0000 + 8),
    NRFX_ERROR_NULL = (0x0BAD0000 + 9),
    NRFX_ERROR_INVALID_ADDR = (0x0BAD0000 + 10),
    NRFX_ERROR_BUSY = (0x0BAD0000 + 11),
    NRFX_ERROR_ALREADY = (0x0BAD0000 + 12),
    NRFX_ERROR_ALREADY_INITIALIZED = NRFX_ERROR_ALREADY,

    NRFX_ERROR_DRV_TWI_ERR_OVERRUN = ((0x0BAD0000 + 0x10000) + 0),
    NRFX_ERROR_DRV_TWI_ERR_ANACK = ((0x0BAD0000 + 0x10000) + 1),
    NRFX_ERROR_DRV_TWI_ERR_DNACK = ((0x0BAD0000 + 0x10000) + 2)
} nrfx_err_t;
# 43 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/nordic/nrfx/nrfx.h" 2
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/common/./soc_nrf_common.h" 2
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/soc/arm/nordic_nrf/nrf52/soc.h" 2
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 2
# 95 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core_m.h" 2
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/modules/cmsis/./cmsis_core.h" 2
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h" 2
# 152 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu_v7m.h"
struct arm_mpu_region_attr {

 uint32_t rasr;
};

typedef struct arm_mpu_region_attr arm_mpu_region_attr_t;


typedef struct {
 uint32_t rasr_attr;
} k_mem_partition_attr_t;
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h" 2
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
struct arm_mpu_region {

 uint32_t base;

 const char *name;





 arm_mpu_region_attr_t attr;
};


struct arm_mpu_config {

 uint32_t num_regions;

 const struct arm_mpu_region *mpu_regions;
};
# 73 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/mpu/arm_mpu.h"
extern const struct arm_mpu_config mpu_config;
# 269 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/arm/arch.h" 2
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/cpu.h" 2
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2
# 55 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
 for (size_t i = 0; i < len; i++) {
  dst[i] = src[i];
 }
}

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_cxx.h" 1
# 63 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 2
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
static inline __attribute__((always_inline)) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 3 4
                    _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
                         ___is_null(void *p)
{
 return p == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h" 3 4
            ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_internal.h"
                ;
}
# 125 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 145 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
_Static_assert(((((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) != 0) && ((((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) & (((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))-1)) == 0)), "" );
# 280 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_enums.h" 1
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf_enums.h"
enum cbprintf_package_arg_type {

 CBPRINTF_PACKAGE_ARG_TYPE_END = 0,

 CBPRINTF_PACKAGE_ARG_TYPE_CHAR,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_CHAR,

 CBPRINTF_PACKAGE_ARG_TYPE_SHORT,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_SHORT,

 CBPRINTF_PACKAGE_ARG_TYPE_INT,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_INT,

 CBPRINTF_PACKAGE_ARG_TYPE_LONG,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_LONG,

 CBPRINTF_PACKAGE_ARG_TYPE_LONG_LONG,
 CBPRINTF_PACKAGE_ARG_TYPE_UNSIGNED_LONG_LONG,

 CBPRINTF_PACKAGE_ARG_TYPE_FLOAT,
 CBPRINTF_PACKAGE_ARG_TYPE_DOUBLE,
 CBPRINTF_PACKAGE_ARG_TYPE_LONG_DOUBLE,

 CBPRINTF_PACKAGE_ARG_TYPE_PTR_CHAR,

 CBPRINTF_PACKAGE_ARG_TYPE_PTR_VOID,

 CBPRINTF_PACKAGE_ARG_TYPE_MAX,

 CBPRINTF_PACKAGE_ARG_TYPE_COUNT = CBPRINTF_PACKAGE_ARG_TYPE_MAX
};
# 281 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 2
# 302 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbprintf_cb)( );
# 313 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbprintf_convert_cb)(const void *buf, size_t len, void *ctx);
# 333 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
typedef int (*cbvprintf_external_formatter_func)(cbprintf_cb out, void *ctx,
       const char *fmt, va_list ap);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
__attribute__((format (printf, 4, 5)))
int cbprintf_package(void *packaged,
       size_t len,
       uint32_t flags,
       const char *format,
       ...);
# 471 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbvprintf_package(void *packaged,
        size_t len,
        uint32_t flags,
        const char *format,
        va_list ap);
# 512 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbprintf_package_convert(void *in_packaged,
        size_t in_len,
        cbprintf_convert_cb cb,
        void *ctx,
        uint32_t flags,
        uint16_t *strl,
        size_t strl_len);


struct z_cbprintf_buf_desc {
 void *buf;
 size_t size;
 size_t off;
};


static inline int z_cbprintf_cpy(const void *buf, size_t len, void *ctx)
{
 struct z_cbprintf_buf_desc *desc = (struct z_cbprintf_buf_desc *)ctx;

 if ((desc->size - desc->off) < len) {
  return -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
         28
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
               ;
 }

 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
((__builtin_object_size(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
buf
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
len
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, __builtin_object_size(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 0)) : __memcpy_ichk(
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
&((uint8_t *)desc->buf)[desc->off]
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
buf
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
, 
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
len
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
))
# 536 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                                    ;
 desc->off += len;

 return len;
}
# 572 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline int cbprintf_package_copy(void *in_packaged,
     size_t in_len,
     void *packaged,
     size_t len,
     uint32_t flags,
     uint16_t *strl,
     size_t strl_len)
{
 struct z_cbprintf_buf_desc buf_desc = {
  .buf = packaged,
  .size = len,
  .off = 0,
 };

 return cbprintf_package_convert(in_packaged, in_len,
     packaged ? z_cbprintf_cpy : 
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
                                ((void *)0)
# 587 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                    , &buf_desc,
     flags, strl, strl_len);
}
# 620 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline int cbprintf_fsc_package(void *in_packaged,
           size_t in_len,
           void *packaged,
           size_t len)
{
 return cbprintf_package_copy(in_packaged, in_len, packaged, len,
         (1UL << (0)) |
         (1UL << (1)), 
# 627 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h" 3 4
                                         ((void *)0)
# 627 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
                                             , 0);
}
# 650 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbpprintf_external(cbprintf_cb out,
         cbvprintf_external_formatter_func formatter,
         void *ctx,
         void *packaged);
# 681 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
__attribute__((format (printf, 3, 4)))
int cbprintf(cbprintf_cb out, void *ctx, const char *format, ...);
# 712 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *format,
       va_list ap, uint32_t flags);
# 741 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
# 777 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline
int cbvprintf_tagged_args(cbprintf_cb out, void *ctx,
     const char *format, va_list ap)
{
 return z_cbvprintf_impl(out, ctx, format, ap,
    (1UL << (0)));
}
# 802 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
# 816 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/cbprintf.h"
 return cbpprintf_external(out, cbvprintf, ctx, packaged);
}
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 36 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
typedef uint32_t log_timestamp_t;
# 56 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg_desc {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
 uint32_t domain:3;
 uint32_t level:3;
 uint32_t package_len:11;
 uint32_t data_len:12;
};

union log_msg_source {
 const struct log_source_const_data *fixed;
 struct log_source_dynamic_data *dynamic;
 void *raw;
};

struct log_msg_hdr {
 struct log_msg_desc desc;







 const void *source;
 log_timestamp_t timestamp;




};
# 95 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg {
 struct log_msg_hdr hdr;



 uint8_t padding[((sizeof(struct log_msg_hdr) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) > 0 ? ((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))) - (sizeof(struct log_msg_hdr) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))) : 0)];
 uint8_t data[];
};




_Static_assert(sizeof(struct log_msg) % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))) == 0, "" "Log msg size must aligned")
                                  ;





struct log_msg_generic_hdr {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
};

union log_msg_generic {
 union mpsc_pbuf_generic buf;
 struct log_msg_generic_hdr generic;
 struct log_msg log;
};





enum z_log_msg_mode {



 Z_LOG_MSG_MODE_RUNTIME,




 Z_LOG_MSG_MODE_FROM_STACK,





 Z_LOG_MSG_MODE_ZERO_COPY,
};
# 488 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
struct log_msg *z_log_msg_alloc(uint32_t wlen);
# 503 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
void z_log_msg_finalize(struct log_msg *msg, const void *source,
    const struct log_msg_desc desc, const void *data);
# 516 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_static_create(const void *source,
     const struct log_msg_desc desc,
     uint8_t *package, const void *data);
# 541 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
       uint8_t level, const void *data,
       size_t dlen, uint32_t package_flags,
       const char *fmt,
       va_list ap);
# 568 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline void z_log_msg_runtime_create(uint8_t domain_id,
          const void *source,
          uint8_t level, const void *data,
          size_t dlen, uint32_t package_flags,
          const char *fmt, ...)
{
 va_list ap;

 
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
__builtin_va_start(
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
ap
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
,
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
fmt
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
)
# 576 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
                 ;
 z_log_msg_runtime_vcreate(domain_id, source, level,
       data, dlen, package_flags, fmt, ap);
 
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
__builtin_va_end(
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
ap
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
)
# 579 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
          ;
}

static inline 
# 582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
             _Bool 
# 582 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
                  z_log_item_is_msg(const union log_msg_generic *msg)
{
 return msg->generic.type == 0;
}







static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
 return (((((((unsigned long)((
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       __builtin_offsetof (
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       struct log_msg
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       , 
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       data
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       ) 
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
       + desc.package_len + (desc.data_len))) + ((unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) - 1)) / (unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))) * (unsigned long)((((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))))) + (sizeof(uint32_t)) - 1) / (sizeof(uint32_t)));
}







static inline uint32_t log_msg_generic_get_wlen(const union mpsc_pbuf_generic *item)
{
 const union log_msg_generic *generic_msg = (const union log_msg_generic *)item;

 if (z_log_item_is_msg(generic_msg)) {
  const struct log_msg *msg = (const struct log_msg *)generic_msg;

  return log_msg_get_total_wlen(msg->hdr.desc);
 }

 return 0;
}







static inline uint8_t log_msg_get_domain(struct log_msg *msg)
{
 return msg->hdr.desc.domain;
}







static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
 return msg->hdr.desc.level;
}







static inline const void *log_msg_get_source(struct log_msg *msg)
{
 return msg->hdr.source;
}







static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
 return msg->hdr.timestamp;
}







static inline void *log_msg_get_tid(struct log_msg *msg)
{



 (void)(msg);
 return 
# 673 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 3 4
       ((void *)0)
# 673 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
           ;

}
# 685 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline uint8_t *log_msg_get_data(struct log_msg *msg, size_t *len)
{
 *len = msg->hdr.desc.data_len;

 return msg->data + msg->hdr.desc.package_len;
}
# 700 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h"
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
 *len = msg->hdr.desc.package_len;

 return msg->data;
}





# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 1






# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/tracing/tracing_syscall.h" 1
# 8 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 2





# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscall_list.h" 1
# 14 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 1
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/arch/syscall.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 2




# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h" 1
# 137 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/section_tags.h" 1
# 138 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/linker/sections.h" 2
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 2
# 86 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
typedef uintptr_t (*_k_syscall_handler_t)(uintptr_t arg1, uintptr_t arg2,
       uintptr_t arg3, uintptr_t arg4,
       uintptr_t arg5, uintptr_t arg6,
       void *ssf);




static inline __attribute__((always_inline)) 
# 94 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
                    _Bool 
# 94 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                         z_syscall_trap(void)
{
 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
_Bool 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
     ret = 
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
           0
# 96 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                ;
# 106 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
 return ret;
}







static inline 
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
             _Bool 
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
                  k_is_user_context(void)
{



 return 
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h" 3 4
       0
# 120 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/syscall.h"
            ;

}
# 15 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 2
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
extern void z_impl_z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data);


static inline void z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data)
{
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 3 4
0
# 38 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
);
 z_impl_z_log_msg_static_create(source, desc, package, data);
}
# 50 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
extern void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap);


static inline void z_log_msg_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap)
{
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h" 3 4
0
# 76 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/log_msg.h"
);
 z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
}
# 712 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_msg.h" 2
# 10 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 2
# 159 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
void z_log_minimal_hexdump_print(int level, const void *data, size_t size);
void z_log_minimal_vprintk(const char *fmt, va_list ap);
void z_log_minimal_printk(const char *fmt, ...);
# 175 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline char z_log_minimal_level_to_char(int level)
{
 switch (level) {
 case 1U:
  return 'E';
 case 2U:
  return 'W';
 case 3U:
  return 'I';
 case 4U:
  return 'D';
 default:
  return '?';
 }
}
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
extern struct log_source_const_data _log_const_list_start[];
extern struct log_source_const_data _log_const_list_end[];
# 427 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline uint32_t log_const_source_id(
    const struct log_source_const_data *data)
{
 return ((const uint8_t *)data - (uint8_t *)_log_const_list_start)/
   sizeof(struct log_source_const_data);
}

extern struct log_source_dynamic_data _log_dynamic_list_start[];
extern struct log_source_dynamic_data _log_dynamic_list_end[];
# 453 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
 return ((uint8_t *)data - (uint8_t *)_log_dynamic_list_start)/
   sizeof(struct log_source_dynamic_data);
}


static inline __attribute__((format (printf, 1, 2)))
void z_log_printf_arg_checker(const char *fmt, ...)
{
 (void)(fmt);
}
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
static inline void log2_generic(uint8_t level, const char *fmt, va_list ap)
{
 z_log_msg_runtime_vcreate(0, 
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 3 4
                                                 ((void *)0)
# 477 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
                                                     , level,
       
# 478 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h" 3 4
      ((void *)0)
# 478 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log_core.h"
          , 0, 0, fmt, ap);
}
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h" 2
# 279 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/logging/log.h"
void z_log_vprintk(const char *fmt, va_list ap);
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2
const 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__aligned__(
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__alignof(struct log_source_const_data)
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_source_const_data log_const_usb_hid __attribute__((section("." "_log_const" "." "static" "." "log_const_usb_hid_"))) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__used__)) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= { .name = "usb_hid", .level = 3 }; extern const struct log_source_const_data log_const_usb_hid; extern struct log_source_dynamic_data log_dynamic_usb_hid; static const struct log_source_const_data * __log_current_const_data 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__unused__)) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= 1 ? &log_const_usb_hid : 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; static struct log_source_dynamic_data * __log_current_dynamic_data 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__unused__)) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= (1 && 0) ? &log_dynamic_usb_hid : 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; static const uint32_t __log_level 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__unused__)) 
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= 3;

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h" 1
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h" 2
# 309 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
 dst[0] = val >> 8;
 dst[1] = val;
}
# 324 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_be24(uint32_t val, uint8_t dst[3])
{
 dst[0] = val >> 16;
 sys_put_be16(val, &dst[1]);
}
# 339 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_be32(uint32_t val, uint8_t dst[4])
{
 sys_put_be16(val >> 16, dst);
 sys_put_be16(val, &dst[2]);
}
# 354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_be48(uint64_t val, uint8_t dst[6])
{
 sys_put_be16(val >> 32, dst);
 sys_put_be32(val, &dst[2]);
}
# 369 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_be64(uint64_t val, uint8_t dst[8])
{
 sys_put_be32(val >> 32, dst);
 sys_put_be32(val, &dst[4]);
}
# 384 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
 dst[0] = val;
 dst[1] = val >> 8;
}
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
 sys_put_le16(val, dst);
 dst[2] = val >> 16;
}
# 414 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
 sys_put_le16(val, dst);
 sys_put_le16(val >> 16, &dst[2]);
}
# 429 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_le48(uint64_t val, uint8_t dst[6])
{
 sys_put_le32(val, dst);
 sys_put_le16(val >> 32, &dst[4]);
}
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_put_le64(uint64_t val, uint8_t dst[8])
{
 sys_put_le32(val, dst);
 sys_put_le32(val >> 32, &dst[4]);
}
# 460 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
 return ((uint16_t)src[0] << 8) | src[1];
}
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint32_t sys_get_be24(const uint8_t src[3])
{
 return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
}
# 490 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
 return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint64_t sys_get_be48(const uint8_t src[6])
{
 return ((uint64_t)sys_get_be32(&src[0]) << 16) | sys_get_be16(&src[4]);
}
# 520 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint64_t sys_get_be64(const uint8_t src[8])
{
 return ((uint64_t)sys_get_be32(&src[0]) << 32) | sys_get_be32(&src[4]);
}
# 535 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
 return ((uint16_t)src[1] << 8) | src[0];
}
# 550 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint32_t sys_get_le24(const uint8_t src[3])
{
 return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
}
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
 return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
}
# 580 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint64_t sys_get_le48(const uint8_t src[6])
{
 return ((uint64_t)sys_get_le32(&src[2]) << 16) | sys_get_le16(&src[0]);
}
# 595 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
 return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
# 613 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
 uint8_t *pdst = (uint8_t *)dst;
 const uint8_t *psrc = (const uint8_t *)src;

 { }

                                                     ;

 psrc += length - 1;

 for (; length > 0; length--) {
  *pdst++ = *psrc--;
 }
}
# 639 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/byteorder.h"
static inline void sys_mem_swap(void *buf, size_t length)
{
 size_t i;

 for (i = 0; i < (length/2); i++) {
  uint8_t tmp = ((uint8_t *)buf)[i];

  ((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
  ((uint8_t *)buf)[length - 1 - i] = tmp;
 }
}
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h" 1
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h" 1
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 1
# 13 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h" 1
# 11 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 12 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h" 2
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
struct device;
# 59 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
union init_function {






 int (*sys)(void);
# 75 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
 int (*dev)(const struct device *dev);
};
# 92 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/init.h"
struct init_entry {

 union init_function init_fn;




 const struct device *dev;
};
# 14 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 1
# 46 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 47 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 1
# 102 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 103 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 1 3 4
# 16 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/newlib.h" 1 3 4
# 17 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4





# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 23 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 2 3 4
# 312 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4

# 312 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/inttypes.h" 3 4
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;





extern intmax_t imaxabs(intmax_t);
extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denomer);
extern intmax_t strtoimax(const char *restrict, char **restrict, int);
extern uintmax_t strtoumax(const char *restrict, char **restrict, int);
extern intmax_t wcstoimax(const wchar_t *restrict, wchar_t **restrict, int);
extern uintmax_t wcstoumax(const wchar_t *restrict, wchar_t **restrict, int);
# 104 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2



# 106 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
struct k_mem_paging_stats_t {
# 132 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
};

struct k_mem_paging_histogram_t {
# 144 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
};


static inline uintptr_t z_mem_phys_addr(void *virt)
{
 uintptr_t addr = (uintptr_t)virt;
# 161 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
 { }






                       ;






 return ((addr) - 0);
}


static inline void *z_mem_virt_addr(uintptr_t phys)
{
 { }





                                                            ;





 return (void *)((phys) + 0);
}
# 241 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void z_phys_map(uint8_t **virt_ptr, uintptr_t phys, size_t size,
  uint32_t flags);
# 271 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void z_phys_unmap(uint8_t *virt, size_t size);
# 308 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
size_t k_mem_free_get(void);
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void *k_mem_map(size_t size, uint32_t flags);
# 364 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_unmap(void *addr, size_t size);
# 379 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
size_t k_mem_region_align(uintptr_t *aligned_addr, size_t *aligned_size,
     uintptr_t addr, size_t size, size_t align);
# 415 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
int k_mem_page_out(void *addr, size_t size);
# 430 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_page_in(void *addr, size_t size);
# 445 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_pin(void *addr, size_t size);
# 457 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_unpin(void *addr, size_t size);
# 467 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t *stats);

struct k_thread;
# 479 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline
void k_mem_paging_thread_stats_get(struct k_thread *thread,
       struct k_mem_paging_stats_t *stats);
# 491 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_eviction_get(
 struct k_mem_paging_histogram_t *hist);
# 502 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_in_get(
 struct k_mem_paging_histogram_t *hist);
# 513 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_out_get(
 struct k_mem_paging_histogram_t *hist);

# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 35 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_stats_get(stats);
}
# 47 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats)
{
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 60 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_thread_stats_get(thread, stats);
}
# 72 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 84 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_eviction_get(hist);
}
# 96 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 108 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 108 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_in_get(hist);
}
# 120 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 132 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 132 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_out_get(hist);
}
# 517 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 2
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
struct z_page_frame *k_mem_paging_eviction_select(
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 3 4
                                                 _Bool 
# 542 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
                                                      *dirty);
# 551 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_eviction_init(void);
# 598 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
int k_mem_paging_backing_store_location_get(struct z_page_frame *pf,
         uintptr_t *location,
         
# 600 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h" 3 4
        _Bool 
# 600 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
             page_fault);
# 612 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_location_free(uintptr_t location);
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_out(uintptr_t location);
# 638 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_in(uintptr_t location);
# 660 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_page_finalize(struct z_page_frame *pf,
           uintptr_t location);
# 676 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/mem_manage.h"
void k_mem_paging_backing_store_init(void);
# 48 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h" 2
# 119 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/sys/device_mmio.h"
struct z_device_mmio_rom {

 mm_reg_t addr;
};
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 61 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
typedef int16_t device_handle_t;
# 354 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
struct device_state {







 uint8_t init_res;




 
# 367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
_Bool 
# 367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
     initialized : 1;
};

struct pm_device;
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
struct device {

 const char *name;

 const void *config;

 const void *api;

 struct device_state *state;

 void *data;
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
 struct pm_device *pm;

};
# 420 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline device_handle_t device_handle_get(const struct device *dev)
{
 device_handle_t ret = 0;
 extern struct device _device_list_start[];




 if (dev != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
           ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
               ) {
  ret = 1 + (device_handle_t)(dev - _device_list_start);
 }

 return ret;
}
# 443 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline const struct device *
device_from_handle(device_handle_t dev_handle)
{
 extern struct device _device_list_start[];
 const struct device *dev = 
# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
                           ((void *)0)
# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
                               ;
 size_t numdev;

 do { extern struct device _device_list_start[]; extern struct device _device_list_end[]; *(&numdev) = ((uintptr_t)_device_list_end - (uintptr_t)_device_list_start) / sizeof(struct device); } while (0);;

 if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
  dev = &_device_list_start[dev_handle - 1];
 }

 return dev;
}
# 698 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline const struct device *device_get_binding(const char *name);
# 708 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
size_t z_device_get_all_static(const struct device **devices);
# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"

# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
_Bool 
# 724 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
    z_device_is_ready(const struct device *dev);
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
static inline 
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
         _Bool 
# 742 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
              device_is_ready(const struct device *dev);

static inline 
# 744 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 3 4
             _Bool 
# 744 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
                  z_impl_device_is_ready(const struct device *dev)
{
 return z_device_is_ready(dev);
}
# 1022 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
extern const struct device __device_dts_ord_0; extern const struct device __device_dts_ord_2; extern const struct device __device_dts_ord_1; extern const struct device __device_dts_ord_14; extern const struct device __device_dts_ord_20; extern const struct device __device_dts_ord_96; extern const struct device __device_dts_ord_125; extern const struct device __device_dts_ord_101; extern const struct device __device_dts_ord_86; extern const struct device __device_dts_ord_134; extern const struct device __device_dts_ord_135; extern const struct device __device_dts_ord_136; extern const struct device __device_dts_ord_140; extern const struct device __device_dts_ord_21; extern const struct device __device_dts_ord_22; extern const struct device __device_dts_ord_27; extern const struct device __device_dts_ord_103; extern const struct device __device_dts_ord_97; extern const struct device __device_dts_ord_29; extern const struct device __device_dts_ord_117; extern const struct device __device_dts_ord_111; extern const struct device __device_dts_ord_89; extern const struct device __device_dts_ord_85; extern const struct device __device_dts_ord_126; extern const struct device __device_dts_ord_90; extern const struct device __device_dts_ord_91; extern const struct device __device_dts_ord_92; extern const struct device __device_dts_ord_93; extern const struct device __device_dts_ord_94; extern const struct device __device_dts_ord_95; extern const struct device __device_dts_ord_84; extern const struct device __device_dts_ord_127; extern const struct device __device_dts_ord_128; extern const struct device __device_dts_ord_129; extern const struct device __device_dts_ord_130; extern const struct device __device_dts_ord_131; extern const struct device __device_dts_ord_132; extern const struct device __device_dts_ord_133; extern const struct device __device_dts_ord_105; extern const struct device __device_dts_ord_102; extern const struct device __device_dts_ord_36; extern const struct device __device_dts_ord_37; extern const struct device __device_dts_ord_142; extern const struct device __device_dts_ord_143; extern const struct device __device_dts_ord_137; extern const struct device __device_dts_ord_138; extern const struct device __device_dts_ord_139; extern const struct device __device_dts_ord_15; extern const struct device __device_dts_ord_19; extern const struct device __device_dts_ord_16; extern const struct device __device_dts_ord_79; extern const struct device __device_dts_ord_80; extern const struct device __device_dts_ord_81; extern const struct device __device_dts_ord_82; extern const struct device __device_dts_ord_83; extern const struct device __device_dts_ord_66; extern const struct device __device_dts_ord_67; extern const struct device __device_dts_ord_68; extern const struct device __device_dts_ord_69; extern const struct device __device_dts_ord_34; extern const struct device __device_dts_ord_77; extern const struct device __device_dts_ord_35; extern const struct device __device_dts_ord_78; extern const struct device __device_dts_ord_70; extern const struct device __device_dts_ord_71; extern const struct device __device_dts_ord_72; extern const struct device __device_dts_ord_73; extern const struct device __device_dts_ord_74; extern const struct device __device_dts_ord_17; extern const struct device __device_dts_ord_75; extern const struct device __device_dts_ord_18; extern const struct device __device_dts_ord_76; extern const struct device __device_dts_ord_4; extern const struct device __device_dts_ord_56; extern const struct device __device_dts_ord_57; extern const struct device __device_dts_ord_58; extern const struct device __device_dts_ord_3; extern const struct device __device_dts_ord_62; extern const struct device __device_dts_ord_63; extern const struct device __device_dts_ord_64; extern const struct device __device_dts_ord_65; extern const struct device __device_dts_ord_30; extern const struct device __device_dts_ord_32; extern const struct device __device_dts_ord_12; extern const struct device __device_dts_ord_24; extern const struct device __device_dts_ord_13; extern const struct device __device_dts_ord_23; extern const struct device __device_dts_ord_28; extern const struct device __device_dts_ord_33; extern const struct device __device_dts_ord_38; extern const struct device __device_dts_ord_39; extern const struct device __device_dts_ord_5; extern const struct device __device_dts_ord_60; extern const struct device __device_dts_ord_31; extern const struct device __device_dts_ord_52; extern const struct device __device_dts_ord_55; extern const struct device __device_dts_ord_40; extern const struct device __device_dts_ord_53; extern const struct device __device_dts_ord_41; extern const struct device __device_dts_ord_49; extern const struct device __device_dts_ord_47; extern const struct device __device_dts_ord_48; extern const struct device __device_dts_ord_50; extern const struct device __device_dts_ord_51; extern const struct device __device_dts_ord_46; extern const struct device __device_dts_ord_42; extern const struct device __device_dts_ord_43; extern const struct device __device_dts_ord_44; extern const struct device __device_dts_ord_45; extern const struct device __device_dts_ord_54; extern const struct device __device_dts_ord_6; extern const struct device __device_dts_ord_8; extern const struct device __device_dts_ord_10; extern const struct device __device_dts_ord_7; extern const struct device __device_dts_ord_9; extern const struct device __device_dts_ord_11; extern const struct device __device_dts_ord_59; extern const struct device __device_dts_ord_61;
# 1031 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 1
# 23 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
extern const struct device * z_impl_device_get_binding(const char * name);


static inline const struct device * device_get_binding(const char * name)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 34 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 34 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_get_binding(name);
}
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
extern 
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
      _Bool 
# 46 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
           z_impl_device_is_ready(const struct device * dev);


static inline 
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
             _Bool 
# 49 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
                  device_is_ready(const struct device * dev)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 57 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 57 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_is_ready(dev);
}
# 1032 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/device.h" 2
# 21 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h" 2
# 33 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
enum usb_dc_status_code {

 USB_DC_ERROR,

 USB_DC_RESET,

 USB_DC_CONNECTED,

 USB_DC_CONFIGURED,

 USB_DC_DISCONNECTED,

 USB_DC_SUSPEND,

 USB_DC_RESUME,

 USB_DC_INTERFACE,

 USB_DC_SET_HALT,

 USB_DC_CLEAR_HALT,

 USB_DC_SOF,

 USB_DC_UNKNOWN
};






enum usb_dc_ep_cb_status_code {

 USB_DC_EP_SETUP,

 USB_DC_EP_DATA_OUT,

 USB_DC_EP_DATA_IN
};




enum usb_dc_ep_transfer_type {

 USB_DC_EP_CONTROL = 0,

 USB_DC_EP_ISOCHRONOUS,

 USB_DC_EP_BULK,

 USB_DC_EP_INTERRUPT
};






enum usb_dc_ep_synchronozation_type {

 USB_DC_EP_NO_SYNCHRONIZATION = (0U << 2U),

 USB_DC_EP_ASYNCHRONOUS = (1U << 2U),

 USB_DC_EP_ADAPTIVE = (2U << 2U),

 USB_DC_EP_SYNCHRONOUS = (3U << 2U)
};






struct usb_dc_ep_cfg_data {





 uint8_t ep_addr;

 uint16_t ep_mps;



 enum usb_dc_ep_transfer_type ep_type;
};




typedef void (*usb_dc_ep_callback)(uint8_t ep,
       enum usb_dc_ep_cb_status_code cb_status);




typedef void (*usb_dc_status_callback)(enum usb_dc_status_code cb_status,
           const uint8_t *param);
# 145 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_attach(void);
# 155 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_detach(void);
# 165 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_reset(void);
# 174 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_set_address(const uint8_t addr);
# 185 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
void usb_dc_set_status_callback(const usb_dc_status_callback cb);
# 200 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data * const cfg);
# 213 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data * const cfg);
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_set_stall(const uint8_t ep);
# 233 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_clear_stall(const uint8_t ep);
# 244 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_is_stalled(const uint8_t ep, uint8_t *const stalled);
# 254 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_halt(const uint8_t ep);
# 268 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_enable(const uint8_t ep);
# 282 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_disable(const uint8_t ep);
# 294 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_flush(const uint8_t ep);
# 314 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_write(const uint8_t ep, const uint8_t *const data,
      const uint32_t data_len, uint32_t * const ret_bytes);
# 336 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_read(const uint8_t ep, uint8_t *const data,
     const uint32_t max_data_len, uint32_t *const read_bytes);
# 353 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_set_callback(const uint8_t ep, const usb_dc_ep_callback cb);
# 373 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
   uint32_t *read_bytes);
# 389 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_read_continue(uint8_t ep);
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_ep_mps(uint8_t ep);
# 408 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/drivers/usb/usb_dc.h"
int usb_dc_wakeup_request(void);
# 42 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 1
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/app/build/zephyr/include/generated/version.h" 1
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hub.h" 1
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 2
# 26 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
struct usb_req_type_field {

 uint8_t recipient : 5;
 uint8_t type : 2;
 uint8_t direction : 1;





} 
# 36 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 36 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_setup_packet {
 union {
  uint8_t bmRequestType;
  struct usb_req_type_field RequestType;
 };
 uint8_t bRequest;
 uint16_t wValue;
 uint16_t wIndex;
 uint16_t wLength;
};
# 79 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
static inline 
# 79 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
             _Bool 
# 79 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
                  usb_reqtype_is_to_host(const struct usb_setup_packet *setup)
{
 return setup->RequestType.direction == 1;
}







static inline 
# 90 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
             _Bool 
# 90 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
                  usb_reqtype_is_to_device(const struct usb_setup_packet *setup)
{
 return setup->RequestType.direction == 0;
}
# 143 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
struct usb_desc_header {
 uint8_t bLength;
 uint8_t bDescriptorType;
} 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_device_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint16_t bcdUSB;
 uint8_t bDeviceClass;
 uint8_t bDeviceSubClass;
 uint8_t bDeviceProtocol;
 uint8_t bMaxPacketSize0;
 uint16_t idVendor;
 uint16_t idProduct;
 uint16_t bcdDevice;
 uint8_t iManufacturer;
 uint8_t iProduct;
 uint8_t iSerialNumber;
 uint8_t bNumConfigurations;
} 
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_cfg_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint16_t wTotalLength;
 uint8_t bNumInterfaces;
 uint8_t bConfigurationValue;
 uint8_t iConfiguration;
 uint8_t bmAttributes;
 uint8_t bMaxPower;
} 
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 176 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_if_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint8_t bInterfaceNumber;
 uint8_t bAlternateSetting;
 uint8_t bNumEndpoints;
 uint8_t bInterfaceClass;
 uint8_t bInterfaceSubClass;
 uint8_t bInterfaceProtocol;
 uint8_t iInterface;
} 
# 189 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 189 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;

struct usb_ep_desc_bmattr {

 uint8_t transfer : 2;
 uint8_t synch: 2;
 uint8_t usage: 2;
 uint8_t reserved: 2;






} 
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 203 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_ep_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint8_t bEndpointAddress;
 union {
  uint8_t bmAttributes;
  struct usb_ep_desc_bmattr Attributes;
 };
 uint16_t wMaxPacketSize;
 uint8_t bInterval;
} 
# 216 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 216 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_string_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint16_t bString;
} 
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 223 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;


struct usb_association_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint8_t bFirstInterface;
 uint8_t bInterfaceCount;
 uint8_t bFunctionClass;
 uint8_t bFunctionSubClass;
 uint8_t bFunctionProtocol;
 uint8_t iFunction;
} 
# 235 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h" 3 4
 __attribute__((__packed__))
# 235 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_ch9.h"
         ;
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h" 2
# 101 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
typedef void (*usb_ep_callback)(uint8_t ep,
    enum usb_dc_ep_cb_status_code cb_status);
# 115 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
typedef int (*usb_request_handler)(struct usb_setup_packet *setup,
       int32_t *transfer_len, uint8_t **payload_data);




typedef void (*usb_interface_config)(struct usb_desc_header *head,
         uint8_t bInterfaceNumber);






struct usb_ep_cfg_data {





 usb_ep_callback ep_cb;






 uint8_t ep_addr;
};






struct usb_interface_cfg_data {

 usb_request_handler class_handler;

 usb_request_handler vendor_handler;
# 164 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
 usb_request_handler custom_handler;
};
# 175 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
struct usb_cfg_data {




 const uint8_t *usb_device_description;

 void *interface_descriptor;

 usb_interface_config interface_config;

 void (*cb_usb_status)(struct usb_cfg_data *cfg,
         enum usb_dc_status_code cb_status,
         const uint8_t *param);

 struct usb_interface_cfg_data interface;

 uint8_t num_endpoints;





 struct usb_ep_cfg_data *endpoint;
};
# 211 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_set_config(const uint8_t *usb_descriptor);
# 220 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_deconfig(void);
# 238 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_enable(usb_dc_status_callback status_cb);
# 249 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_disable(void);
# 267 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_write(uint8_t ep, const uint8_t *data, uint32_t data_len, uint32_t *bytes_ret);
# 286 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_read(uint8_t ep, uint8_t *data, uint32_t max_data_len, uint32_t *ret_bytes);
# 299 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_ep_set_stall(uint8_t ep);
# 312 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_ep_clear_stall(uint8_t ep);
# 332 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
       uint32_t *read_bytes);
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_ep_read_continue(uint8_t ep);




typedef void (*usb_transfer_callback)(uint8_t ep, int tsize, void *priv);
# 367 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code);
# 386 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
   usb_transfer_callback cb, void *priv);
# 405 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_transfer_sync(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags);







void usb_cancel_transfer(uint8_t ep);




void usb_cancel_transfers(void);
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"

# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h" 3 4
_Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
    usb_transfer_is_busy(uint8_t ep);
# 440 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
int usb_wakeup_request(void);







# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h" 3 4
_Bool 
# 447 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/usb_device.h"
    usb_get_remote_wakeup_status(void);
# 15 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2

# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/usb_descriptor.h" 1
# 43 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/usb_descriptor.h"
struct usb_dev_data {
 const struct device *dev;
 sys_snode_t node;
};

struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
          struct usb_cfg_data *cfg);
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
            uint8_t iface_num);
struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep);

int usb_get_str_descriptor_idx(void *ptr);

uint8_t *usb_update_sn_string_descriptor(void);
uint8_t *usb_get_device_descriptor(void);
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h" 1
# 16 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
# 1 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/hid.h" 1
# 516 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/hid.h"
enum hid_kbd_code {
 HID_KEY_A = 4,
 HID_KEY_B = 5,
 HID_KEY_C = 6,
 HID_KEY_D = 7,
 HID_KEY_E = 8,
 HID_KEY_F = 9,
 HID_KEY_G = 10,
 HID_KEY_H = 11,
 HID_KEY_I = 12,
 HID_KEY_J = 13,
 HID_KEY_K = 14,
 HID_KEY_L = 15,
 HID_KEY_M = 16,
 HID_KEY_N = 17,
 HID_KEY_O = 18,
 HID_KEY_P = 19,
 HID_KEY_Q = 20,
 HID_KEY_R = 21,
 HID_KEY_S = 22,
 HID_KEY_T = 23,
 HID_KEY_U = 24,
 HID_KEY_V = 25,
 HID_KEY_W = 26,
 HID_KEY_X = 27,
 HID_KEY_Y = 28,
 HID_KEY_Z = 29,
 HID_KEY_1 = 30,
 HID_KEY_2 = 31,
 HID_KEY_3 = 32,
 HID_KEY_4 = 33,
 HID_KEY_5 = 34,
 HID_KEY_6 = 35,
 HID_KEY_7 = 36,
 HID_KEY_8 = 37,
 HID_KEY_9 = 38,
 HID_KEY_0 = 39,
 HID_KEY_ENTER = 40,
 HID_KEY_ESC = 41,
 HID_KEY_BACKSPACE = 42,
 HID_KEY_TAB = 43,
 HID_KEY_SPACE = 44,
 HID_KEY_MINUS = 45,
 HID_KEY_EQUAL = 46,
 HID_KEY_LEFTBRACE = 47,
 HID_KEY_RIGHTBRACE = 48,
 HID_KEY_BACKSLASH = 49,
 HID_KEY_HASH = 50,
 HID_KEY_SEMICOLON = 51,
 HID_KEY_APOSTROPHE = 52,
 HID_KEY_GRAVE = 53,
 HID_KEY_COMMA = 54,
 HID_KEY_DOT = 55,
 HID_KEY_SLASH = 56,
 HID_KEY_CAPSLOCK = 57,
 HID_KEY_F1 = 58,
 HID_KEY_F2 = 59,
 HID_KEY_F3 = 60,
 HID_KEY_F4 = 61,
 HID_KEY_F5 = 62,
 HID_KEY_F6 = 63,
 HID_KEY_F7 = 64,
 HID_KEY_F8 = 65,
 HID_KEY_F9 = 66,
 HID_KEY_F10 = 67,
 HID_KEY_F11 = 68,
 HID_KEY_F12 = 69,
 HID_KEY_SYSRQ = 70,
 HID_KEY_SCROLLLOCK = 71,
 HID_KEY_PAUSE = 72,
 HID_KEY_INSERT = 73,
 HID_KEY_HOME = 74,
 HID_KEY_PAGEUP = 75,
 HID_KEY_DELETE = 76,
 HID_KEY_END = 77,
 HID_KEY_PAGEDOWN = 78,
 HID_KEY_RIGHT = 79,
 HID_KEY_LEFT = 80,
 HID_KEY_DOWN = 81,
 HID_KEY_UP = 82,
 HID_KEY_NUMLOCK = 83,
 HID_KEY_KPSLASH = 84,
 HID_KEY_KPASTERISK = 85,
 HID_KEY_KPMINUS = 86,
 HID_KEY_KPPLUS = 87,
 HID_KEY_KPENTER = 88,
 HID_KEY_KP_1 = 89,
 HID_KEY_KP_2 = 90,
 HID_KEY_KP_3 = 91,
 HID_KEY_KP_4 = 92,
 HID_KEY_KP_5 = 93,
 HID_KEY_KP_6 = 94,
 HID_KEY_KP_7 = 95,
 HID_KEY_KP_8 = 96,
 HID_KEY_KP_9 = 97,
 HID_KEY_KP_0 = 98,
};




enum hid_kbd_modifier {
 HID_KBD_MODIFIER_NONE = 0x00,
 HID_KBD_MODIFIER_LEFT_CTRL = 0x01,
 HID_KBD_MODIFIER_LEFT_SHIFT = 0x02,
 HID_KBD_MODIFIER_LEFT_ALT = 0x04,
 HID_KBD_MODIFIER_LEFT_UI = 0x08,
 HID_KBD_MODIFIER_RIGHT_CTRL = 0x10,
 HID_KBD_MODIFIER_RIGHT_SHIFT = 0x20,
 HID_KBD_MODIFIER_RIGHT_ALT = 0x40,
 HID_KBD_MODIFIER_RIGHT_UI = 0x80,
};




enum hid_kbd_led {
 HID_KBD_LED_NUM_LOCK = 0x01,
 HID_KBD_LED_CAPS_LOCK = 0x02,
 HID_KBD_LED_SCROLL_LOCK = 0x04,
 HID_KBD_LED_COMPOSE = 0x08,
 HID_KBD_LED_KANA = 0x10,
};
# 17 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h" 2
# 34 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
typedef int (*hid_cb_t)(const struct device *dev,
   struct usb_setup_packet *setup, int32_t *len,
   uint8_t **data);
typedef void (*hid_int_ready_callback)(const struct device *dev);
typedef void (*hid_protocol_cb_t)(const struct device *dev, uint8_t protocol);
typedef void (*hid_idle_cb_t)(const struct device *dev, uint16_t report_id);




struct hid_ops {
 hid_cb_t get_report;
 hid_cb_t set_report;
 hid_protocol_cb_t protocol_change;
 hid_idle_cb_t on_idle;






 hid_int_ready_callback int_in_ready;



};
# 69 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
void usb_hid_register_device(const struct device *dev,
        const uint8_t *desc,
        size_t size,
        const struct hid_ops *op);
# 84 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
int hid_int_ep_write(const struct device *dev,
       const uint8_t *data,
       uint32_t data_len,
       uint32_t *bytes_ret);
# 101 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
int hid_int_ep_read(const struct device *dev,
      uint8_t *data,
      uint32_t max_data_len,
      uint32_t *ret_bytes);
# 116 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
int usb_hid_set_proto_code(const struct device *dev, uint8_t proto_code);
# 125 "/home/g/mise-work/zmk-firmware/zmk/zephyr/include/zephyr/usb/class/usb_hid.h"
int usb_hid_init(const struct device *dev);
# 18 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2

# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 1 3 4
# 43 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/ieeefp.h" 1 3 4
# 44 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 2 3 4





# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/lib/gcc/arm-zephyr-eabi/12.2.0/include/stddef.h" 1 3 4
# 50 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 2 3 4


# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/machine/stdlib.h" 1 3 4
# 53 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 2 3 4
# 65 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4



# 67 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







size_t __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);






int atexit (void (*__func)(void));
double atof (const char *__nptr);



int atoi (const char *__nptr);
long atol (const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void free (void *) __attribute__ ((__nothrow__));
void *calloc(size_t, size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
char * getenv (const char *__string);



char * _findenv (const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
void *valloc (size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int wctomb (char *, wchar_t);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);

char * mkdtemp (char *);






int mkstemp (char *);







void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) __attribute__ ((__nothrow__));
# 176 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);

int strfromd(char *restrict str, size_t n,
      const char *restrict format, double fp);


float strtof (const char *restrict __n, char **restrict __end_PTR);

long double strtold (const char *restrict __n, char **restrict __end_PTR);


int strfromf(char *restrict str, size_t n,
      const char *restrict format, float fp);

int strfroml (char *restrict str, size_t n,
               const char *restrict format, long double fp);
# 202 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
# 220 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
int system (const char *__string);
# 230 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
void _Exit (int __status) __attribute__ ((__noreturn__));





int setenv (const char *__string, const char *__value, int __overwrite);
# 271 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);





int rand_r (unsigned *__seed);
# 311 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
long long atoll (const char *__nptr);


long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);


unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);







int unsetenv (const char *__string);




int posix_memalign (void **, size_t, size_t) __attribute__((__nonnull__ (1)))
     __attribute__((__warn_unused_result__));


char * __dtoa (double, int, int, int *, int*, char**);
char * __ldtoa (long double, int, int, int *, int *, char **);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 360 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 3 4
extern long double strtold (const char *restrict, char **restrict);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__, __malloc__(free,1))) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__)) __attribute__ ((__nothrow__));
int at_quick_exit(void (*)(void));
__attribute__((__noreturn__)) void
 quick_exit(int);





# 1 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/ssp/stdlib.h" 1 3 4









size_t __ssp_real_mbstowcs (wchar_t *__buf, const char *__src, size_t __n) __asm__("" "mbstowcs"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) size_t mbstowcs (wchar_t *__buf, const char *__src, size_t __n)
{
  if (__buf != ((void *)0))
    if (__builtin_object_size(__buf, 1 > 1) != (size_t)-1 && __n * sizeof(wchar_t) > __builtin_object_size(__buf, 1 > 1)) __chk_fail();
  return __ssp_real_mbstowcs (__buf, __src, __n);
}

size_t __ssp_real_wcstombs (char *__buf, const wchar_t *__src, size_t __len) __asm__("" "wcstombs"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) size_t wcstombs (char *__buf, const wchar_t *__src, size_t __len) { if (__buf != ((void *)0)) if (__builtin_object_size(__buf, 1 > 1) != (size_t)-1 && __len > __builtin_object_size(__buf, 1 > 1)) __chk_fail(); return __ssp_real_wcstombs (__buf, __src, __len); }

                                                    ;

int __ssp_real_wctomb (char *__buf, wchar_t __wc) __asm__("" "wctomb"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) int wctomb (char *__buf, wchar_t __wc)
{
  if (__buf != ((void *)0))
    if (__builtin_object_size(__buf, 1 > 1) != (size_t)-1 && __locale_mb_cur_max() > __builtin_object_size(__buf, 1 > 1)) __chk_fail();
  return __ssp_real_wctomb (__buf, __wc);
}


# 379 "/home/g/zephyr-sdk-0.16.3/arm-zephyr-eabi/picolibc/include/stdlib.h" 2 3 4
# 20 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 2





# 24 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct usb_hid_class_subdescriptor {
 uint8_t bDescriptorType;
 uint16_t wDescriptorLength;
} 
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __attribute__((__packed__))
# 27 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
         ;

struct usb_hid_descriptor {
 uint8_t bLength;
 uint8_t bDescriptorType;
 uint16_t bcdHID;
 uint8_t bCountryCode;
 uint8_t bNumDescriptors;





 struct usb_hid_class_subdescriptor subdesc[1];
} 
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __attribute__((__packed__))
# 41 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
         ;

struct usb_hid_config {
 struct usb_if_descriptor if0;
 struct usb_hid_descriptor if0_hid;
 struct usb_ep_descriptor if0_int_in_ep;



} 
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __attribute__((__packed__))
# 50 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
         ;
# 134 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct hid_device_info {
 const uint8_t *report_desc;
 size_t report_size;
 const struct hid_ops *ops;
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 146 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
     configured;
 
# 147 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 147 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
     suspended;
 struct usb_dev_data common;
};

static sys_slist_t usb_hid_devlist;

static int hid_on_get_idle(struct hid_device_info *dev_data,
      struct usb_setup_packet *setup, int32_t *len,
      uint8_t **data)
{
# 182 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 return -
# 182 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 182 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;

}

static int hid_on_get_report(struct hid_device_info *dev_data,
        struct usb_setup_packet *setup, int32_t *len,
        uint8_t **data)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Get Report callback" "\n", z_log_minimal_level_to_char(4U)); } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0;
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Get Report callback" == 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Get Report callback") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Get Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Get Report callback") + 0))) > (1)) ? (_Generic(("%s: " "Get Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Get Report callback") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Get Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Get Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Get Report callback") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Get Report callback") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Get Report callback") + 0; double _d = _Generic(("%s: " "Get Report callback") + 0, float : ("%s: " "Get Report callback") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Get Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Get Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Get Report callback") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Get Report callback") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Get Report callback"; } } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Get Report callback") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Get Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Get Report callback") + 0))) > (1)) ? (_Generic(("%s: " "Get Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Get Report callback") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Get Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Get Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Get Report callback") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Get Report callback") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Get Report callback") + 0; double _d = _Generic(("%s: " "Get Report callback") + 0, float : ("%s: " "Get Report callback") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Get Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Get Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Get Report callback") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Get Report callback") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Get Report callback"; } } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Get Report callback"); } } while (
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 190 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);



 return -
# 194 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 194 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
}

static int hid_on_get_protocol(struct hid_device_info *dev_data,
          struct usb_setup_packet *setup, int32_t *len,
          uint8_t **data)
{
# 215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 return -
# 215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 215 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;

}

static int hid_on_set_idle(struct hid_device_info *dev_data,
      struct usb_setup_packet *setup, int32_t *len,
      uint8_t **data)
{
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 return -
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 248 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;

}

static int hid_on_set_report(struct hid_device_info *dev_data,
        struct usb_setup_packet *setup, int32_t *len,
        uint8_t **data)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Set Report callback" "\n", z_log_minimal_level_to_char(4U)); } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0;
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Set Report callback" == 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Set Report callback") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Set Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Set Report callback") + 0))) > (1)) ? (_Generic(("%s: " "Set Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Set Report callback") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Set Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Set Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Set Report callback") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Set Report callback") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Set Report callback") + 0; double _d = _Generic(("%s: " "Set Report callback") + 0, float : ("%s: " "Set Report callback") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Set Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Set Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Set Report callback") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Set Report callback") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Set Report callback"; } } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Set Report callback") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Set Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Set Report callback") + 0))) > (1)) ? (_Generic(("%s: " "Set Report callback") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Set Report callback") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Set Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Set Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Set Report callback") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Set Report callback") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Set Report callback") + 0; double _d = _Generic(("%s: " "Set Report callback") + 0, float : ("%s: " "Set Report callback") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Set Report callback") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Set Report callback"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Set Report callback") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Set Report callback") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Set Report callback"; } } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Set Report callback"); } } while (
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 256 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);



 return -
# 260 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 260 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
}

static int hid_on_set_protocol(const struct device *dev,
          struct hid_device_info *dev_data,
          struct usb_setup_packet *setup)
{
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 return -
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 287 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;

}

static void usb_set_hid_report_size(const struct usb_cfg_data *cfg, uint16_t size)
{
 struct usb_if_descriptor *if_desc = (void *)cfg->interface_descriptor;
 struct usb_hid_config *desc =
   ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(if_desc)), __typeof__(((struct usb_hid_config *)0)->if0)) || __builtin_types_compatible_p(__typeof__(*(if_desc)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct usb_hid_config *)(((char *)(if_desc)) - 
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct usb_hid_config
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  if0
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 295 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  )); });

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "if_desc %p desc %p size %u" "\n", z_log_minimal_level_to_char(4U), if_desc, desc, size); } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (if_desc) + 0 ; __auto_type _v3 = (desc) + 0 ; __auto_type _v4 = (size) + 0;
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "if_desc %p desc %p size %u" == 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "if_desc %p desc %p size %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "if_desc %p desc %p size %u") + 0))) > (1)) ? (_Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "if_desc %p desc %p size %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "if_desc %p desc %p size %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "if_desc %p desc %p size %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "if_desc %p desc %p size %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "if_desc %p desc %p size %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "if_desc %p desc %p size %u") + 0; double _d = _Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : ("%s: " "if_desc %p desc %p size %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "if_desc %p desc %p size %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "if_desc %p desc %p size %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "if_desc %p desc %p size %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "if_desc %p desc %p size %u"; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "if_desc %p desc %p size %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "if_desc %p desc %p size %u") + 0))) > (1)) ? (_Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "if_desc %p desc %p size %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "if_desc %p desc %p size %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "if_desc %p desc %p size %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "if_desc %p desc %p size %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "if_desc %p desc %p size %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "if_desc %p desc %p size %u") + 0; double _d = _Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : ("%s: " "if_desc %p desc %p size %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "if_desc %p desc %p size %u") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "if_desc %p desc %p size %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "if_desc %p desc %p size %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "if_desc %p desc %p size %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "if_desc %p desc %p size %u"; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("if_desc %p desc %p size %u", if_desc, desc, size); } } while (
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 297 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);

 sys_put_le16(size,
       (uint8_t *)&(desc->if0_hid.subdesc[0].wDescriptorLength));
}
# 349 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
static void hid_do_status_cb(struct hid_device_info *dev_data,
        enum usb_dc_status_code status,
        const uint8_t *param)
{
 switch (status) {
 case USB_DC_ERROR:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device error" "\n", z_log_minimal_level_to_char(3U)); } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device error" == 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device error") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device error") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device error") + 0))) > (1)) ? (_Generic(("Device error") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device error") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device error") + 0; (void)__v; size_t __arg_size = _Generic(("Device error"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device error") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device error") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device error") + 0; double _d = _Generic(("Device error") + 0, float : ("Device error") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device error") + 0; (void)__v; size_t __arg_size = _Generic(("Device error"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device error") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device error") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device error"; } } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device error") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device error") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device error") + 0))) > (1)) ? (_Generic(("Device error") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device error") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device error") + 0; (void)__v; size_t __arg_size = _Generic(("Device error"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device error") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device error") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device error") + 0; double _d = _Generic(("Device error") + 0, float : ("Device error") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device error") + 0; (void)__v; size_t __arg_size = _Generic(("Device error"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device error") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device error") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device error"; } } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device error"); } } while (
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 355 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  break;
 case USB_DC_RESET: {
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device reset detected" "\n", z_log_minimal_level_to_char(3U)); } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device reset detected" == 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device reset detected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device reset detected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device reset detected") + 0))) > (1)) ? (_Generic(("Device reset detected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device reset detected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device reset detected") + 0; (void)__v; size_t __arg_size = _Generic(("Device reset detected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device reset detected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device reset detected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device reset detected") + 0; double _d = _Generic(("Device reset detected") + 0, float : ("Device reset detected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device reset detected") + 0; (void)__v; size_t __arg_size = _Generic(("Device reset detected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device reset detected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device reset detected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device reset detected"; } } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device reset detected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device reset detected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device reset detected") + 0))) > (1)) ? (_Generic(("Device reset detected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device reset detected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device reset detected") + 0; (void)__v; size_t __arg_size = _Generic(("Device reset detected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device reset detected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device reset detected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device reset detected") + 0; double _d = _Generic(("Device reset detected") + 0, float : ("Device reset detected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device reset detected") + 0; (void)__v; size_t __arg_size = _Generic(("Device reset detected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device reset detected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device reset detected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device reset detected"; } } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device reset detected"); } } while (
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 358 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  dev_data->configured = 
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                        0
# 359 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                             ;
  dev_data->suspended = 
# 360 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                       0
# 360 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                            ;
# 372 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 }



  break;
 case USB_DC_CONNECTED:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device connected" "\n", z_log_minimal_level_to_char(3U)); } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device connected" == 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device connected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device connected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device connected") + 0))) > (1)) ? (_Generic(("Device connected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device connected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device connected") + 0; (void)__v; size_t __arg_size = _Generic(("Device connected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device connected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device connected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device connected") + 0; double _d = _Generic(("Device connected") + 0, float : ("Device connected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device connected") + 0; (void)__v; size_t __arg_size = _Generic(("Device connected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device connected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device connected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device connected"; } } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device connected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device connected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device connected") + 0))) > (1)) ? (_Generic(("Device connected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device connected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device connected") + 0; (void)__v; size_t __arg_size = _Generic(("Device connected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device connected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device connected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device connected") + 0; double _d = _Generic(("Device connected") + 0, float : ("Device connected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device connected") + 0; (void)__v; size_t __arg_size = _Generic(("Device connected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device connected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device connected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device connected"; } } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device connected"); } } while (
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 378 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  break;
 case USB_DC_CONFIGURED:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device configured" "\n", z_log_minimal_level_to_char(3U)); } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device configured" == 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device configured") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device configured") + 0))) > (1)) ? (_Generic(("Device configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device configured") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device configured") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device configured") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device configured") + 0; double _d = _Generic(("Device configured") + 0, float : ("Device configured") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device configured") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device configured") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device configured"; } } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device configured") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device configured") + 0))) > (1)) ? (_Generic(("Device configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device configured") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device configured") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device configured") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device configured") + 0; double _d = _Generic(("Device configured") + 0, float : ("Device configured") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device configured") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device configured") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device configured"; } } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device configured"); } } while (
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 381 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  dev_data->configured = 
# 382 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                        1
# 382 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                            ;
  break;
 case USB_DC_DISCONNECTED:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device disconnected" "\n", z_log_minimal_level_to_char(3U)); } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device disconnected" == 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device disconnected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device disconnected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device disconnected") + 0))) > (1)) ? (_Generic(("Device disconnected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device disconnected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device disconnected") + 0; (void)__v; size_t __arg_size = _Generic(("Device disconnected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device disconnected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device disconnected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device disconnected") + 0; double _d = _Generic(("Device disconnected") + 0, float : ("Device disconnected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device disconnected") + 0; (void)__v; size_t __arg_size = _Generic(("Device disconnected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device disconnected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device disconnected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device disconnected"; } } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device disconnected") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device disconnected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device disconnected") + 0))) > (1)) ? (_Generic(("Device disconnected") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device disconnected") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device disconnected") + 0; (void)__v; size_t __arg_size = _Generic(("Device disconnected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device disconnected") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device disconnected") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device disconnected") + 0; double _d = _Generic(("Device disconnected") + 0, float : ("Device disconnected") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device disconnected") + 0; (void)__v; size_t __arg_size = _Generic(("Device disconnected"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device disconnected") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device disconnected") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device disconnected"; } } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device disconnected"); } } while (
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 385 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  dev_data->configured = 
# 386 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                        0
# 386 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                             ;
  dev_data->suspended = 
# 387 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                       0
# 387 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                            ;
  break;
 case USB_DC_SUSPEND:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device suspended" "\n", z_log_minimal_level_to_char(3U)); } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device suspended" == 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device suspended") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device suspended") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device suspended") + 0))) > (1)) ? (_Generic(("Device suspended") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device suspended") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device suspended") + 0; (void)__v; size_t __arg_size = _Generic(("Device suspended"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device suspended") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device suspended") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device suspended") + 0; double _d = _Generic(("Device suspended") + 0, float : ("Device suspended") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device suspended") + 0; (void)__v; size_t __arg_size = _Generic(("Device suspended"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device suspended") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device suspended") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device suspended"; } } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device suspended") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device suspended") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device suspended") + 0))) > (1)) ? (_Generic(("Device suspended") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device suspended") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device suspended") + 0; (void)__v; size_t __arg_size = _Generic(("Device suspended"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device suspended") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device suspended") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device suspended") + 0; double _d = _Generic(("Device suspended") + 0, float : ("Device suspended") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device suspended") + 0; (void)__v; size_t __arg_size = _Generic(("Device suspended"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device suspended") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device suspended") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device suspended"; } } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device suspended"); } } while (
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 390 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  dev_data->suspended = 
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                       1
# 391 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                           ;
  break;
 case USB_DC_RESUME:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device resumed" "\n", z_log_minimal_level_to_char(3U)); } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device resumed" == 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device resumed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device resumed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device resumed") + 0))) > (1)) ? (_Generic(("Device resumed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device resumed") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device resumed") + 0; (void)__v; size_t __arg_size = _Generic(("Device resumed"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device resumed") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device resumed") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device resumed") + 0; double _d = _Generic(("Device resumed") + 0, float : ("Device resumed") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device resumed") + 0; (void)__v; size_t __arg_size = _Generic(("Device resumed"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device resumed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device resumed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device resumed"; } } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device resumed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device resumed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device resumed") + 0))) > (1)) ? (_Generic(("Device resumed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device resumed") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device resumed") + 0; (void)__v; size_t __arg_size = _Generic(("Device resumed"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device resumed") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device resumed") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device resumed") + 0; double _d = _Generic(("Device resumed") + 0, float : ("Device resumed") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device resumed") + 0; (void)__v; size_t __arg_size = _Generic(("Device resumed"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device resumed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device resumed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device resumed"; } } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device resumed"); } } while (
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 394 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  if (dev_data->suspended) {
   do { if (!(1 && ((3U <= 0) || ((0 == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "from suspend" "\n", z_log_minimal_level_to_char(3U)); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ;
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("from suspend" == 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("from suspend") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("from suspend") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("from suspend") + 0))) > (1)) ? (_Generic(("from suspend") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("from suspend") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("from suspend") + 0; (void)__v; size_t __arg_size = _Generic(("from suspend"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("from suspend") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("from suspend") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("from suspend") + 0; double _d = _Generic(("from suspend") + 0, float : ("from suspend") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("from suspend") + 0; (void)__v; size_t __arg_size = _Generic(("from suspend"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("from suspend") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("from suspend") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "from suspend"; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("from suspend") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("from suspend") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("from suspend") + 0))) > (1)) ? (_Generic(("from suspend") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("from suspend") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("from suspend") + 0; (void)__v; size_t __arg_size = _Generic(("from suspend"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("from suspend") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("from suspend") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("from suspend") + 0; double _d = _Generic(("from suspend") + 0, float : ("from suspend") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("from suspend") + 0; (void)__v; size_t __arg_size = _Generic(("from suspend"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("from suspend") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("from suspend") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "from suspend"; } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("from suspend"); } } while (
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 396 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );
   dev_data->suspended = 
# 397 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                        0
# 397 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                             ;
  } else {
   do { if (!(1 && ((4U <= 0) || ((0 == 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Spurious resume event" "\n", z_log_minimal_level_to_char(4U)); } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = ((const char *)__func__) + 0;
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Spurious resume event" == 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Spurious resume event") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Spurious resume event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Spurious resume event") + 0))) > (1)) ? (_Generic(("%s: " "Spurious resume event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Spurious resume event") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Spurious resume event") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Spurious resume event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Spurious resume event") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Spurious resume event") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Spurious resume event") + 0; double _d = _Generic(("%s: " "Spurious resume event") + 0, float : ("%s: " "Spurious resume event") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Spurious resume event") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Spurious resume event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Spurious resume event") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Spurious resume event") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Spurious resume event"; } } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Spurious resume event") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Spurious resume event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Spurious resume event") + 0))) > (1)) ? (_Generic(("%s: " "Spurious resume event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Spurious resume event") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Spurious resume event") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Spurious resume event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Spurious resume event") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Spurious resume event") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Spurious resume event") + 0; double _d = _Generic(("%s: " "Spurious resume event") + 0, float : ("%s: " "Spurious resume event") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Spurious resume event") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Spurious resume event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Spurious resume event") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Spurious resume event") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Spurious resume event"; } } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Spurious resume event"); } } while (
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 399 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );
  }
  break;
 case USB_DC_SOF:





  break;
 case USB_DC_UNKNOWN:
 default:
  do { if (!(1 && ((3U <= 0) || ((0 == 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (3U <= __log_level) && (3U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Unknown event" "\n", z_log_minimal_level_to_char(3U)); } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (3U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 3U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Unknown event" == 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unknown event") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unknown event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unknown event") + 0))) > (1)) ? (_Generic(("Unknown event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unknown event") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unknown event") + 0; (void)__v; size_t __arg_size = _Generic(("Unknown event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unknown event") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unknown event") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unknown event") + 0; double _d = _Generic(("Unknown event") + 0, float : ("Unknown event") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unknown event") + 0; (void)__v; size_t __arg_size = _Generic(("Unknown event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unknown event") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unknown event") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unknown event"; } } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unknown event") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unknown event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unknown event") + 0))) > (1)) ? (_Generic(("Unknown event") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unknown event") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unknown event") + 0; (void)__v; size_t __arg_size = _Generic(("Unknown event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unknown event") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unknown event") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unknown event") + 0; double _d = _Generic(("Unknown event") + 0, float : ("Unknown event") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unknown event") + 0; (void)__v; size_t __arg_size = _Generic(("Unknown event"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unknown event") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unknown event") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unknown event"; } } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 3U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Unknown event"); } } while (
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 411 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  break;
 }

}

static void hid_status_cb(struct usb_cfg_data *cfg,
     enum usb_dc_status_code status,
     const uint8_t *param)
{
 struct hid_device_info *dev_data;
 struct usb_dev_data *common;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "cfg %p status %d" "\n", z_log_minimal_level_to_char(4U), cfg, status); } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (cfg) + 0 ; __auto_type _v3 = (status) + 0;
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "cfg %p status %d" == 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "cfg %p status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "cfg %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "cfg %p status %d") + 0))) > (1)) ? (_Generic(("%s: " "cfg %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "cfg %p status %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "cfg %p status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "cfg %p status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "cfg %p status %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "cfg %p status %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "cfg %p status %d") + 0; double _d = _Generic(("%s: " "cfg %p status %d") + 0, float : ("%s: " "cfg %p status %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "cfg %p status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "cfg %p status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "cfg %p status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "cfg %p status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "cfg %p status %d"; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "cfg %p status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "cfg %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "cfg %p status %d") + 0))) > (1)) ? (_Generic(("%s: " "cfg %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "cfg %p status %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "cfg %p status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "cfg %p status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "cfg %p status %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "cfg %p status %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "cfg %p status %d") + 0; double _d = _Generic(("%s: " "cfg %p status %d") + 0, float : ("%s: " "cfg %p status %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "cfg %p status %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "cfg %p status %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "cfg %p status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "cfg %p status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "cfg %p status %d"; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("cfg %p status %d", cfg, status); } } while (
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 424 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);

 common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
 if (common == 
# 427 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
              ((void *)0)
# 427 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                  ) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device data not found for cfg %p" "\n", z_log_minimal_level_to_char(2U), cfg); } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; __auto_type _v1 = (cfg) + 0;
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device data not found for cfg %p" == 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for cfg %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for cfg %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for cfg %p") + 0))) > (1)) ? (_Generic(("Device data not found for cfg %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for cfg %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for cfg %p") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for cfg %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for cfg %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for cfg %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for cfg %p") + 0; double _d = _Generic(("Device data not found for cfg %p") + 0, float : ("Device data not found for cfg %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for cfg %p") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for cfg %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for cfg %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for cfg %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for cfg %p"; } } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for cfg %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for cfg %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for cfg %p") + 0))) > (1)) ? (_Generic(("Device data not found for cfg %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for cfg %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for cfg %p") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for cfg %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for cfg %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for cfg %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for cfg %p") + 0; double _d = _Generic(("Device data not found for cfg %p") + 0, float : ("Device data not found for cfg %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for cfg %p") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for cfg %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for cfg %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for cfg %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for cfg %p"; } } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device data not found for cfg %p", cfg); } } while (
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 428 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  return;
 }

 dev_data = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(common)), __typeof__(((struct hid_device_info *)0)->common)) || __builtin_types_compatible_p(__typeof__(*(common)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct hid_device_info *)(((char *)(common)) - 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           __builtin_offsetof (
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           struct hid_device_info
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           , 
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           common
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           )
# 432 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           )); });

 hid_do_status_cb(dev_data, status, param);
}

static int hid_class_handle_req(struct usb_setup_packet *setup,
    int32_t *len, uint8_t **data)
{
 struct hid_device_info *dev_data;
 struct usb_dev_data *common;
 const struct device *dev;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d" "\n", z_log_minimal_level_to_char(4U), setup->bRequest, setup->bmRequestType, *len); } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {

#pragma GCC diagnostic push
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (setup->bRequest) + 0 ; __auto_type _v3 = (setup->bmRequestType) + 0 ; __auto_type _v4 = (*len) + 0;

#pragma GCC diagnostic pop
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({

#pragma GCC diagnostic push
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }

#pragma GCC diagnostic pop
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d" == 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {

#pragma GCC diagnostic push
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0))) > (1)) ? (_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; double _d = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }

#pragma GCC diagnostic pop
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }

#pragma GCC diagnostic push
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wshadow"
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;

#pragma GCC diagnostic pop
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {

#pragma GCC diagnostic push
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0))) > (1)) ? (_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; double _d = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d"; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }

#pragma GCC diagnostic pop
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Class request:" "bRequest 0x%02x, bmRequestType 0x%02x len %d", setup->bRequest, setup->bmRequestType, *len); } } while (
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 444 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
)

                                              ;

 common = usb_get_dev_data_by_iface(&usb_hid_devlist,
        (uint8_t)setup->wIndex);
 if (common == 
# 450 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
              ((void *)0)
# 450 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                  ) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device data not found for interface %u" "\n", z_log_minimal_level_to_char(2U), setup->wIndex); } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
#pragma GCC diagnostic push
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; __auto_type _v1 = (setup->wIndex) + 0;
#pragma GCC diagnostic pop
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
#pragma GCC diagnostic push
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
#pragma GCC diagnostic pop
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device data not found for interface %u" == 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
#pragma GCC diagnostic push
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for interface %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) > (1)) ? (_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for interface %u") + 0; double _d = _Generic(("Device data not found for interface %u") + 0, float : ("Device data not found for interface %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for interface %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for interface %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for interface %u"; } } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
#pragma GCC diagnostic push
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
#pragma GCC diagnostic ignored "-Wshadow"
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
#pragma GCC diagnostic pop
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
#pragma GCC diagnostic push
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for interface %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) > (1)) ? (_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for interface %u") + 0; double _d = _Generic(("Device data not found for interface %u") + 0, float : ("Device data not found for interface %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for interface %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for interface %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for interface %u"; } } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device data not found for interface %u", setup->wIndex); } } while (
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 451 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 )
                 ;
  return -
# 453 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
         19
# 453 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
 }

 dev_data = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(common)), __typeof__(((struct hid_device_info *)0)->common)) || __builtin_types_compatible_p(__typeof__(*(common)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct hid_device_info *)(((char *)(common)) - 
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           __builtin_offsetof (
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           struct hid_device_info
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           , 
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           common
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           )
# 456 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           )); });
 dev = common->dev;

 if (usb_reqtype_is_to_host(setup)) {
  switch (setup->bRequest) {
  case 0x02:
   return hid_on_get_idle(dev_data, setup, len, data);
  case 0x01:
   if (dev_data->ops && dev_data->ops->get_report) {
    return dev_data->ops->get_report(dev, setup,
         len, data);
   } else {
    return hid_on_get_report(dev_data, setup, len,
        data);
   }
   break;
  case 0x03:
   return hid_on_get_protocol(dev_data, setup, len, data);
  default:
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Unhandled request 0x%02x" "\n", z_log_minimal_level_to_char(1U), setup->bRequest); } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = (setup->bRequest) + 0;
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Unhandled request 0x%02x" == 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unhandled request 0x%02x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) > (1)) ? (_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unhandled request 0x%02x") + 0; double _d = _Generic(("Unhandled request 0x%02x") + 0, float : ("Unhandled request 0x%02x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unhandled request 0x%02x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unhandled request 0x%02x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unhandled request 0x%02x"; } } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unhandled request 0x%02x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) > (1)) ? (_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unhandled request 0x%02x") + 0; double _d = _Generic(("Unhandled request 0x%02x") + 0, float : ("Unhandled request 0x%02x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unhandled request 0x%02x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unhandled request 0x%02x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unhandled request 0x%02x"; } } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Unhandled request 0x%02x", setup->bRequest); } } while (
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 475 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );
   break;
  }
 } else {
  switch (setup->bRequest) {
  case 0x0A:
   return hid_on_set_idle(dev_data, setup, len, data);
  case 0x09:
   if (dev_data->ops && dev_data->ops->set_report) {
    return dev_data->ops->set_report(dev, setup,
         len, data);
   } else {
    return hid_on_set_report(dev_data, setup, len,
        data);
   }
   break;
  case 0x0B:
   return hid_on_set_protocol(dev, dev_data, setup);
  default:
   do { if (!(1 && ((1U <= 0) || ((0 == 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Unhandled request 0x%02x" "\n", z_log_minimal_level_to_char(1U), setup->bRequest); } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 1U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = (setup->bRequest) + 0;
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Unhandled request 0x%02x" == 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unhandled request 0x%02x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) > (1)) ? (_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unhandled request 0x%02x") + 0; double _d = _Generic(("Unhandled request 0x%02x") + 0, float : ("Unhandled request 0x%02x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unhandled request 0x%02x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unhandled request 0x%02x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unhandled request 0x%02x"; } } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Unhandled request 0x%02x") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) > (1)) ? (_Generic(("Unhandled request 0x%02x") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Unhandled request 0x%02x") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Unhandled request 0x%02x") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Unhandled request 0x%02x") + 0; double _d = _Generic(("Unhandled request 0x%02x") + 0, float : ("Unhandled request 0x%02x") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Unhandled request 0x%02x") + 0; (void)__v; size_t __arg_size = _Generic(("Unhandled request 0x%02x"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Unhandled request 0x%02x") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Unhandled request 0x%02x") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Unhandled request 0x%02x"; } } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Unhandled request 0x%02x", setup->bRequest); } } while (
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 494 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );
   break;
  }
 }

 return -
# 499 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 499 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
}

static int hid_custom_handle_req(struct usb_setup_packet *setup,
     int32_t *len, uint8_t **data)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d" "\n", z_log_minimal_level_to_char(4U), setup->bRequest, setup->bmRequestType, setup->wLength); } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {

#pragma GCC diagnostic push
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (setup->bRequest) + 0 ; __auto_type _v3 = (setup->bmRequestType) + 0 ; __auto_type _v4 = (setup->wLength) + 0;

#pragma GCC diagnostic pop
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({

#pragma GCC diagnostic push
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }

#pragma GCC diagnostic pop
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d" == 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {

#pragma GCC diagnostic push
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0))) > (1)) ? (_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; double _d = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }

#pragma GCC diagnostic pop
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }

#pragma GCC diagnostic push
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wshadow"
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;

#pragma GCC diagnostic pop
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {

#pragma GCC diagnostic push
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0))) > (1)) ? (_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; double _d = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d"; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }

#pragma GCC diagnostic pop
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Standard request:" "bRequest 0x%02x, bmRequestType 0x%02x, len %d", setup->bRequest, setup->bmRequestType, setup->wLength); } } while (
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 505 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
)

                                                        ;

 if (usb_reqtype_is_to_host(setup) &&
     setup->RequestType.recipient == 1 &&
     setup->bRequest == 0x06) {
  uint8_t value = (uint8_t)(setup->wValue >> 8);
  uint8_t iface_num = (uint8_t)setup->wIndex;
  struct hid_device_info *dev_data;
  struct usb_dev_data *common;
  const struct usb_cfg_data *cfg;
  const struct usb_hid_config *hid_desc;

  common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
  if (common == 
# 520 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
               ((void *)0)
# 520 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                   ) {
   do { if (!(1 && ((2U <= 0) || ((0 == 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device data not found for interface %u" "\n", z_log_minimal_level_to_char(2U), iface_num); } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
#pragma GCC diagnostic push
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = (iface_num) + 0;
#pragma GCC diagnostic pop
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
#pragma GCC diagnostic push
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
#pragma GCC diagnostic pop
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device data not found for interface %u" == 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
#pragma GCC diagnostic push
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for interface %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) > (1)) ? (_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for interface %u") + 0; double _d = _Generic(("Device data not found for interface %u") + 0, float : ("Device data not found for interface %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for interface %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for interface %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for interface %u"; } } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
#pragma GCC diagnostic push
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
#pragma GCC diagnostic ignored "-Wshadow"
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
#pragma GCC diagnostic pop
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
#pragma GCC diagnostic push
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for interface %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) > (1)) ? (_Generic(("Device data not found for interface %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for interface %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for interface %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for interface %u") + 0; double _d = _Generic(("Device data not found for interface %u") + 0, float : ("Device data not found for interface %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for interface %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for interface %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for interface %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for interface %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for interface %u"; } } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Device data not found for interface %u", iface_num); } } while (
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 521 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  )
              ;
   return -
# 523 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
          22
# 523 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                ;
  }

  dev_data = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(common)), __typeof__(((struct hid_device_info *)0)->common)) || __builtin_types_compatible_p(__typeof__(*(common)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct hid_device_info *)(((char *)(common)) - 
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
            __builtin_offsetof (
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
            struct hid_device_info
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
            , 
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
            common
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
            )
# 526 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
            )); });

  switch (value) {
  case 0x21:
   cfg = common->dev->config;
   hid_desc = cfg->interface_descriptor;

   do { if (!(1 && ((4U <= 0) || ((0 == 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Return HID Descriptor" "\n", z_log_minimal_level_to_char(4U)); } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = ((const char *)__func__) + 0;
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Return HID Descriptor" == 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Return HID Descriptor") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Return HID Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return HID Descriptor") + 0))) > (1)) ? (_Generic(("%s: " "Return HID Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return HID Descriptor") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Return HID Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return HID Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Return HID Descriptor") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Return HID Descriptor") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Return HID Descriptor") + 0; double _d = _Generic(("%s: " "Return HID Descriptor") + 0, float : ("%s: " "Return HID Descriptor") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Return HID Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return HID Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Return HID Descriptor") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Return HID Descriptor") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Return HID Descriptor"; } } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Return HID Descriptor") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Return HID Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return HID Descriptor") + 0))) > (1)) ? (_Generic(("%s: " "Return HID Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return HID Descriptor") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Return HID Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return HID Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Return HID Descriptor") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Return HID Descriptor") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Return HID Descriptor") + 0; double _d = _Generic(("%s: " "Return HID Descriptor") + 0, float : ("%s: " "Return HID Descriptor") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Return HID Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return HID Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Return HID Descriptor") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Return HID Descriptor") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Return HID Descriptor"; } } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Return HID Descriptor"); } } while (
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 533 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );

   *len = (((setup->wLength) < (hid_desc->if0_hid.bLength)) ? (setup->wLength) : (hid_desc->if0_hid.bLength));
   *data = (uint8_t *)&hid_desc->if0_hid;
   break;
  case 0x22:
   do { if (!(1 && ((4U <= 0) || ((0 == 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Return Report Descriptor" "\n", z_log_minimal_level_to_char(4U)); } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   ; __auto_type _v1 = ((const char *)__func__) + 0;
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   do { ; 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  has_rw_str = ({
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Return Report Descriptor" == 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { _plen = 0; } else { do {
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ? 0 : 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Return Report Descriptor") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Return Report Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return Report Descriptor") + 0))) > (1)) ? (_Generic(("%s: " "Return Report Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return Report Descriptor") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Return Report Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return Report Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Return Report Descriptor") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Return Report Descriptor") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Return Report Descriptor") + 0; double _d = _Generic(("%s: " "Return Report Descriptor") + 0, float : ("%s: " "Return Report Descriptor") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Return Report Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return Report Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Return Report Descriptor") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Return Report Descriptor") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Return Report Descriptor"; } } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); }
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   struct log_msg *_msg;
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   long long _ll_buf[((((
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((__builtin_object_size(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , __builtin_object_size(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 0)) : __memset_ichk(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  + _plen + (0))
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ))
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); if (_plen != 0) { do {
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   _Static_assert(!0 || (0 && !(
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ) 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _ros_pos_en = (_flags) & (1UL << (1)); 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rws_pos_en = (_flags) & (1UL << (2)); 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  _Bool 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  (0x7fffffffL)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  __builtin_offsetof (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  , 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  data
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  )
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  22
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Return Report Descriptor") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Return Report Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return Report Descriptor") + 0))) > (1)) ? (_Generic(("%s: " "Return Report Descriptor") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Return Report Descriptor") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Return Report Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return Report Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Return Report Descriptor") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Return Report Descriptor") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Return Report Descriptor") + 0; double _d = _Generic(("%s: " "Return Report Descriptor") + 0, float : ("%s: " "Return Report Descriptor") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Return Report Descriptor") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Return Report Descriptor"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Return Report Descriptor") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Return Report Descriptor") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Return Report Descriptor"; } } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  28 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  : _total_len; if (_pbuf != 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
   } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  ((void *)0)
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ); (void)_mode; if (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ) { z_log_printf_arg_checker("Return Report Descriptor"); } } while (
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
  0
# 539 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  );

   *len = (((setup->wLength) < (dev_data->report_size)) ? (setup->wLength) : (dev_data->report_size));
   *data = (uint8_t *)dev_data->report_desc;
   break;
  default:
   return -
# 545 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
          134
# 545 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                 ;
  }

  return 0;
 }

 return -
# 551 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        22
# 551 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
              ;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
 struct hid_device_info *dev_data;
 struct usb_dev_data *common;

 common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
 if (common == 
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
              ((void *)0)
# 560 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                  ) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device data not found for endpoint %u" "\n", z_log_minimal_level_to_char(2U), ep); } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ; __auto_type _v1 = (ep) + 0;
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device data not found for endpoint %u" == 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for endpoint %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for endpoint %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for endpoint %u") + 0))) > (1)) ? (_Generic(("Device data not found for endpoint %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for endpoint %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for endpoint %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for endpoint %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for endpoint %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for endpoint %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for endpoint %u") + 0; double _d = _Generic(("Device data not found for endpoint %u") + 0, float : ("Device data not found for endpoint %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for endpoint %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for endpoint %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for endpoint %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for endpoint %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for endpoint %u"; } } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device data not found for endpoint %u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device data not found for endpoint %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for endpoint %u") + 0))) > (1)) ? (_Generic(("Device data not found for endpoint %u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device data not found for endpoint %u") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device data not found for endpoint %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for endpoint %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device data not found for endpoint %u") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device data not found for endpoint %u") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device data not found for endpoint %u") + 0; double _d = _Generic(("Device data not found for endpoint %u") + 0, float : ("Device data not found for endpoint %u") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device data not found for endpoint %u") + 0; (void)__v; size_t __arg_size = _Generic(("Device data not found for endpoint %u"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device data not found for endpoint %u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device data not found for endpoint %u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device data not found for endpoint %u"; } } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device data not found for endpoint %u", ep); } } while (
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 561 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  return;
 }

 dev_data = ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(common)), __typeof__(((struct hid_device_info *)0)->common)) || __builtin_types_compatible_p(__typeof__(*(common)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct hid_device_info *)(((char *)(common)) - 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           __builtin_offsetof (
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           struct hid_device_info
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           , 
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           common
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
           )
# 565 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
           )); });

 if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == 
# 567 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                                                       ((void *)0) 
# 567 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                                                            ||
     dev_data->ops->int_in_ready == 
# 568 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
                                   ((void *)0)
# 568 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
                                       ) {
  return;
 }

 dev_data->ops->int_in_ready(common->dev);
}
# 618 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
static void hid_interface_config(struct usb_desc_header *head,
     uint8_t bInterfaceNumber)
{
 struct usb_if_descriptor *if_desc = (struct usb_if_descriptor *)head;
 struct usb_hid_config *desc =
  ({ _Static_assert(__builtin_types_compatible_p(__typeof__(*(if_desc)), __typeof__(((struct usb_hid_config *)0)->if0)) || __builtin_types_compatible_p(__typeof__(*(if_desc)), __typeof__(void)), "" "pointer type mismatch in CONTAINER_OF"); ((struct usb_hid_config *)(((char *)(if_desc)) - 
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct usb_hid_config
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 if0
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 623 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 )); });

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "" "\n", z_log_minimal_level_to_char(4U)); } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0;
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "" == 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "") + 0))) > (1)) ? (_Generic(("%s: " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " ""), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "") + 0; double _d = _Generic(("%s: " "") + 0, float : ("%s: " "") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " ""), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " ""; } } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "") + 0))) > (1)) ? (_Generic(("%s: " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " ""), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "") + 0; double _d = _Generic(("%s: " "") + 0, float : ("%s: " "") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " ""), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " ""; } } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker(""); } } while (
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 625 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);

 desc->if0.bInterfaceNumber = bInterfaceNumber;



}
# 647 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
int usb_hid_set_proto_code(const struct device *dev, uint8_t proto_code)
{
 const struct usb_cfg_data *cfg = dev->config;
 struct usb_if_descriptor *if_desc = cfg->interface_descriptor;

 if (0) {
  if_desc->bInterfaceProtocol = proto_code;
  return 0;
 }

 return -
# 657 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 657 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
}

int usb_hid_init(const struct device *dev)
{
 struct usb_cfg_data *cfg = (void *)dev->config;
 struct hid_device_info *dev_data = dev->data;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Initializing HID Device: dev %p" "\n", z_log_minimal_level_to_char(4U), dev); } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (dev) + 0;
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Initializing HID Device: dev %p" == 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Initializing HID Device: dev %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Initializing HID Device: dev %p") + 0))) > (1)) ? (_Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Initializing HID Device: dev %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Initializing HID Device: dev %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Initializing HID Device: dev %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Initializing HID Device: dev %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Initializing HID Device: dev %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Initializing HID Device: dev %p") + 0; double _d = _Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : ("%s: " "Initializing HID Device: dev %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Initializing HID Device: dev %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Initializing HID Device: dev %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Initializing HID Device: dev %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Initializing HID Device: dev %p"; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Initializing HID Device: dev %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Initializing HID Device: dev %p") + 0))) > (1)) ? (_Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Initializing HID Device: dev %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Initializing HID Device: dev %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Initializing HID Device: dev %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Initializing HID Device: dev %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Initializing HID Device: dev %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Initializing HID Device: dev %p") + 0; double _d = _Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : ("%s: " "Initializing HID Device: dev %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Initializing HID Device: dev %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Initializing HID Device: dev %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Initializing HID Device: dev %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Initializing HID Device: dev %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Initializing HID Device: dev %p"; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Initializing HID Device: dev %p", dev); } } while (
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 665 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);




 usb_set_hid_report_size(cfg, dev_data->report_size);

 return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
        size_t size, const struct hid_ops *ops)
{
 struct hid_device_info *dev_data = dev->data;

 dev_data->report_desc = desc;
 dev_data->report_size = size;

 dev_data->ops = ops;
 dev_data->common.dev = dev;

 sys_slist_append(&usb_hid_devlist, &dev_data->common.node);

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Added dev_data %p dev %p to devlist %p" "\n", z_log_minimal_level_to_char(4U), dev_data, dev, &usb_hid_devlist); } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
#pragma GCC diagnostic push
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (dev_data) + 0 ; __auto_type _v3 = (dev) + 0 ; __auto_type _v4 = (&usb_hid_devlist) + 0;
#pragma GCC diagnostic pop
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
#pragma GCC diagnostic push
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
#pragma GCC diagnostic pop
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Added dev_data %p dev %p to devlist %p" == 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
#pragma GCC diagnostic push
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Added dev_data %p dev %p to devlist %p") + 0))) > (1)) ? (_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Added dev_data %p dev %p to devlist %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; double _d = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : ("%s: " "Added dev_data %p dev %p to devlist %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Added dev_data %p dev %p to devlist %p"; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
#pragma GCC diagnostic push
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

#pragma GCC diagnostic ignored "-Wshadow"
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
#pragma GCC diagnostic pop
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
#pragma GCC diagnostic push
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Added dev_data %p dev %p to devlist %p") + 0))) > (1)) ? (_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Added dev_data %p dev %p to devlist %p") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; double _d = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : ("%s: " "Added dev_data %p dev %p to devlist %p") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Added dev_data %p dev %p to devlist %p") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Added dev_data %p dev %p to devlist %p"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Added dev_data %p dev %p to devlist %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Added dev_data %p dev %p to devlist %p"; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v4) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) > (1)) ? (_Generic((_v4) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v4) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (4 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v4) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((4 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v4) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 4 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v4) + 0; double _d = _Generic((_v4) + 0, float : (_v4) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v4) + 0; (void)__v; size_t __arg_size = _Generic((_v4), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v4) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v4) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v4; } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
#pragma GCC diagnostic pop
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Added dev_data %p dev %p to devlist %p", dev_data, dev, &usb_hid_devlist); } } while (
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 688 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
)
                   ;
}

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
       uint32_t *bytes_ret)
{
 const struct usb_cfg_data *cfg = dev->config;
 struct hid_device_info *hid_dev_data = dev->data;

 if (hid_dev_data->configured && !hid_dev_data->suspended) {
  return usb_write(cfg->endpoint[0].ep_addr, data,
    data_len, bytes_ret);
 } else {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Device is not configured" "\n", z_log_minimal_level_to_char(2U)); } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); break; } if (0 != 0 && !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 2U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  ;
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  do { ; 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 has_rw_str = ({
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  int _rv; if ((((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = 0 > 0 ? 1 : 0; }
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((0 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("Device is not configured" == 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { _plen = 0; } else { do {
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) ? 0 : 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device is not configured") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device is not configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device is not configured") + 0))) > (1)) ? (_Generic(("Device is not configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device is not configured") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device is not configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device is not configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device is not configured") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device is not configured") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device is not configured") + 0; double _d = _Generic(("Device is not configured") + 0, float : ("Device is not configured") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device is not configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device is not configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device is not configured") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device is not configured") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device is not configured"; } } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); }
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  struct log_msg *_msg;
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  long long _ll_buf[((((
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((__builtin_object_size(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , __builtin_object_size(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 0)) : __memset_ichk(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 + _plen + (0))
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ))
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); if (_plen != 0) { do {
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  _Static_assert(!0 || (0 && !(
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ) 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _ros_pos_en = (_flags) & (1UL << (1)); 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rws_pos_en = (_flags) & (1UL << (2)); 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 _Bool 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = 0; uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? 0 : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 (0x7fffffffL)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 __builtin_offsetof (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 , 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 data
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 )
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 22
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Device is not configured") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Device is not configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device is not configured") + 0))) > (1)) ? (_Generic(("Device is not configured") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Device is not configured") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("Device is not configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device is not configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("Device is not configured") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("Device is not configured") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Device is not configured") + 0; double _d = _Generic(("Device is not configured") + 0, float : ("Device is not configured") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("Device is not configured") + 0; (void)__v; size_t __arg_size = _Generic(("Device is not configured"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Device is not configured") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Device is not configured") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Device is not configured"; } } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 28 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 : _total_len; if (_pbuf != 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
  } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 ((void *)0)
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ); (void)_mode; if (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ) { z_log_printf_arg_checker("Device is not configured"); } } while (
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
 0
# 702 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 );
  return -
# 703 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
         11
# 703 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;
 }

}

int hid_int_ep_read(const struct device *dev, uint8_t *data, uint32_t max_data_len,
      uint32_t *ret_bytes)
{






 return -
# 717 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
        134
# 717 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
               ;

}

static const struct usb_hid_device_api {
 void (*init)(void);
} hid_api;

static int usb_hid_device_init(const struct device *dev)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Init HID Device: dev %p (%s)" "\n", z_log_minimal_level_to_char(4U), dev, dev->name); } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); break; } if (0 != 0 && !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
is_user_context = k_is_user_context(); if (!0 && 0 && !is_user_context && 4U > ((*(&(__log_current_dynamic_data)->filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do {
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 ; __auto_type _v1 = ((const char *)__func__) + 0 ; __auto_type _v2 = (dev) + 0 ; __auto_type _v3 = (dev->name) + 0;
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 do { ; 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
has_rw_str = ({
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 int _rv; if ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (2))) { _rv = 0; } else { _rv = ((0 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0))) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) > 0 ? 1 : 0; }
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _rv; }); if (0 && 1 && ((0) == 0) && !has_rw_str) { ; ; _mode = Z_LOG_MSG_MODE_ZERO_COPY; } else { ; do { int _plen; uint32_t _options = ((1 << 3) | (0 ? ((1UL << (1)) | (1UL << (0))) : 0)) | (1UL << (2)); if ("%s: " "Init HID Device: dev %p (%s)" == 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { _plen = 0; } else { do {
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ? 0 : 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Init HID Device: dev %p (%s)") + 0))) > (1)) ? (_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Init HID Device: dev %p (%s)") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Init HID Device: dev %p (%s)") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Init HID Device: dev %p (%s)"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Init HID Device: dev %p (%s)") + 0; double _d = _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : ("%s: " "Init HID Device: dev %p (%s)") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Init HID Device: dev %p (%s)") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Init HID Device: dev %p (%s)"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Init HID Device: dev %p (%s)"; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); }
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wshadow"
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 struct log_msg *_msg;
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 long long _ll_buf[((((
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long long)) - 1) / (sizeof(long long)))]; long double _ld_buf[((((
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))) + (sizeof(long double)) - 1) / (sizeof(long double)))]; _msg = (sizeof(long double) == (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1))))) ? (struct log_msg *)_ld_buf : (struct log_msg *)_ll_buf; if (0) { 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((__builtin_object_size(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, __builtin_object_size(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 0)) : __memset_ichk(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
+ _plen + (0))
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; }; do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); if (_plen != 0) { do {
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic push
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"

# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 _Static_assert(!0 || (0 && !(
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% (((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) <= 2UL ? ((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) : (1UL << (8 * sizeof(long) - __builtin_clzl(((((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))) - 1)))))), "" "Xtensa requires aligned package."); _Static_assert((
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
) 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
% sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); uint32_t _flags = _options; 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_ros_pos_en = (_flags) & (1UL << (1)); 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_rws_pos_en = (_flags) & (1UL << (2)); 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
_Bool 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
_cros_en = (_flags) & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _rws_pos_idx = 0; uint8_t _ros_pos_idx = 0; uint8_t _alls_cnt = ((0 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((0) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))); uint8_t _fros_cnt = (((_flags) >> 3) & ((1UL << (3)) - 1UL)); uint8_t _rws_cnt = _cros_en ? ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) + (2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) : _alls_cnt - _fros_cnt; uint8_t _ros_cnt = _ros_pos_en ? (1 + _alls_cnt - _rws_cnt) : 0; uint8_t *_ros_pos_buf; { }; uint8_t _ros_pos_buf_buf4[4]; uint8_t _ros_pos_buf_buf8[8]; uint8_t _ros_pos_buf_buf12[12]; uint8_t _ros_pos_buf_buf16[16]; uint8_t _ros_pos_buf_buf32[32]; _ros_pos_buf = (_ros_cnt) <= 4 ? _ros_pos_buf_buf4 : ((_ros_cnt) <= 8 ? _ros_pos_buf_buf8 : ((_ros_cnt) <= 12 ? _ros_pos_buf_buf12 : ((_ros_cnt) <= 16 ? _ros_pos_buf_buf16 : _ros_pos_buf_buf32))); uint8_t *_rws_buffer; { }; uint8_t _rws_buffer_buf4[4]; uint8_t _rws_buffer_buf8[8]; uint8_t _rws_buffer_buf12[12]; uint8_t _rws_buffer_buf16[16]; uint8_t _rws_buffer_buf32[32]; _rws_buffer = (2 * _rws_cnt) <= 4 ? _rws_buffer_buf4 : ((2 * _rws_cnt) <= 8 ? _rws_buffer_buf8 : ((2 * _rws_cnt) <= 12 ? _rws_buffer_buf12 : ((2 * _rws_cnt) <= 16 ? _rws_buffer_buf16 : _rws_buffer_buf32))); size_t _pmax = !___is_null(_msg->data) ? _plen : 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
(0x7fffffffL)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__builtin_offsetof (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct log_msg
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
data
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; union cbprintf_package_hdr *_len_loc; if (_rws_cnt && !((_flags) & (1UL << (2)))) { _plen = -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
22
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } if (_pmax < sizeof(*_len_loc)) { _plen = -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
; break; } _len_loc = (union cbprintf_package_hdr *)_pbuf; _pkg_len += sizeof(*_len_loc); _pkg_offset += sizeof(*_len_loc); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Init HID Device: dev %p (%s)") + 0))) > (1)) ? (_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "Init HID Device: dev %p (%s)") + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = ("%s: " "Init HID Device: dev %p (%s)") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Init HID Device: dev %p (%s)"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (0 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((0 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 0 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "Init HID Device: dev %p (%s)") + 0; double _d = _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : ("%s: " "Init HID Device: dev %p (%s)") + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = ("%s: " "Init HID Device: dev %p (%s)") + 0; (void)__v; size_t __arg_size = _Generic(("%s: " "Init HID Device: dev %p (%s)"), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "Init HID Device: dev %p (%s)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "Init HID Device: dev %p (%s)"; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v1) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) > (1)) ? (_Generic((_v1) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v1) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (1 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v1) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((1 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v1) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 1 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v1) + 0; double _d = _Generic((_v1) + 0, float : (_v1) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v1) + 0; (void)__v; size_t __arg_size = _Generic((_v1), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v1) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v1) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v1; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v2) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) > (1)) ? (_Generic((_v2) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v2) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (2 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v2) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((2 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v2) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 2 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v2) + 0; double _d = _Generic((_v2) + 0, float : (_v2) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v2) + 0; (void)__v; size_t __arg_size = _Generic((_v2), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v2) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v2) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v2; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((_v3) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) > (1)) ? (_Generic((_v3) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((_v3) + 0))) : (1)) != 0UL) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); uint32_t _loc = _pkg_len / sizeof(int); if (3 < 1 + _fros_cnt) { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } else if (_Generic((_v3) + 0, char * : 1, const char * : ((0) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((0) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((0) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { if (_cros_en) { if ((3 < (((_flags) >> 3) & ((1UL << (3)) - 1UL)) ? 0 : _Generic((_v3) + 0, char * : 1, const char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, unsigned char * : 1, const unsigned char * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile unsigned char * : 1, const volatile unsigned char * : 1, wchar_t * : 1, const wchar_t * : ((_flags) & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0))) { if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _loc; } } else { if (_ros_pos_en) { _ros_pos_buf[_ros_pos_idx++] = _loc; } } } else if (_rws_pos_en) { _rws_buffer[_rws_pos_idx++] = 3 - 1; _rws_buffer[_rws_pos_idx++] = _pkg_len / sizeof(int); } } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (_v3) + 0; double _d = _Generic((_v3) + 0, float : (_v3) + 0, default : 0.0); (void)_v; (void)_d; size_t arg_size = ({ __auto_type __v = (_v3) + 0; (void)__v; size_t __arg_size = _Generic((_v3), float : sizeof(double), default : sizeof((__v)) ); __arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((_v3) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((_v3) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = _v3; } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _total_len = _pkg_len; _total_len += _ros_cnt; _total_len += 2 * _rws_cnt; if (_pbuf != 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { uint8_t *_pbuf_loc = &_pbuf[_pkg_len]; for (size_t _ros_idx = 0; _ros_idx < _ros_cnt; _ros_idx++) { *_pbuf_loc++ = _ros_pos_buf[_ros_idx]; } for (size_t _rws_idx = 0; _rws_idx < (2 * _rws_cnt); _rws_idx++) { *_pbuf_loc++ = _rws_buffer[_rws_idx]; } } _plen = (_total_len > (int)_pmax) ? -
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
28 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
: _total_len; if (_pbuf != 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { union cbprintf_package_hdr pkg_hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = _ros_cnt, .rw_str_cnt = _rws_cnt, } }; ; *_len_loc = pkg_hdr; }
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
#pragma GCC diagnostic pop
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
 } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } struct log_msg_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, }; ; z_log_msg_static_create((void *)_src, _desc, _msg->data, 
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); _mode = Z_LOG_MSG_MODE_FROM_STACK; } (void)_mode; } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
); (void)_mode; if (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
) { z_log_printf_arg_checker("Init HID Device: dev %p (%s)", dev, dev->name); } } while (
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
0
# 727 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
);

 return 0;
}
# 745 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
static __attribute__((section("." "usb" "." "descriptor_primary.1" "." "0"))) 
# 745 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__used__)) __attribute__((__aligned__(
# 745 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
1
# 745 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 745 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct usb_hid_config hid_cfg_0 = { .if0 = { .bLength = sizeof(struct usb_if_descriptor), .bDescriptorType = 4, .bInterfaceNumber = 0, .bAlternateSetting = 0, .bNumEndpoints = 1, .bInterfaceClass = 0x03, .bInterfaceSubClass = 0, .bInterfaceProtocol = 0, .iInterface = 0, }, .if0_hid = { .bLength = sizeof(struct usb_hid_descriptor), .bDescriptorType = 0x21, .bcdHID = (0x0111), .bCountryCode = 0, .bNumDescriptors = 1, .subdesc[0] = { .bDescriptorType = 0x22, .wDescriptorLength = 0, }, }, .if0_int_in_ep = { .bLength = sizeof(struct usb_ep_descriptor), .bDescriptorType = 5, .bEndpointAddress = 0x80, .bmAttributes = USB_DC_EP_INTERRUPT, .wMaxPacketSize = (16), .bInterval = 1, }, };
static struct usb_ep_cfg_data hid_ep_data_0[] = { { .ep_cb = hid_int_in, .ep_addr = 0x80, }, };
static 
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__aligned__(
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__alignof(struct usb_cfg_data)
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct usb_cfg_data hid_config_0 __attribute__((section("." "_usb_cfg_data" "." "static" "." "hid_config_0_"))) 
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__used__)) 
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= { .usb_device_description = 
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 747 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
, .interface_config = hid_interface_config, .interface_descriptor = &hid_cfg_0.if0, .cb_usb_status = hid_status_cb, .interface = { .class_handler = hid_class_handle_req, .custom_handler = hid_custom_handle_req, }, .num_endpoints = ((size_t) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(hid_ep_data_0), __typeof__(&(hid_ep_data_0)[0])))]) - 1) + (sizeof(hid_ep_data_0) / sizeof((hid_ep_data_0)[0])))), .endpoint = hid_ep_data_0, };
struct hid_device_info usb_hid_dev_data_0;
static 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__aligned__(
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__alignof(struct device_state)
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct device_state __devstate_usb_hid_device_0 __attribute__((__section__(".z_devstate"))); _Static_assert(sizeof("\"HID\" \"_\" \"0\"") <= 48U, "" "DEVICE_NAME_GET(\"HID\" \"_\" \"0\")" " too long"); static const 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__aligned__(
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__alignof(struct device)
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct device __device_usb_hid_device_0 __attribute__((section("." "_device" "." "static" "." "3_40_"))) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__used__)) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
= { .name = "HID" "_" "0", .config = (&hid_config_0), .api = (&hid_api), .state = (&__devstate_usb_hid_device_0), .data = (&usb_hid_dev_data_0), .pm = (
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
((void *)0)
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
), }; static const 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__aligned__(
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__alignof(struct init_entry)
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
))) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
struct init_entry 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c" 3 4
__attribute__((__used__)) 
# 749 "/home/g/mise-work/zmk-firmware/zmk/zephyr/subsys/usb/device/class/hid/core.c"
__attribute__((__section__( ".z_init_" "POST_KERNEL" "40""_" "0""_"))) __init___device_usb_hid_device_0 = { .init_fn = {.dev = (&usb_hid_device_init)}, .dev = &__device_usb_hid_device_0, };
